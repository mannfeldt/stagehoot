{"version":3,"sources":["components/common/CountdownAnimation.scss","base.js","components/common/Header.js","components/quiz/create/Question.js","components/common/utils/appUtil.js","components/minigame/snake/Snake.js","components/quiz/create/GenerateQuizForm.js","components/quiz/create/QuestionForm.js","components/quiz/create/CreateQuiz.js","components/minigame/create/CreateTetris.js","components/minigame/create/CreateGolf.js","components/minigame/create/CreateSnake.js","components/minigame/create/CreateMinigame.js","components/pages/Create.js","components/quiz/host/PhaseSetup.js","components/quiz/host/PhaseConnection.js","components/common/CountdownAnimation.js","components/quiz/host/PhaseStarting.js","components/quiz/host/PhaseAwaitingQuestion.js","components/quiz/host/PhaseShowQuestion.js","components/quiz/AnswerOption.js","components/common/Timer.js","components/quiz/host/AnswerCounter.js","components/quiz/host/PhaseAnswer.js","components/quiz/Podium.js","components/quiz/host/PhaseFinalResult.js","components/quiz/AnswerChart.js","components/quiz/Leaderboard.js","components/quiz/host/PhaseResultQuestion.js","components/quiz/host/PhaseEnd.js","components/quiz/host/Quiz.js","components/minigame/host/PhaseSetup.js","components/minigame/host/PhaseConnection.js","components/minigame/host/PhaseStarting.js","components/common/utils/minigameUtil.js","components/minigame/tetris/Tetris.js","components/minigame/host/PhaseFinalResult.js","components/minigame/host/PhaseEnd.js","components/minigame/snake/SnakeStarting.js","components/minigame/golf/Golf.js","components/minigame/golf/GolfStarting.js","components/minigame/snake/SnakeSetup.js","components/minigame/golf/GolfSetup.js","components/minigame/host/Minigame.js","components/pages/Host.js","components/quiz/play/PhaseConnection.js","components/quiz/play/PhaseStarting.js","components/quiz/play/PhaseAwaitingQuestion.js","components/quiz/play/PhaseShowQuestion.js","components/quiz/play/PhaseAnswer.js","components/quiz/play/PhaseFinalResult.js","components/quiz/play/PhaseResultQuestion.js","components/quiz/play/Quiz.js","components/quiz/play/PhaseEnd.js","components/minigame/play/PhaseConnection.js","components/minigame/play/PhaseStarting.js","components/minigame/play/PhaseFinalResult.js","components/minigame/snake/SnakeController.js","components/minigame/tetris/TetrisController.js","components/minigame/golf/GolfController.js","components/minigame/play/Minigame.js","components/pages/Play.js","components/pages/Home.js","components/common/CustomizedSnackbars.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cyanColor","redColor","purpleColor","greenColor","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","titleText","options","react_default","a","createElement","id","AppBar_default","position","Toolbar_default","className","Link","to","Component","Question","expanded","deleteQuestion","bind","assertThisInitialized","question","classes","Card_default","card","CardHeader_default","action","IconButton_default","onClick","DeleteOutlined_default","title","subheader","timelimit","CardContent_default","Typography_default","variant","align","List_default","correctAnswers","map","answer","index","ListItem_default","key","ListItemText_default","primary","wrongAnswers","withStyles","theme","maxWidth","calculateDefaultTimeLimit","aType","Math","floor","join","length","parseDOM","s","DOMParser","parseFromString","concat","body","textContent","parseDOMArray","arr","result","i","push","ctx","canvas","GenerateQuizForm","handleChange","name","event","setState","defineProperty","target","value","handleChangeSelect","nrOfQuestions","category","difficulty","generateQuestions","_this$state","_this$props","addQuestions","showSnackbar","url","fetch","then","response","json","generated","response_code","questions","results","generatedQuestion","correct_answer","incorrect_answers","qType","type","snack","message","_this$state2","Grid_default","container","item","xs","md","FormControl_default","fullWidth","TextField_default","label","margin","onChange","InputLabel_default","htmlFor","Select_default","inputProps","MenuItem_default","Button_default","QuestionForm","handleTrueFalse","correctAnswer","wrongAnswerOne","wrongAnswerTwo","wrongAnswerThree","sendQuestion","toggleGenerateQuestion","addQuestion","q","isTimelimit","disabled","create_GenerateQuizForm","required","component","FormLabel_default","RadioGroup_default","aria-label","FormControlLabel_default","control","Radio_default","CreateQuiz","handleChangeBool","checked","gametype","gamemode","timescore","gamePass","createQuiz","max","apply","toConsumableArray","o","qs","e","indexOf","splice","_this$state3","password","tile","quiz","_this2","_this$state4","spacing","index_es","autoComplete","FormGroup_default","Switch_default","create_QuestionForm","create_Question","transitionDelay","CreateTetris","validateGame","createGame","minigame","CreateGolf","holes","opponentCollision","CreateSnake","racetarget","eatOpponents","wallCollision","CreateMinigame","setGameType","create_CreateSnake","create_CreateTetris","create_CreateGolf","Create","gameId","g","game","possible","charAt","random","generateGameId","created","Date","now","status","phase","that","gameRef","database","ref","set","error","errorText","localStorage","setItem","create_CreateQuiz","create_CreateMinigame","PhaseSetup","surveyPlayers","answerStreak","nameGenerator","remoteMode","useTeams","randomizeQuestionOrder","autoPlayQuestions","startGame","createTeamGame","createClassicGame","teamMode","currentQuestion","gameFunc","update","PhaseConnection","nextPhase","players","values","player","paragraph","CountdownAnimation","speed","viewBox","d","PureComponent","PhaseStarting","counter","startCounter","setInterval","clearInterval","components_common_CountdownAnimation","PhaseAwaitingQuestion","PhaseShowQuestion","phaseTime","setTimeout","answers","shuffle","array","temp","answerStyles","icon","Cake_default","color","ExtensionOutlined_default","FavoriteBorder_default","StarBorder_default","AnswerOption","design","answerQuestion","Paper_default","playAnswer","style","backgroundColor","paper","root","flexGrow","paddingTop","unit","paddingBottom","textAlign","palette","text","secondary","height","width","float","fontSize","marginLeft","fontWeight","Timer","startValue","currentCount","completed","CircularProgress_default","circle","colorSecondary","thickness","size","marginBottom","AnswerCounter","LinearProgress_default","bar","PhaseAnswer","started","isTimelimited","playerKeys","keys","answersCollected","answerCollectedPercentage","common_Timer","ceil","host_AnswerCounter","quiz_AnswerOption","colors","Podium","getChartData","getChartOptions","getChartHeight","chartData","labels","datasets","data","borderWidth","rawPlayerData","playerScoreData","score","j","sort","b","maxIndex","padding","maintainAspectRatio","showTooltips","responsiveAnimationDuration","animation","easing","duration","onProgress","animationObject","onAnimationProgress","chart","textBaseline","font","stepratio","currentStep","numSteps","meta","getDatasetMeta","hidden","forEach","element","dataString","toString","fillStyle","tooltipPosition","fillText","x","y","_model","scales","yAxes","ticks","beginAtZero","display","xAxes","legend","tooltips","enabled","events","layout","left","right","top","bottom","maxHeight","es","getWinnerString","PhaseFinalResult","quiz_Podium","restart","quit","alert","AnswerChart","getAnswerData","answerData","topPlayer","playerKey","playerAnswers","nrOfAnswers","borderColor","beginPath","rect","_view","fill","img","Image","src","PUBLIC_PATH","ypos","drawImage","Leaderboard","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","leaderboardData","getLeaderboardData","startScoreCounter","getScoreCellWidth","newLeaderBoard","done","currentQuestionScore","totalScore","leaderboard","playerList","questionId","lastScore","scoreWidth","Table_default","table","TableBody_default","slice","TableRow_default","TableCell_default","getLeaderboardScore","TablePagination_default","count","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","whiteSpace","PhaseResultQuestion","nextQuestion","finalizeQuiz","isLastQuestion","quiz_AnswerChart","quiz_Leaderboard","end","PhaseEnd","Quiz","host_PhaseSetup","host_PhaseConnection","host_PhaseStarting","host_PhaseAwaitingQuestion","host_PhaseShowQuestion","host_PhaseAnswer","host_PhaseResultQuestion","host_PhaseFinalResult","host_PhaseEnd","multiplayerMode","gridSize","isInvalidMove","keyPress","currentDirection","up","down","getInitialFoods","amount","initialFoods","active","getSnakesInStartingPosition","snakes","canvasSettings","len","snake","direction","actions","moves","pos","getRandomStartingPosLeft","getRandomStartingPosRight","getRandomStartingPosBottom","getRandomStartingPosTop","canvasWidth","snakesDown","filter","existingValues","Set","getRandomStartingPos","xMax","yMax","canvasHeight","round","some","v","getRandomCanvasPositionMargin","detectOpponentCollision","dead","currentSnake","opponentSnake","k","len2","detectSelfCollision","detectWallCollision","snakeHead","leftCollison","topCollison","rightCollison","bottomCollison","Snake","togglePausGame","isPaused","overlay","window","innerHeight","innerWidth","nrOfFoods","gameTicker","winners","minigameUtil","foods","settings","border","respawntime","food","background","drawSnakes","generateFood","generateSnakes","resetCanvas","drawFood","detectCollisions","initControllerListener","generateFoods","isEndGame","renderOverlay","app","document","querySelector","getContext","snakeRef","on","snapshot","nextSnake","val","move","console","log","_this$props$game$mini","alive","winner","reduce","prev","current","fillRect","nextSnakes","teleportSnakes","_loop","respawning","startPos","movement","nextMove","shift","coordinate","unshift","collidedFood","find","f","pop","globalCompositeOperation","strokestyle","bodyPos","strokeRect","_this$state5","_this$state6","globalAlpha","headX","headY","snakeName","namePosition","yPos","role","tabIndex","onKeyDown","Tetris","replayGame","chunkify","nr","n","out","SNAKE_COLORS","SNAKE_NAMES","SnakeStarting","snakeGenerator","classic","createSnakes","team","createTeamSnakes","coop","createCoopSnakes","actionChunks","snakeId","controlActions","Golf","GolfStarting","SnakeSetup","GolfSetup","Minigame","snake_SnakeSetup","minigame_host_PhaseConnection","snake_SnakeStarting","snake_Snake","minigame_host_PhaseFinalResult","minigame_host_PhaseEnd","minigame_host_PhaseSetup","minigame_host_PhaseStarting","tetris_Tetris","golf_GolfSetup","golf_GolfStarting","golf_Golf","Host","getItem","updateGame","fetchGame","initGameListiner","restartGame","quitGame","endGame","gameupdate","toggleHeader","orderByChild","equalTo","once","child","gameKey","_this$props2","gameFunctions","host_Quiz","host_Minigame","authId","playerCreated","createPlayer","generateName","addPlayer","generatePlayer","adjectives","nouns","finalName","currentNames","playerName","playersInLobby","selectedAnswer","hasAnswered","answerTime","startTime","undefined","timeFactorUsed","playerAnswer","saveAnswer","panel","getPlayerAnswerData","answerDataList","currentPlayer","time","playerData","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","PlayerQuestionResult","wrongAnswer","oldLeaderboardPosition","newLeaderboardPosition","opponent","currentQuestionId","lastPhase","play_PhaseConnection","play_PhaseStarting","updatePlayer","play_PhaseAwaitingQuestion","play_PhaseShowQuestion","play_PhaseAnswer","play_PhaseResultQuestion","play_PhaseFinalResult","SnakeController","handleAction","playerSnake","allControlActions","displayName","react","includes","ExpandLess_default","ChevronRight_default","ChevronLeft_default","opacity","TetrisController","GolfController","minigame_play_PhaseConnection","minigame_play_PhaseStarting","snake_SnakeController","minigame_play_PhaseFinalResult","tetris_TetrisController","golf_GolfController","Play","storedPlayerKey","playerRef","newPlayer","assign","play_Quiz","play_Minigame","Home","sm","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","green","dark","amber","iconVariant","marginRight","alignItems","onClose","other","objectWithoutProperties","Icon","SnackbarContent_default","aria-describedby","classNames","close","Close_default","CustomizedSnackbars","handleClose","reason","hideSnackbar","Snackbar_default","anchorOrigin","vertical","horizontal","open","autoHideDuration","React","App","showHeader","HashRouter","common_Header","Route","exact","path","render","pages_Play","pages_Host","pages_Create","pages_Home","common_CustomizedSnackbars","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bc35bf8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cyanColor\":\"#66b1bb\",\"redColor\":\"#EF9A9A\",\"purpleColor\":\"#CE93D8\",\"greenColor\":\"#9db484\"};","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\n//PROD\r\nvar prodConfig = {\r\n  apiKey: \"AIzaSyB8vYoKiw2DlJycM5bqKKaU4vK_0n7HcsU\",\r\n  authDomain: \"stagehoot.firebaseapp.com\",\r\n  databaseURL: \"https://stagehoot.firebaseio.com\",\r\n  projectId: \"stagehoot\",\r\n  storageBucket: \"stagehoot.appspot.com\",\r\n  messagingSenderId: \"589747985768\"\r\n};\r\n\r\n//DEV\r\n\r\nconst fire = firebase.initializeApp(prodConfig);\r\n\r\nexport { fire }","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { fire } from '../../base';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let titleText = 'Stagehoot';\r\n    if (fire.options.projectId === 'ettkilomjol-dev') {\r\n      titleText = 'Ett Kilo Mjöl DEV';\r\n    }\r\n\r\n    return (\r\n      <div id=\"header\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar className=\"toolbar\">\r\n            <div className=\"appbar-container--left\">\r\n              <Link className=\"appbar-title text-big\" to=\"/\">\r\n                {titleText}\r\n              </Link>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\n\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        maxWidth: 400,\r\n    },\r\n});\r\nclass Question extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    }\r\n\r\n    deleteQuestion() {\r\n        this.props.deleteQuestion(this.props.question);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <Card className={classes.card}>\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton onClick={this.deleteQuestion}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={this.props.question.question}\r\n                    subheader={this.props.question.timelimit ? this.props.question.timelimit + ' seconds' : 'default timelimit'}\r\n                />\r\n                <CardContent>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Correct answers</Typography>\r\n                    <List>\r\n                        {this.props.question.correctAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Wrong answers</Typography>\r\n                    <List>\r\n                        {this.props.question.wrongAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                </CardContent>\r\n\r\n\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Question);","function generateGameId() {\r\n  let id = '';\r\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n  for (let i = 0; i < 6; i++) {\r\n    id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n\r\n  return id;\r\n}\r\nfunction calculateDefaultTimeLimit(question) {\r\n  if (question.aType === 'multiple' || question.aType === 'boolean') {\r\n    return 10 + Math.floor((question.correctAnswers.join().length + question.wrongAnswers.join().length) / 30);\r\n  } if (question.aType === 'free') {\r\n    return 20;\r\n  } if (question.aType === 'player') {\r\n    // answer blir 4-8 random utvalda till varje fråga\r\n    return 20;\r\n  }\r\n  return 20;\r\n}\r\nfunction parseDOM(s) {\r\n  const parser = new DOMParser();\r\n  const dom = parser.parseFromString(\r\n    `<!doctype html><body>${s}`,\r\n    'text/html',\r\n  );\r\n  const decodedString = dom.body.textContent;\r\n  return decodedString;\r\n}\r\n\r\nfunction parseDOMArray(arr) {\r\n  const result = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    result.push(parseDOM(arr[i]));\r\n  }\r\n  return result;\r\n}\r\nexport {\r\n  generateGameId,\r\n  calculateDefaultTimeLimit,\r\n  parseDOMArray,\r\n  parseDOM,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\nimport * as minigameUtil from '../../common/utils/minigameUtil';\r\n\r\nlet ctx;\r\nlet canvas;\r\nconst gridSize = 20;\r\n\r\nclass Snake extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // för att göra det mer smooth. så behöver jag typ dela upp ätandet så att det sker i flera tick? för just nu är ett tick storleken på food och allt annat\r\n    // lite delay när jag ökar speeden. är det olika delay för olika snakes? optimera senare.\r\n    const canvasHeight = Math.floor(window.innerHeight / gridSize) * gridSize;\r\n    const canvasWidth = Math.floor(window.innerWidth / gridSize) * gridSize;\r\n    const nrOfFoods = props.game.minigame.snakes.length * 2;\r\n\r\n    this.state = {\r\n      gameTicker: null,\r\n      ticks: 0,\r\n      winners: [],\r\n      snakes: minigameUtil.getSnakesInStartingPosition(props.game.minigame.snakes, { height: canvasHeight, width: canvasWidth }),\r\n      foods: minigameUtil.getInitialFoods(nrOfFoods),\r\n      settings: {\r\n        snake: {\r\n          size: gridSize,\r\n          speed: props.game.minigame.difficulty,\r\n          border: '#000',\r\n          respawntime: 3,\r\n        },\r\n        food: {\r\n          background: '#EC5E0B',\r\n          border: '#73AA24',\r\n        },\r\n        canvas: {\r\n          height: canvasHeight,\r\n          width: canvasWidth,\r\n          background: '#F5F5F5',\r\n          border: '#000',\r\n        },\r\n      },\r\n    };\r\n\r\n    this.drawSnakes = this.drawSnakes.bind(this);\r\n    this.generateFood = this.generateFood.bind(this);\r\n    this.generateSnakes = this.generateSnakes.bind(this);\r\n    this.resetCanvas = this.resetCanvas.bind(this);\r\n    this.drawFood = this.drawFood.bind(this);\r\n    this.detectCollisions = this.detectCollisions.bind(this);\r\n    this.initControllerListener = this.initControllerListener.bind(this);\r\n    this.generateFoods = this.generateFoods.bind(this);\r\n    this.isEndGame = this.isEndGame.bind(this);\r\n    this.togglePausGame = this.togglePausGame.bind(this);\r\n    this.renderOverlay = this.renderOverlay.bind(this);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const {\r\n      snakes, settings,\r\n    } = this.state;\r\n    const app = document.querySelector('#snakeboard');\r\n\r\n    canvas = app.querySelector('canvas');\r\n    ctx = canvas.getContext('2d');\r\n    this.resetCanvas();\r\n    this.generateSnakes();\r\n    this.generateFoods();\r\n    const that = this;\r\n    const gameTicker = setInterval(() => {\r\n      if (that.state.isPaused) {\r\n        if (that.state.overlay) {\r\n          return;\r\n        }\r\n        that.renderOverlay();\r\n        return;\r\n      }\r\n      if (that.state.winners.length === 0) {\r\n        that.resetCanvas();\r\n        that.generateSnakes();\r\n        that.generateFoods();\r\n        that.detectCollisions();\r\n        that.isEndGame();\r\n      } else {\r\n        that.nextPhase();\r\n      }\r\n    }, settings.snake.speed);\r\n\r\n    this.setState({ gameTicker });\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      this.initControllerListener(snake);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    // kan jag ha det här?\r\n\r\n    return false;\r\n  }\r\n\r\n  togglePausGame = () => {\r\n    // async!!\r\n    this.setState(state => ({\r\n      isPaused: !state.isPaused,\r\n      overlay: false,\r\n    }));\r\n  }\r\n\r\n  nextPhase() {\r\n    const {\r\n      gameTicker, snakes, winners, ticks,\r\n    } = this.state;\r\n    const { game, gameFunc } = this.props;\r\n    clearInterval(gameTicker);\r\n    game.minigame.snakes = snakes;\r\n    game.minigame.winners = winners;\r\n    game.minigame.ticks = ticks;\r\n    game.phase = 'final_result';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  initControllerListener(snake) {\r\n    const { game } = this.props;\r\n    const snakeRef = fire.database().ref(`/games/${game.key}/minigame/snakes/${snake.id}`);\r\n    const that = this;\r\n    snakeRef.on('value', (snapshot) => {\r\n      const nextSnake = snapshot.val();\r\n      if (nextSnake && !that.state.isPaused) {\r\n        that.setState((state) => {\r\n          const snakes = [...state.snakes];\r\n          // kolla så att detta är okej sätt, blir snakes index alltid rätt kopplat till snake.id? ska jag fixa ett riktigt ID för att vara säker? alltså ett pushid\r\n          if (nextSnake.move) {\r\n            snakes[snake.id].moves.push(nextSnake.move);\r\n          }\r\n          return {\r\n            snakes,\r\n          };\r\n        });\r\n      } else {\r\n        console.log('move error');\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  isEndGame() {\r\n    const { snakes } = this.state;\r\n    const { game: { minigame: { gamemode, racetarget } } } = this.props;\r\n\r\n    // if survavalmode continue game if more than 1 snake is alive\r\n    // kolla performance på denna filter funktion jämfört med loopen under\r\n    if (gamemode === 'survival' && snakes.filter(s => !s.dead).length > 1) {\r\n      return;\r\n      /*\r\n      const l = snakes.length;\r\n      let alive = 0;\r\n      for (let i = 0; i < l; i++) {\r\n        if (!snakes[i].dead) {\r\n          alive += 1;\r\n        }\r\n        if (alive > 1) {\r\n          return;\r\n        }\r\n      }\r\n      */\r\n    }\r\n    // if race continue game if no one has reached racetarget\r\n    if (gamemode === 'race' && !snakes.some(s => s.body.length >= racetarget)) {\r\n      return;\r\n    }\r\n\r\n    // its gameover, lets find the winner/winners\r\n    let winners = [];\r\n    if (gamemode === 'survival') {\r\n      const alive = snakes.filter(s => !s.dead);\r\n      if (alive.length === 1) {\r\n        winners = alive;\r\n      } else {\r\n        const winner = snakes.reduce((prev, current) => ((prev.score > current.score) ? prev : current));\r\n        winners.push(winner);\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      winners = snakes.filter(s => s.body.length >= racetarget);\r\n    }\r\n    this.setState(() => ({\r\n      winners,\r\n      isPaused: true,\r\n      overlay: false,\r\n    }));\r\n\r\n    /*\r\n\r\n    if (gamemode === 'survival') {\r\n      if (snakes.length === 1 && snakes[0].dead) {\r\n        winners.push(snakes[0]);\r\n      } else {\r\n        for (let i = 0; i < l; i++) {\r\n          if (!snakes[i].dead) {\r\n            winners.push(snakes[i]);\r\n          }\r\n          // should not be possible as she check for this first thing in this function\r\n          // if (winners.length > 1) {\r\n          //  return;\r\n          // }\r\n        }\r\n        // om det inte finns någon levande alla så betyder det att de sista tog samtidigt. då vinner den som är längst av alla\r\n        if (winners.length === 0) {\r\n          let winnerIndex = 0;\r\n          let highestScore = 0;\r\n          for (let i = 0; i < l; i++) {\r\n            if (snakes[i].score > highestScore) {\r\n              winnerIndex = i;\r\n              highestScore = snakes[i].score;\r\n            }\r\n          }\r\n          winners.push(snakes[winnerIndex]);\r\n        }\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      for (let i = 0; i < l; i++) {\r\n        if (snakes[i].body.length >= racetarget) {\r\n          winners.push(snakes[i]);\r\n        }\r\n      }\r\n    }\r\n    if (winners.length > 0) {\r\n      this.setState(() => ({\r\n        winners,\r\n        isPaused: true,\r\n        overlay: false,\r\n      }));\r\n    }\r\n    */\r\n  }\r\n\r\n  resetCanvas() {\r\n    const { settings } = this.state;\r\n    canvas.width = settings.canvas.width;\r\n    canvas.height = settings.canvas.height;\r\n\r\n    ctx.fillStyle = settings.canvas.background;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  generateSnakes() {\r\n    // i alla såna här dpelarspecifika metoder måste jag ta in vilken snake/player det gäller\r\n    const { snakes, foods, settings } = this.state;\r\n    const { game } = this.props;\r\n    const nextSnakes = [];\r\n    const teleportSnakes = !game.minigame.wallCollision;\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      // behöver jag göra en copy? spelar det någon roll?\r\n      const snake = snakes[i];\r\n      if (snake.respawning) {\r\n        if (Date.now() > snake.respawntime) {\r\n          snake.dead = false;\r\n          snake.respawning = false;\r\n        }\r\n        nextSnakes.push(snake);\r\n        continue;\r\n      } else if (snake.dead) {\r\n        if (game.minigame.gamemode === 'survival') {\r\n          snake.body = [];\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        } else if (game.minigame.gamemode === 'race') {\r\n          const xMax = settings.canvas.width - gridSize;\r\n          const yMax = settings.canvas.height - gridSize;\r\n          const startPos = minigameUtil.getRandomCanvasPositionMargin(yMax, xMax);\r\n          snake.body = [{\r\n            x: startPos.x,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - gridSize,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 2),\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 3),\r\n            y: startPos.y,\r\n          }];\r\n          snake.direction = 'right';\r\n          snake.respawning = true;\r\n          snake.respawntime = Date.now() + (settings.snake.respawntime * 1000);\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        }\r\n      }\r\n      // testa denna perfomance mot tidigare switch. ngåon skillnad? kan tänka mig att denna är lite långsammare då jag måste definera alla 4directions varje gång\r\n      const movement = {\r\n        up: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y === 0) ? canvas.height - gridSize : snake.body[0].y - gridSize,\r\n        },\r\n        down: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y >= canvas.height - gridSize) ? 0 : snake.body[0].y + gridSize,\r\n        },\r\n        right: {\r\n          x: teleportSnakes && (snake.body[0].x >= canvas.width - gridSize) ? 0 : snake.body[0].x + gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n        left: {\r\n          x: teleportSnakes && (snake.body[0].x === 0) ? canvas.width - gridSize : snake.body[0].x - gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n      };\r\n      const nextMove = snake.moves.shift();\r\n      if (!minigameUtil.isInvalidMove(nextMove, snake.direction)) {\r\n        snake.direction = nextMove;\r\n      }\r\n\r\n      // The snake moves by adding a piece to the beginning \"this.snake.unshift(coordinate)\" and removing the last piece \"this.snake.pop()\"\r\n      // Except when it eats the food in which case there is no need to remove a piece and the added piece will make it grow\r\n      const coordinate = movement[snake.direction];\r\n      snake.body.unshift(coordinate);\r\n\r\n      const collidedFood = foods.find(f => f.active && snake.body[0].x === f.x && snake.body[0].y === f.y);\r\n\r\n      if (collidedFood) {\r\n        snake.score += 10;\r\n        collidedFood.active = false;\r\n      } else {\r\n        snake.body.pop();\r\n      }\r\n      nextSnakes.push(snake);\r\n    }\r\n    this.setState(state => ({\r\n      snakes: nextSnakes,\r\n      foods,\r\n      ticks: state.ticks + 1,\r\n    }));\r\n    // kan det inte blir problem här? litar jag på att state.snakes hunnit updateras innan de ritas ut? ska jag inte skicka in det? drawSnakes(nextSNakes)\r\n    // och sen updaterar jag state efteråt?\r\n    this.drawSnakes(nextSnakes);\r\n  }\r\n\r\n  drawSnakes(nextSnakes) {\r\n    const { settings, ticks } = this.state;\r\n    ctx.globalCompositeOperation = 'multiply';\r\n    ctx.strokestyle = settings.snake.border;\r\n    for (let i = 0, len = nextSnakes.length; i < len; i++) {\r\n      const snake = nextSnakes[i];\r\n      if (snake.respawning && ticks % 2 === 0) {\r\n        ctx.fillStyle = settings.canvas.background;\r\n      } else {\r\n        ctx.fillStyle = snake.color;\r\n      }\r\n      // Draw each piece\r\n\r\n      // om två snakes är över varandra så finns en schysst style för det som han gick igenom på öredev. där färgerna från båda kan blandas till en ljusare eller mörkar.\r\n      for (let j = 0, len2 = snake.body.length; j < len2; j++) {\r\n        const bodyPos = snake.body[j];\r\n        ctx.fillRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n        ctx.strokeRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n      }\r\n\r\n\r\n      // this.game.direction = this.game.nextDirection;\r\n    }\r\n    /*\r\n        jag kör rakt av på direction, verkar fungera och snabbare response då? om jag vill ha tillbaka nextdirection så ta fram denna metod och sätt i snakeListenern att den ska sätta nextDirection\r\n        this.setState(function (state, props) {\r\n            let snakes = state.snakes;\r\n            for (let i = 0; i < snakes.length; i++) {\r\n                snakes[i].direction = snakes[i].nextDirection;\r\n            }\r\n            return {\r\n                snakes: snakes,\r\n            };\r\n        });\r\n        */\r\n  }\r\n\r\n  generateFoods() {\r\n    const { foods } = this.state;\r\n    // fungerar detta? const och ingen kopia? blir det updaterat? risk att allt blir object istället för arrays? cost [foods] = this.state?\r\n    // const nextFoods = [...foods ];\r\n    for (let i = 0, len = foods.length; i < len; i++) {\r\n      let food = foods[i];\r\n      if (!food.active) {\r\n        food = this.generateFood();\r\n      }\r\n      this.drawFood(food);\r\n      foods[i] = food;\r\n    }\r\n    this.setState(() => ({\r\n      foods,\r\n    }));\r\n  }\r\n\r\n  generateFood() {\r\n    const { snakes, settings } = this.state;\r\n\r\n    const xMax = settings.canvas.width - gridSize;\r\n    const yMax = settings.canvas.height - gridSize;\r\n\r\n    const x = Math.round((Math.random() * xMax) / gridSize) * gridSize;\r\n    const y = Math.round((Math.random() * yMax) / gridSize) * gridSize;\r\n    /*\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      const collision = snake.body.some(b => b.x === x && b.y === y);\r\n      if (collision) {\r\n        return this.generateFood();\r\n      }\r\n    }\r\n    */\r\n    // fungerar denna tro?\r\n    const collision = snakes.some(s => s.body.some(b => b.x === x && b.y === y));\r\n    if (collision) {\r\n      return this.generateFood();\r\n    }\r\n    return {\r\n      active: true,\r\n      x,\r\n      y,\r\n    };\r\n  }\r\n\r\n  drawFood(food) {\r\n    const { settings } = this.state;\r\n    // denna metod kallas lite väl många gånger?? ioptimera?\r\n    ctx.fillStyle = settings.food.background;\r\n    ctx.strokestyle = settings.food.border;\r\n\r\n    ctx.fillRect(food.x, food.y, gridSize, gridSize);\r\n    ctx.strokeRect(food.x, food.y, gridSize, gridSize);\r\n  }\r\n\r\n  detectCollisions() {\r\n    // bryt ut de olika detectcollision till purecfunctions? optiering viktigt\r\n    // ha olika modes för krock med motståndare\r\n    // 2. krock med motståndare så händer inget\r\n    // 3. krock med motståndare så äts motståndaren upp (head-on-head så dör båda)\r\n    // 4. korck med motståndare så dör man\r\n    // modes krock med vägg:\r\n    // 1. man dör\r\n    // 2. man kommer ut på andra sidan\r\n    // vad händer om man får en selfcollision sammtidigt som någon får en opponentcollision i den?\r\n    // mode dö:\r\n    // när man dör så får man återställs man till liten mask\r\n    // när man dör så är man död för alltid\r\n\r\n    // Self collison\r\n    // It's impossible for the first 3 pieces of the snake to self collide so the loop starts at 4\r\n\r\n    // fixa en bättre metod för alla snakes senare\r\n\r\n    // fundra och test som det här är den mest effektiva lösningen? eller om jag gör några checks i onödan?\r\n    // jag vill nog bara göra en gemensam setState call efter den här loopen. så alla ändringar för t.ex. handleDeath\r\n    let { snakes } = this.state;\r\n    const { game: { minigame } } = this.props;\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      if (snakes[i].dead) {\r\n        continue;\r\n      }\r\n      if (minigameUtil.detectSelfCollision(snakes[i])) {\r\n        // vilken av dessa fungerar?\r\n        snakes[i].dead = true;\r\n        // snakes[i].dead = true;\r\n\r\n        // this.handleDeath(snake);\r\n      }\r\n      if (minigame.wallCollision && minigameUtil.detectWallCollision(snakes[i].body[0], canvas.height, canvas.width)) {\r\n        snakes[i].dead = true;\r\n      }\r\n    }\r\n\r\n    if (minigame.opponentCollision) {\r\n      // här inne så ändrar jag om i snakes genom att döda dem som ska dödas och klyver om det ska klyvas osv. det som returneras ska vara korrekta snakes\r\n      snakes = minigameUtil.detectOpponentCollision(snakes, minigame.eatOpponents);\r\n    }\r\n    this.setState(() => ({\r\n      snakes,\r\n    }));\r\n  }\r\n\r\n  renderOverlay() {\r\n    const { ticks, snakes, winners } = this.state;\r\n    const { game } = this.props;\r\n    this.setState(() => ({\r\n      overlay: true,\r\n    }));\r\n    ctx.globalAlpha = 0.4;\r\n    ctx.textAlign = 'center';\r\n    ctx.font = '100px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    if (ticks === 1) {\r\n      ctx.fillText('Click to start', canvas.width / 2, canvas.height / 2);\r\n    } else if (winners.length > 0) {\r\n      ctx.fillText('Game over', canvas.width / 2, canvas.height / 2);\r\n    } else {\r\n      ctx.fillText('Paused', canvas.width / 2, canvas.height / 2);\r\n    }\r\n    ctx.globalAlpha = 1;\r\n    ctx.font = '20px roboto';\r\n\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const snake = snakes[i];\r\n      if (!snake.body[0]) {\r\n        continue;\r\n      }\r\n      let headX = Math.max(gridSize, snake.body[0].x);\r\n      let headY = Math.max(gridSize, snake.body[0].y);\r\n      if (headX >= canvas.width) {\r\n        headX = canvas.width - (gridSize * 2);\r\n      }\r\n      if (headY >= canvas.height) {\r\n        headY = canvas.height - (gridSize * 2);\r\n      }\r\n      const snakeName = snake.playerKeys.length === 1 ? game.players[snake.playerKeys[0]].name : snake.name;\r\n      ctx.fillStyle = snake.color;\r\n\r\n      const namePosition = {\r\n        right: { textAlign: 'center', yPos: headY - (gridSize / 5) },\r\n        left: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        up: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        down: { textAlign: 'start', yPos: headY + (gridSize * 2) },\r\n      };\r\n      ctx.textAlign = namePosition[snake.direction].textAlign;\r\n      ctx.fillText(snakeName, headX, namePosition[snake.direction].yPos);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\" id=\"snakeboard\" role=\"button\" tabIndex={0} onClick={this.togglePausGame} onKeyDown={this.togglePausGame}>\r\n        <canvas />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnake.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default Snake;\r\n","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport PropTypes from 'prop-types';\r\nimport { parseDOM, parseDOMArray } from '../../common/utils/appUtil';\r\n\r\n\r\nclass GenerateQuizForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nrOfQuestions: '10',\r\n      category: '0',\r\n      difficulty: '0',\r\n      aType: '0',\r\n\r\n    };\r\n    this.generateQuestions = this.generateQuestions.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  generateQuestions() {\r\n    const {\r\n      nrOfQuestions, category, difficulty, aType,\r\n    } = this.state;\r\n    const { addQuestions, showSnackbar } = this.props;\r\n    let url = 'https://opentdb.com/api.php?';\r\n    if (nrOfQuestions !== '0') {\r\n      url += `amount=${nrOfQuestions}`;\r\n    }\r\n    if (category !== '0') {\r\n      url += `&category=${category}`;\r\n    }\r\n    if (difficulty !== '0') {\r\n      url += `&difficulty=${difficulty}`;\r\n    }\r\n    if (aType !== '0') {\r\n      url += `&type=${aType}`;\r\n    }\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then((generated) => {\r\n        if (generated.response_code === 0) {\r\n          const questions = [];\r\n          for (let i = 0; i < generated.results.length; i++) {\r\n            const generatedQuestion = generated.results[i];\r\n            const question = {\r\n              question: parseDOM(generatedQuestion.question),\r\n              correctAnswers: [parseDOM(generatedQuestion.correct_answer)],\r\n              wrongAnswers: parseDOMArray(generatedQuestion.incorrect_answers),\r\n              qType: 'text',\r\n              aType: generatedQuestion.type,\r\n              category: generatedQuestion.category,\r\n              difficulty: generatedQuestion.difficulty,\r\n            };\r\n            questions.push(question);\r\n          }\r\n          addQuestions(questions);\r\n        } else {\r\n          const snack = {\r\n            variant: 'error',\r\n            message: `Could not generate questions( code: ${generated.response_code})`,\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      nrOfQuestions, category, difficulty, aType,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                label=\"Number of questions\"\r\n                name=\"nrOfQuestions\"\r\n                value={nrOfQuestions}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('nrOfQuestions')}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"category\">Category</InputLabel>\r\n              <Select\r\n                value={category || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"category\"\r\n                inputProps={{\r\n                  id: 'category',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any category</MenuItem>\r\n                <MenuItem value=\"9\">General Knowledge</MenuItem>\r\n                <MenuItem value=\"10\">Entertainment: Books</MenuItem>\r\n                <MenuItem value=\"11\">Entertainment: Film</MenuItem>\r\n                <MenuItem value=\"12\">Entertainment: Music</MenuItem>\r\n                <MenuItem value=\"13\">Entertainment: Musicals and Theatres</MenuItem>\r\n                <MenuItem value=\"14\">Entertainment: Television</MenuItem>\r\n                <MenuItem value=\"15\">Entertainment: Video Games</MenuItem>\r\n                <MenuItem value=\"16\">Entertainment: Board Games</MenuItem>\r\n                <MenuItem value=\"17\">Science and Nature</MenuItem>\r\n                <MenuItem value=\"18\">Science: Computers</MenuItem>\r\n                <MenuItem value=\"19\">Science: Mathematics</MenuItem>\r\n                <MenuItem value=\"20\">Mythology</MenuItem>\r\n                <MenuItem value=\"21\">Sports</MenuItem>\r\n                <MenuItem value=\"22\">Geography</MenuItem>\r\n                <MenuItem value=\"23\">History</MenuItem>\r\n                <MenuItem value=\"24\">Politics</MenuItem>\r\n                <MenuItem value=\"25\">Art</MenuItem>\r\n                <MenuItem value=\"26\">Celebrities</MenuItem>\r\n                <MenuItem value=\"27\">Animals</MenuItem>\r\n                <MenuItem value=\"28\">Vehicles</MenuItem>\r\n                <MenuItem value=\"29\">Entertainment: Comics</MenuItem>\r\n                <MenuItem value=\"30\">Science: Gadgets</MenuItem>\r\n                <MenuItem value=\"31\">Entertainment: Japanese Anime and Manga</MenuItem>\r\n                <MenuItem value=\"32\">Entertainment: Cartoon and Animations</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"difficulty\">Difficulty</InputLabel>\r\n              <Select\r\n                value={difficulty || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"difficulty\"\r\n                inputProps={{\r\n                  id: 'difficulty',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any difficulty</MenuItem>\r\n                <MenuItem value=\"easy\">Easy</MenuItem>\r\n                <MenuItem value=\"medium\">Medium</MenuItem>\r\n                <MenuItem value=\"hard\">Hard</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"aType\">Answer type</InputLabel>\r\n              <Select\r\n                value={aType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"aType\"\r\n                inputProps={{\r\n                  id: 'aType',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any type</MenuItem>\r\n                <MenuItem value=\"multiple\">Multiple choice</MenuItem>\r\n                <MenuItem value=\"boolean\">True/False</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n\r\n            <Button onClick={this.generateQuestions} variant=\"contained\">Generate</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGenerateQuizForm.propTypes = {\r\n  addQuestions: PropTypes.func.isRequired,\r\n  showSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default GenerateQuizForm;\r\n","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport PropTypes from 'prop-types';\r\nimport GenerateQuizForm from './GenerateQuizForm';\r\n\r\nclass QuestionForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: '',\r\n      correctAnswer: '',\r\n      wrongAnswerOne: '',\r\n      wrongAnswerTwo: '',\r\n      wrongAnswerThree: '',\r\n      timelimit: '10',\r\n      qType: 'text',\r\n      aType: 'multiple',\r\n      generateQuestions: true,\r\n\r\n    };\r\n    this.sendQuestion = this.sendQuestion.bind(this);\r\n    this.toggleGenerateQuestion = this.toggleGenerateQuestion.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleTrueFalse = (event) => {\r\n    const answer = event.target.value;\r\n    this.setState({\r\n      correctAnswer: answer,\r\n      wrongAnswerOne: answer === 'true' ? 'false' : 'true',\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  sendQuestion() {\r\n    const {\r\n      question, correctAnswer, wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree, timelimit, qType, aType,\r\n    } = this.state;\r\n    const { addQuestion } = this.props;\r\n    const q = {\r\n      question,\r\n      correctAnswers: [correctAnswer],\r\n      wrongAnswers: [wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree],\r\n      timelimit,\r\n      qType,\r\n      aType,\r\n    };\r\n    this.setState({\r\n      question: '',\r\n      correctAnswer: '',\r\n      wrongAnswerOne: '',\r\n      wrongAnswerTwo: '',\r\n      wrongAnswerThree: '',\r\n    });\r\n    addQuestion(q);\r\n  }\r\n\r\n  toggleGenerateQuestion() {\r\n    const { generateQuestions } = this.state;\r\n    this.setState({\r\n      generateQuestions: !generateQuestions,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      question, correctAnswer, wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree, timelimit, qType, aType, generateQuestions,\r\n    } = this.state;\r\n    const { addQuestions, showSnackbar, isTimelimit } = this.props;\r\n    if (generateQuestions) {\r\n      return (\r\n        <div>\r\n          <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Custom questions</Button>\r\n          <Button onClick={this.toggleGenerateQuestion} disabled variant=\"contained\">Auto generate questions</Button>\r\n          <GenerateQuizForm addQuestions={addQuestions} showSnackbar={showSnackbar} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Button onClick={this.toggleGenerateQuestion} disabled variant=\"contained\">Custom questions</Button>\r\n            <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Auto generate questions</Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <FormControl required fullWidth>\r\n              <InputLabel htmlFor=\"qtype-required\">Question type</InputLabel>\r\n              <Select\r\n                value={qType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"qType\"\r\n                inputProps={{\r\n                  id: 'qtype-required',\r\n                }}\r\n              >\r\n                <MenuItem value=\"text\">Text</MenuItem>\r\n                <MenuItem value=\"image\">Image</MenuItem>\r\n                <MenuItem value=\"video\">Video</MenuItem>\r\n\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <FormControl required fullWidth>\r\n              <InputLabel htmlFor=\"aType-required\">Answer type</InputLabel>\r\n              <Select\r\n                value={aType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"aType\"\r\n                inputProps={{\r\n                  id: 'aType-required',\r\n                }}\r\n              >\r\n                <MenuItem value=\"boolean\">True/false</MenuItem>\r\n                <MenuItem value=\"player\">Player</MenuItem>\r\n                <MenuItem value=\"multiple\">Mulitichoice</MenuItem>\r\n                <MenuItem value=\"free\">Free text</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                label=\"Question\"\r\n                name=\"question\"\r\n                value={question}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('question')}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          {aType === 'multiple'\r\n                        && (\r\n                        <Grid container>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Correct answer\"\r\n                                name=\"correctAnswer\"\r\n                                margin=\"normal\"\r\n                                value={correctAnswer}\r\n                                onChange={this.handleChange('correctAnswer')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerOne\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerOne}\r\n                                onChange={this.handleChange('wrongAnswerOne')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerTwo\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerTwo}\r\n                                onChange={this.handleChange('wrongAnswerTwo')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerThree\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerThree}\r\n                                onChange={this.handleChange('wrongAnswerThree')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </Grid>\r\n                        )\r\n                    }\r\n          {aType === 'boolean'\r\n                        && (\r\n                        <div>\r\n                          <Grid item xs={12}>\r\n\r\n                            <FormControl component=\"fieldset\">\r\n                              <FormLabel component=\"legend\">Answer</FormLabel>\r\n                              <RadioGroup\r\n                                aria-label=\"answer\"\r\n                                name=\"correctAnswer\"\r\n                                value={correctAnswer}\r\n                                onChange={this.handleTrueFalse}\r\n                              >\r\n                                <FormControlLabel value=\"true\" control={<Radio />} label=\"True\" />\r\n                                <FormControlLabel value=\"false\" control={<Radio />} label=\"False\" />\r\n                              </RadioGroup>\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </div>\r\n                        )\r\n                    }\r\n          {isTimelimit\r\n                        && (\r\n                        <Grid item xs={12}>\r\n\r\n                          <FormControl>\r\n                            <TextField\r\n                              label=\"Time limit\"\r\n                              name=\"timelimit\"\r\n                              type=\"number\"\r\n                              value={timelimit}\r\n                              margin=\"normal\"\r\n                              onChange={this.handleChange('timelimit')}\r\n                            />\r\n                          </FormControl>\r\n                        </Grid>\r\n                        )\r\n                    }\r\n          <Grid item xs={12}>\r\n            <Button onClick={this.sendQuestion} variant=\"contained\">Add question</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nQuestionForm.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  addQuestion: PropTypes.func.isRequired,\r\n  addQuestions: PropTypes.func.isRequired,\r\n  isTimelimit: PropTypes.bool.isRequired,\r\n};\r\nexport default QuestionForm;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Typography } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport PropTypes from 'prop-types';\r\nimport Question from './Question';\r\nimport QuestionForm from './QuestionForm';\r\nimport { calculateDefaultTimeLimit } from '../../common/utils/appUtil';\r\n\r\n\r\nclass CreateQuiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'quiz',\r\n      gamemode: 'normal',\r\n      timelimit: true,\r\n      timescore: false,\r\n      questions: [],\r\n      gamePass: '',\r\n    };\r\n    this.addQuestion = this.addQuestion.bind(this);\r\n    this.addQuestions = this.addQuestions.bind(this);\r\n    this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    this.createQuiz = this.createQuiz.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    addQuestion(q) {\r\n      const { questions, timelimit } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      const question = q;\r\n      if (questions.length === 0) {\r\n        question.id = 1;\r\n      } else {\r\n        // räknar ut ett id som det nuvarande högsta id+1. Kan då använda id både som unik identifierare och som index\r\n        question.id = Math.max(...questions.map(o => o.id)) + 1;\r\n      }\r\n      if (timelimit && !question.timelimit) {\r\n        question.timelimit = calculateDefaultTimeLimit(question);\r\n      }\r\n      questions.push(question);\r\n      this.setState({\r\n        questions,\r\n      });\r\n      const snack = {\r\n        variant: 'success',\r\n        message: 'Added question',\r\n      };\r\n      showSnackbar(snack);\r\n    }\r\n\r\n    addQuestions(qs) {\r\n      const { questions, timelimit } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      for (let i = 0; i < qs.length; i++) {\r\n        const question = qs[i];\r\n        if (questions.length === 0) {\r\n          question.id = 1;\r\n        } else {\r\n          question.id = Math.max(...questions.map(o => o.id)) + 1;\r\n        }\r\n        if (timelimit && !question.timelimit) {\r\n          question.timelimit = calculateDefaultTimeLimit(question);\r\n        }\r\n        questions.push(question);\r\n      }\r\n      this.setState({\r\n        questions,\r\n      });\r\n      const snack = {\r\n        variant: 'success',\r\n        message: 'Added questions',\r\n      };\r\n      showSnackbar(snack);\r\n    }\r\n\r\n    deleteQuestion(question) {\r\n      const { questions } = this.state;\r\n      const index = questions.map(e => e.id).indexOf(question.id);\r\n      questions.splice(index, 1);\r\n      this.setState({\r\n        questions,\r\n      });\r\n    }\r\n\r\n    createQuiz() {\r\n      const { createQuiz } = this.props;\r\n      const {\r\n        timelimit, gamePass, gametype, title, timescore, questions,\r\n      } = this.state;\r\n      const game = {\r\n        password: gamePass,\r\n        gametype,\r\n        tile: title,\r\n        quiz: {\r\n          gamemode: 'normal',\r\n          timelimit,\r\n          timescore,\r\n          questions,\r\n        },\r\n      };\r\n      createQuiz(game);\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        timelimit, gamePass, title, timescore, gamemode, questions,\r\n      } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={8}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h4\">New quiz</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <form autoComplete=\"off\">\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl required fullWidth>\r\n                    <InputLabel htmlFor=\"gametype-required\">Gamemode</InputLabel>\r\n                    <Select\r\n                      value={gamemode || ''}\r\n                      onChange={this.handleChangeSelect}\r\n                      name=\"gamemode\"\r\n                      inputProps={{\r\n                        id: 'gamemode-required',\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"normal\">Normal</MenuItem>\r\n                      <MenuItem value=\"wild\">Wild</MenuItem>\r\n\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Game options</FormLabel>\r\n                    <FormGroup>\r\n                      <FormControlLabel\r\n                        control={(\r\n                          <Switch\r\n                            checked={timelimit}\r\n                            onChange={this.handleChangeBool('timelimit')}\r\n                            value=\"timelimit\"\r\n                          />\r\n)}\r\n                        label=\"Time limited questions\"\r\n                      />\r\n                      <FormControlLabel\r\n                        control={(\r\n                          <Switch\r\n                            checked={timescore}\r\n                            onChange={this.handleChangeBool('timescore')}\r\n                            value=\"timescore\"\r\n                          />\r\n)}\r\n                        label=\"Time based score\"\r\n                      />\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl>\r\n                    <TextField\r\n                      label=\"Title\"\r\n                      name=\"title\"\r\n                      value={title}\r\n                      margin=\"normal\"\r\n                      onChange={this.handleChange('title')}\r\n                    />\r\n                  </FormControl>\r\n                  <FormControl>\r\n                    <TextField\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      name=\"gamePass\"\r\n                      margin=\"normal\"\r\n                      value={gamePass}\r\n                      onChange={this.handleChange('gamePass')}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Button onClick={this.createQuiz} variant=\"contained\">Create quiz</Button>\r\n                </Grid>\r\n              </form>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <QuestionForm addQuestions={this.addQuestions} addQuestion={this.addQuestion} isTimelimit={!!timelimit} showSnackbar={showSnackbar} />\r\n            </Grid>\r\n            <Grid container>\r\n              {questions.map((question, index) => (\r\n                <Grid item xs={12} md={6} key={question.id}>\r\n                  <Question question={question} transitionDelay={index} deleteQuestion={this.deleteQuestion} />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateQuiz.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  createQuiz: PropTypes.func.isRequired,\r\n};\r\nexport default CreateQuiz;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nclass CreateTetris extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'tetris',\r\n      gamemode: 'survival',\r\n      password: '',\r\n    };\r\n\r\n    this.validateGame = this.validateGame.bind(this);\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        password, title, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={8}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={4}>\r\n                <FormControl required>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"survival\">Survival</MenuItem>\r\n                    <MenuItem value=\"race\">Race</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateTetris.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateTetris;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass CreateGolf extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'golf',\r\n      holes: 18,\r\n      opponentCollision: false,\r\n      password: '',\r\n      gamemode: 'classic',\r\n      difficulty: '300',\r\n    };\r\n\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode, holes,\r\n        opponentCollision, difficulty,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n        opponentCollision,\r\n        holes,\r\n        difficulty,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    /*\r\n    validateGame(game) {\r\n      // validera lösenord är tillräckligt starkt här\r\n      //eller direkt efter input om det finns någon smart lösning.\r\n      // kolla på gametype hur ha en secifik validering för varje type\r\n      return true;\r\n    }\r\n\r\n    clearForm() {\r\n\r\n    }\r\n*/\r\n    render() {\r\n      const {\r\n        password, title, gamemode,\r\n        opponentCollision, holes, difficulty,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={24}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\">New Golf game</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"classic\">Classic</MenuItem>\r\n                    <MenuItem value=\"wild\">Wild</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                  <Select\r\n                    value={difficulty || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"difficulty\"\r\n                    inputProps={{\r\n                      id: 'difficulty-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"500\">Easy</MenuItem>\r\n                    <MenuItem value=\"300\">Medium</MenuItem>\r\n                    <MenuItem value=\"100\">Hard</MenuItem>\r\n                    <MenuItem value=\"75\">Pro</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                {gamemode === 'classic'\r\n                                && (\r\n                                <FormControl>\r\n                                  <TextField\r\n                                    label=\"Holes to play\"\r\n                                    name=\"holes\"\r\n                                    type=\"number\"\r\n                                    value={holes}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('holes')}\r\n                                  />\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision}\r\n                        onChange={this.handleChangeBool('opponentCollision')}\r\n                        value=\"opponentCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Opponent collisions\"\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateGolf.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateGolf;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass CreateSnake extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'snake',\r\n      gamemode: 'survival',\r\n      racetarget: 20,\r\n      opponentCollision: false,\r\n      eatOpponents: false,\r\n      wallCollision: true,\r\n      password: '',\r\n      difficulty: '300',\r\n    };\r\n\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n        wallCollision,\r\n        eatOpponents,\r\n        opponentCollision,\r\n        racetarget,\r\n        difficulty,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    /*\r\n    validateGame(game) {\r\n      // validera lösenord är tillräckligt starkt här\r\n      //eller direkt efter input om det finns någon smart lösning.\r\n      // kolla på gametype hur ha en secifik validering för varje type\r\n      return true;\r\n    }\r\n\r\n    clearForm() {\r\n\r\n    }\r\n*/\r\n    render() {\r\n      const {\r\n        password, title, gamemode, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={24}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\">New Snake game</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"survival\">Survival</MenuItem>\r\n                    <MenuItem value=\"race\">Race</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                  <Select\r\n                    value={difficulty || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"difficulty\"\r\n                    inputProps={{\r\n                      id: 'difficulty-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"500\">Easy</MenuItem>\r\n                    <MenuItem value=\"300\">Medium</MenuItem>\r\n                    <MenuItem value=\"100\">Hard</MenuItem>\r\n                    <MenuItem value=\"75\">Pro</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                {gamemode === 'race'\r\n                                && (\r\n                                <FormControl>\r\n                                  <TextField\r\n                                    label=\"Snake length\"\r\n                                    name=\"racetarget\"\r\n                                    type=\"number\"\r\n                                    value={racetarget}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('racetarget')}\r\n                                  />\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={wallCollision}\r\n                        onChange={this.handleChangeBool('wallCollision')}\r\n                        value=\"wallCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Wall collisions\"\r\n                  />\r\n                </FormControl>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision}\r\n                        onChange={this.handleChangeBool('opponentCollision')}\r\n                        value=\"opponentCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Opponent collisions\"\r\n                  />\r\n                </FormControl>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision && eatOpponents}\r\n                        disabled={!opponentCollision}\r\n                        onChange={this.handleChangeBool('eatOpponents')}\r\n                        value=\"eatOpponents\"\r\n                      />\r\n                    )}\r\n                    label=\"Eat opponent on collision\"\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateSnake.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateSnake;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Typography, Card,\r\n} from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CreateTetris from './CreateTetris';\r\nimport CreateGolf from './CreateGolf';\r\nimport CreateSnake from './CreateSnake';\r\n\r\nclass CreateMinigame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gametype: '',\r\n    };\r\n  }\r\n\r\n    setGameType = name => (event) => {\r\n      this.setState({ gametype: name });\r\n    };\r\n\r\n    render() {\r\n      const { createGame } = this.props;\r\n      const { gametype } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          {!gametype && (\r\n\r\n          <Grid container spacing={24}>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('snake')}>\r\n                <CardHeader title=\"Snake\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a classic game of snake or change the modes to fit your audience</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('tetris')}>\r\n                <CardHeader title=\"Tetris\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Game is not available yet</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('golf')}>\r\n                <CardHeader title=\"Golf\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a multiplayer golf simulation game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          )}\r\n          {gametype === 'snake' && <CreateSnake createGame={createGame} />}\r\n          {gametype === 'tetris' && <CreateTetris createGame={createGame} />}\r\n          {gametype === 'golf' && <CreateGolf createGame={createGame} />}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateMinigame.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateMinigame;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography, Card } from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport CreateQuiz from '../quiz/create/CreateQuiz';\r\nimport { fire } from '../../base';\r\nimport CreateMinigame from '../minigame/create/CreateMinigame';\r\nimport { generateGameId } from '../common/utils/appUtil';\r\n\r\nclass Create extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gametype: '',\r\n      gameId: '',\r\n    };\r\n    this.createGame = this.createGame.bind(this);\r\n    // this.validateGame = this.validateGame.bind(this);\r\n  }\r\n\r\n    setGameType = name => () => {\r\n      this.setState({ gametype: name });\r\n    };\r\n\r\n    createGame(g) {\r\n      const game = g;\r\n      game.gameId = generateGameId();\r\n      game.created = Date.now();\r\n      game.status = 'CREATED';\r\n      game.phase = 'setup';\r\n\r\n      const that = this;\r\n      // game push få ett id.\r\n      const gameRef = fire.database().ref('/games').push();\r\n      game.key = gameRef.key;\r\n      gameRef.set(game, (error) => {\r\n        if (error) {\r\n          that.setState({\r\n            errorText: `Error: ${error}`,\r\n          });\r\n          const snack = {\r\n            variant: 'error',\r\n            message: 'Unexpected internal error',\r\n          };\r\n          that.props.showSnackbar(snack);\r\n        } else {\r\n          const snack = {\r\n            variant: 'success',\r\n            message: 'Successfully created!',\r\n          };\r\n          that.props.showSnackbar(snack);\r\n          that.setState({\r\n            gameId: game.gameId,\r\n            gametype: 'done',\r\n          });\r\n          localStorage.setItem('RecentGameId', game.gameId);\r\n\r\n          // show gameid and password\r\n          // show button to start game / navigate to host\r\n        }\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { gametype, gameId } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          {!gametype && (\r\n          <Grid container spacing={24}>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('quiz')}>\r\n                <CardHeader title=\"Quiz\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create your own quiz or generate one fast and easy</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('minigame')}>\r\n                <CardHeader title=\"Mini Game\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a game to play just for fun or team building purposes</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('survey')}>\r\n                <CardHeader title=\"Survey\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Survey your audience</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('discussion')}>\r\n                <CardHeader title=\"Discussion\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a discussion on a sppecified topic</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          )}\r\n          {gametype === 'quiz' && <CreateQuiz createQuiz={this.createGame} showSnackbar={showSnackbar} />}\r\n          {gametype === 'minigame' && <CreateMinigame createGame={this.createGame} showSnackbar={showSnackbar} />}\r\n          {gametype === 'done'\r\n                    && (\r\n                    <div>\r\n                      <Typography variant=\"h2\">\r\n                        <span>Created game PIN: </span>\r\n                        {' '}\r\n                        <span className=\"dynamic-text\">{gameId}</span>\r\n                      </Typography>\r\n                      <Link to=\"/host\">Host game</Link>\r\n                    </div>\r\n                    )\r\n                }\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreate.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default Create;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Switch from '@material-ui/core/Switch';\r\nclass PhaseSetup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            surveyPlayers: false,\r\n            answerStreak: true,\r\n            nameGenerator: false,\r\n            remoteMode: false,\r\n            useTeams: false,\r\n            randomizeQuestionOrder: false,\r\n            autoPlayQuestions: false,\r\n\r\n        };\r\n        this.startGame = this.startGame.bind(this);\r\n        this.createTeamGame = this.createTeamGame.bind(this);\r\n        this.createClassicGame = this.createClassicGame.bind(this);\r\n\r\n\r\n    }\r\n    handleChangeBool = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    createTeamGame() {\r\n        this.startGame(true);\r\n    }\r\n    createClassicGame() {\r\n        this.startGame(false);\r\n    }\r\n    startGame(teamMode) {\r\n        let game = {};\r\n        let quiz = this.props.game.quiz;\r\n        quiz.surveyPlayers = this.state.surveyPlayers;\r\n        quiz.answerStreak = this.state.answerStreak;\r\n        quiz.nameGenerator = this.state.nameGenerator;\r\n        quiz.remoteMode = this.state.remoteMode;\r\n        quiz.useTeams = teamMode;\r\n        quiz.autoPlayQuestions = this.state.autoPlayQuestions;\r\n        quiz.randomizeQuestionOrder = this.state.randomizeQuestionOrder;\r\n        quiz.currentQuestion = 0;\r\n\r\n        game.quiz = quiz;\r\n        game.phase = \"connection\";\r\n        game.status = \"IN_PROGRESS\";\r\n        this.props.gameFunc.update(game);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h4\">Game Settings</Typography>\r\n                <Button onClick={this.createClassicGame} variant=\"contained\">Classic</Button>\r\n                <Button onClick={this.createTeamGame} variant=\"contained\">Team mode</Button>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.nameGenerator}\r\n                                    onChange={this.handleChangeBool('nameGenerator')}\r\n                                    value=\"nameGenerator\"\r\n                                />\r\n                            }\r\n                            label=\"Generate names for players\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.remoteMode}\r\n                                    onChange={this.handleChangeBool('remoteMode')}\r\n                                    value=\"remoteMode\"\r\n                                />\r\n                            }\r\n                            label=\"Remote playmode\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.answerStreak}\r\n                                    onChange={this.handleChangeBool('answerStreak')}\r\n                                    value=\"answerStreak\"\r\n                                />\r\n                            }\r\n                            label=\"Use answer scorestreak\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.surveyPlayers}\r\n                                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                                    value=\"surveyPlayers\"\r\n                                />\r\n                            }\r\n                            label=\"Survey players after game\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.randomizeQuestionOrder}\r\n                                    onChange={this.handleChangeBool('randomizeQuestionOrder')}\r\n                                    value=\"randomizeQuestionOrder\"\r\n                                />\r\n                            }\r\n                            label=\"Randomize question order\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.autoPlayQuestions}\r\n                                    onChange={this.handleChangeBool('autoPlayQuestions')}\r\n                                    value=\"autoPlayQuestions\"\r\n                                />\r\n                            }\r\n                            label=\"Auto play questions\"\r\n                        />\r\n\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseSetup;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  nextPhase() {\r\n    this.props.gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  // add function to kick player\r\n  render() {\r\n    let players = this.props.game.players;\r\n    if (!players) {\r\n      players = [];\r\n    } else {\r\n      players = Object.values(players);\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">\r\n            <span>Join game at: </span>\r\n            <span className=\"dynamic-text\">mannfeldt.github.io/stagehoot</span>\r\n\r\n          </Typography>\r\n          <Typography variant=\"h2\">\r\n            <span>Enter game PIN: </span>\r\n            <span className=\"dynamic-text\">{this.props.game.gameId}</span>\r\n\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">{this.props.game.title}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            {players.map((player, index) => (\r\n              <Grid key={index} item xs={3}>\r\n                <Typography paragraph variant=\"body1\" className=\"dynamic-text\">{player.name}</Typography>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PhaseConnection;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CountdownAnimation.scss';\r\n\r\nclass CountdownAnimation extends PureComponent {\r\n  // jag skulle kunna lägga en counter här som rendrerar null efter några sekunder\r\n  // så att är säkert att den inte hinner loopa\r\n  render() {\r\n    const { speed } = this.props;\r\n    if (speed === 'slow') {\r\n      return (\r\n        <div className=\"demo_slow\">\r\n          <div className=\"demo_slow__colored-blocks\">\r\n            <div className=\"demo_slow__colored-blocks-rotater\">\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n            </div>\r\n            <div className=\"demo_slow__colored-blocks-inner\" />\r\n            <div className=\"demo_slow__text\">Ready</div>\r\n          </div>\r\n          <div className=\"demo_slow__inner\">\r\n            <svg className=\"demo_slow__numbers\" viewBox=\"0 0 100 100\">\r\n              <defs>\r\n                <path className=\"demo_slow__num-path-1\" d=\"M40,28 55,22 55,78\" />\r\n                <path className=\"demo_slow__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\" />\r\n                <path className=\"demo_slow__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\" />\r\n                <path className=\"demo_slow__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\" />\r\n                <path className=\"demo_slow__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\" />\r\n              </defs>\r\n              <path\r\n                className=\"demo_slow__numbers-path\"\r\n                d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19\r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73\r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83\r\n          l0,-61 L40,28\"\r\n              />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"demo\">\r\n        <div className=\"demo__colored-blocks\">\r\n          <div className=\"demo__colored-blocks-rotater\">\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n          </div>\r\n          <div className=\"demo__colored-blocks-inner\" />\r\n          <div className=\"demo__text\">Ready</div>\r\n        </div>\r\n        <div className=\"demo__inner\">\r\n          <svg className=\"demo__numbers\" viewBox=\"0 0 100 100\">\r\n            <defs>\r\n              <path className=\"demo__num-path-1\" d=\"M40,28 55,22 55,78\" />\r\n              <path className=\"demo__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\" />\r\n              <path className=\"demo__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\" />\r\n              <path className=\"demo__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\" />\r\n              <path className=\"demo__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\" />\r\n            </defs>\r\n            <path\r\n              className=\"demo__numbers-path\"\r\n              d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19\r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73\r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83\r\n          l0,-61 L40,28\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nCountdownAnimation.propTypes = {\r\n  speed: PropTypes.string.isRequired,\r\n};\r\nexport default CountdownAnimation;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"awaiting_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h2\">Starting quiz</Typography>\r\n                <CountdownAnimation speed=\"slow\" />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"show_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n            <Typography variant=\"h2\">Loading next question</Typography>\r\n                <CountdownAnimation speed=\"slow\"/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: '',\r\n    };\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question });\r\n    const phaseTime = 3000 + (question.question.length * 20);\r\n    setTimeout(this.nextPhase, phaseTime);\r\n  }\r\n\r\n  nextPhase() {\r\n    let answers = [];\r\n    if (this.state.question.aType === 'multiple') {\r\n      answers = this.state.question.wrongAnswers.concat(this.state.question.correctAnswers);\r\n      answers = this.shuffle(answers);\r\n    } else if (this.state.question.aType === 'boolean') {\r\n      answers = ['True', 'False'];\r\n    }\r\n    if (answers.length) {\r\n      const game = {};\r\n      game.phase = 'answer';\r\n      game.quiz = this.props.game.quiz;\r\n      game.quiz.questions[game.quiz.currentQuestion].answers = answers;\r\n      this.props.gameFunc.update(game);\r\n    } else {\r\n      this.props.gameFunc.update({ phase: 'answer' });\r\n    }\r\n  }\r\n\r\n  shuffle(array) {\r\n    let counter = array.length;\r\n    while (counter > 0) {\r\n      const index = Math.floor(Math.random() * counter);\r\n      counter--;\r\n      const temp = array[counter];\r\n      array[counter] = array[index];\r\n      array[index] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <div className=\"phase-container\">\r\n              <div className=\"quiz-top-section\">\r\n                  <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n\r\n                </div>\r\n              <div className=\"quiz-middle-section\" />\r\n              <div className=\"quiz-bottom-section\" />\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseShowQuestion;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    paddingTop: theme.spacing.unit * 2,\r\n    paddingBottom: theme.spacing.unit * 2,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    height: '100%',\r\n  },\r\n  playAnswer: {\r\n    width: '50vw',\r\n    height: '100%',\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    float: 'left',\r\n    fontSize: '28',\r\n    color: 'white',\r\n    marginLeft: '10px',\r\n  },\r\n  answer: {\r\n    fontSize: 18,\r\n    fontWeight: 500,\r\n    color: 'white',\r\n  },\r\n});\r\n\r\nconst answerStyles = [{\r\n  icon: <CakeIcon />,\r\n  color: '#73c7d2',\r\n},\r\n{\r\n  icon: <ExtensionIcon />,\r\n  color: '#d78a8a',\r\n},\r\n{\r\n  icon: <FavoriteIcon />,\r\n  color: '#b984c2',\r\n},\r\n{\r\n  icon: <StarIcon />,\r\n  color: '#b1ca94',\r\n}];\r\n\r\nclass AnswerOption extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n    /*\r\n                        på play answer vill jag inte skriva texten utan bara ha rätt färg + symbol. play answer ska vara större. men det kanske jag kan fixa via cssklass i playanswer.\r\n                        på host answer har jag rätt färg symbol + text\r\n\r\n                        symboler icons: hjärta,stjärna,blomma (filter_vintage), berg, pusselbit(extension), cloud\r\n                        trekant, fyrkant, cirkel,\r\n                        1,2,3,4 (finns som icon)\r\n                        a,b,c,d (finns inte om icon)\r\n                        välj 4 coola färger, grön röd blå gul?\r\n                        tänk på att det kan vara två alternativ\r\n        */\r\n  }\r\n\r\n  render() {\r\n    const design = answerStyles[this.props.index];\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className=\"full-height\">\r\n        {this.props.answerQuestion && (\r\n        <Paper onClick={() => { this.props.answerQuestion(this.props.answer); }} className={classes.playAnswer} style={{ backgroundColor: design.color }}>\r\n          <div className=\"button-answer-icon\">{design.icon}</div>\r\n          {this.props.remoteMode && <div className={classes.answer}>{this.props.answer}</div>}\r\n        </Paper>\r\n        )\r\n                }\r\n        {!this.props.answerQuestion && (\r\n        <Paper className={classes.paper} style={{ backgroundColor: design.color }}>\r\n          <div className={classes.icon}>{design.icon}</div>\r\n          <div className={classes.answer}>{this.props.answer}</div>\r\n        </Paper>\r\n        )\r\n                }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerOption);\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  text: {\r\n    marginBottom: '-200px',\r\n    fontSize: '86px',\r\n    paddingTop: '160px',\r\n  },\r\n  circle: {\r\n    color: '#6JpDK4',\r\n\r\n  },\r\n});\r\nclass Timer extends PureComponent {\r\n  render() {\r\n    const {\r\n      classes, text, value, startValue,\r\n    } = this.props;\r\n    let currentCount = value === null ? startValue : value;\r\n    const start = startValue < 1 ? 0 : startValue;\r\n\r\n    if (currentCount < 0) {\r\n      currentCount = 0;\r\n    }\r\n    const completed = currentCount / start;\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <Typography variant=\"caption\" className={classes.text}>{text}</Typography>\r\n        <CircularProgress\r\n          className={classes.circle}\r\n          classes={{\r\n            colorSecondary: classes.circle,\r\n          }}\r\n          variant=\"static\"\r\n          value={completed * 100}\r\n          thickness={4}\r\n          size={300}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.number,\r\n  startValue: PropTypes.number,\r\n  classes: PropTypes.any,\r\n};\r\nexport default withStyles(styles)(Timer);\r\n","import React, { Component } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    bar: {\r\n        color: '#32386D'\r\n    }\r\n});\r\nclass AnswerCounter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">Answers collected</Typography>\r\n                <LinearProgress className={classes.bar} variant=\"determinate\" value={this.props.value} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerCounter);","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\nimport Timer from '../../common/Timer';\r\nimport AnswerCounter from './AnswerCounter';\r\n\r\nclass PhaseAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: null,\r\n      timelimit: 0,\r\n      started: false,\r\n      isTimelimited: true,\r\n      question: {\r\n        question: '',\r\n        answers: [],\r\n      },\r\n    };\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const that = this;\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question, isTimelimited: this.props.game.quiz.timelimit, timelimit: question.timelimit * 10 });\r\n    if (this.props.game.quiz.timelimit) {\r\n      const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n      let counter = question.timelimit * 10;\r\n      const i = setInterval(() => {\r\n        let answersCollected = 0;\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n          if (that.props.game.players[playerKeys[i]].answers && that.props.game.players[playerKeys[i]].answers[question.id]) {\r\n            answersCollected++;\r\n          }\r\n        }\r\n        counter--;\r\n        that.setState({ counter, started: true });\r\n        if (counter <= -5 || answersCollected === playerKeys.length) {\r\n          that.nextPhase();\r\n          clearInterval(i);\r\n        }\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  nextPhase() {\r\n    this.props.gameFunc.update({ phase: 'result_question' });\r\n  }\r\n\r\n  render() {\r\n    let answers = [];\r\n    if (this.props.game) {\r\n      answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n    }\r\n    let answersCollected = 0;\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      if (this.props.game.players[playerKeys[i]].answers && this.props.game.players[playerKeys[i]].answers[this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id]) {\r\n        answersCollected++;\r\n      }\r\n    }\r\n    const answerCollectedPercentage = (answersCollected / playerKeys.length) * 100;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          {!this.state.isTimelimited && <Button onClick={this.nextPhase}>Next</Button>}\r\n          {this.state.isTimelimited && <Timer startValue={this.state.timelimit} value={this.state.counter} text={Math.ceil(this.state.counter / 10)} />\r\n                    }\r\n          <div className=\"quiz-answercounter-container\">\r\n            <AnswerCounter value={answerCollectedPercentage} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n\r\n          <Grid container className=\"align-bottom\">\r\n            {answers.map((answer, index) => (\r\n              <Grid key={index} item xs={6}>\r\n                <AnswerOption answer={answer} index={index} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseAnswer;\r\n","import React, { Component } from 'react';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst colors = ['#80DEEA', '#EF9A9A', '#CE93D8', '#C5E1A5'];\r\nconst MAX_PLAYERS = 20;\r\nconst PLAYER_BAR_HEIGHT_INCREMENT = 30;\r\nconst MAX_HEIGHT_PODIUM = 740;\r\nclass Podium extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getChartData = this.getChartData.bind(this);\r\n    this.getChartOptions = this.getChartOptions.bind(this);\r\n    this.getChartHeight = this.getChartHeight.bind(this);\r\n  }\r\n\r\n  getChartData() {\r\n    const chartData = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        label: 'podium',\r\n        backgroundColor: [],\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    const rawPlayerData = [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const playerScoreData = {};\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      let score = 0;\r\n      if (player.answers) {\r\n        for (let j = 0; j < Object.keys(player.answers).length; j++) {\r\n          const question = this.props.game.quiz.questions[j];\r\n          const answer = player.answers[question.id];\r\n          if (answer) {\r\n            score += answer.score;\r\n          }\r\n        }\r\n        playerScoreData.score = score;\r\n        playerScoreData.name = player.name;\r\n        rawPlayerData.push(playerScoreData);\r\n      }\r\n    }\r\n    rawPlayerData.sort((a, b) => b.score - a.score); // For ascending sort\r\n    const maxIndex = rawPlayerData.length > MAX_PLAYERS ? MAX_PLAYERS : rawPlayerData.length;\r\n    for (let i = 0; i < maxIndex; i++) {\r\n      chartData.labels.push(rawPlayerData[i].name);\r\n      chartData.datasets[0].data.push(rawPlayerData[i].score);\r\n      chartData.datasets[0].backgroundColor.push(colors[i % 4]);\r\n    }\r\n\r\n    return chartData;\r\n  }\r\n\r\n  getChartHeight() {\r\n    const chartData = this.getChartData();\r\n    let height = 70 + (chartData.labels.length * PLAYER_BAR_HEIGHT_INCREMENT);\r\n    if (height > MAX_HEIGHT_PODIUM) {\r\n      height = MAX_HEIGHT_PODIUM;\r\n    }\r\n    return height;\r\n  }\r\n\r\n  getChartOptions() {\r\n    const chartHeight = this.getChartHeight();\r\n    const padding = (MAX_HEIGHT_PODIUM - chartHeight) / 2;\r\n    const options = {\r\n      maintainAspectRatio: false,\r\n      showTooltips: false,\r\n      responsiveAnimationDuration: 1000,\r\n      animation: {\r\n        easing: 'easeInOutCubic',\r\n        duration: '2000',\r\n        onProgress(animation) {\r\n          animation.animationObject.onAnimationProgress = function () {\r\n            const ctx = this.chart.ctx;\r\n            const chart = this.chart;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'bottom';\r\n            ctx.font = '20px Roboto';\r\n\r\n            const stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n            const meta = chart.getDatasetMeta(0);\r\n            if (!meta.hidden) {\r\n              meta.data.forEach((element, index) => {\r\n                // Draw the text in black, with the specified font\r\n\r\n                // Just naively convert to string for now\r\n                const dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio).toString();\r\n                ctx.fillStyle = colors[index % 4];\r\n\r\n                const position = element.tooltipPosition();\r\n                ctx.fillText(dataString, position.x + 2 + (dataString.length * 6), position.y + (element._model.height / 2));\r\n              });\r\n            }\r\n          };\r\n        },\r\n      },\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n          display: true,\r\n          beginAtZero: true,\r\n        }],\r\n        xAxes: [{\r\n          display: true,\r\n          beginAtZero: true,\r\n        }],\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltips: {\r\n        enabled: false,\r\n      },\r\n      events: [],\r\n      layout: {\r\n        padding: {\r\n          left: 0,\r\n          right: 60,\r\n          top: padding,\r\n          bottom: padding,\r\n        },\r\n      },\r\n    };\r\n    return options;\r\n  }\r\n\r\n  getWinnerString() {\r\n    return 'Congratulations [name of player]! ';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ maxHeight: MAX_HEIGHT_PODIUM }}>\r\n        <HorizontalBar\r\n              data={this.getChartData}\r\n              height={MAX_HEIGHT_PODIUM}\r\n              options={this.getChartOptions()}\r\n            />\r\n        <Typography variant=\"subtitle1\">{this.getWinnerString()}</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Podium;\r\n","import React, { Component } from 'react';\r\nimport Podium from '../Podium';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h2\">Final score</Typography>\r\n\r\n                    <Podium game={this.props.game} />\r\n                </div>\r\n                <div className=\"align-bottom \">\r\n                    <div>\r\n\r\n                        <Button onClick={this.props.gameFunc.restart}>Replay quiz</Button>\r\n                        <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n                        <Button onClick={() => alert('show results')}>Show results</Button>\r\n                        <Button onClick={() => alert('start survey')}>Start survey</Button>\r\n                        <Button>\r\n                            <Link to={'/create'}>Host game</Link>\r\n                        </Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst PUBLIC_PATH = process.env.PUBLIC_URL;\r\n\r\nconst answerStyles = [{\r\n  icon: <CakeIcon />,\r\n  color: '#80DEEA',\r\n},\r\n{\r\n  icon: <ExtensionIcon />,\r\n  color: '#EF9A9A',\r\n},\r\n{\r\n  icon: <FavoriteIcon />,\r\n  color: '#CE93D8',\r\n},\r\n{\r\n  icon: <StarIcon />,\r\n  color: '#C5E1A5',\r\n}];\r\n\r\nclass AnswerChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getChartData = this.getChartData.bind(this);\r\n    this.getChartOptions = this.getChartOptions.bind(this);\r\n    this.getChartHeight = this.getChartHeight.bind(this);\r\n    this.getAnswerData = this.getAnswerData.bind(this);\r\n  }\r\n\r\n  getAnswerData() {\r\n    const answerData = {\r\n      data: [],\r\n      topPlayer: {\r\n        score: 0,\r\n        playerKey: '',\r\n      },\r\n      correctAnswers: [],\r\n    };\r\n    const playerAnswers = [];\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    const currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      if (!player.answers) {\r\n        continue;\r\n      }\r\n      const answer = player.answers[currentQuestion.id];\r\n      if (answer) {\r\n        playerAnswers.push(answer.answer);\r\n        if (answer.score > answerData.topPlayer.score) {\r\n          answerData.topPlayer.score = answer.score;\r\n          answerData.topPlayer.playerKey = player.key;\r\n        }\r\n      }\r\n    }\r\n    for (let j = 0; j < currentQuestion.answers.length; j++) {\r\n      let nrOfAnswers = 0;\r\n      for (let i = 0; i < playerAnswers.length; i++) {\r\n        if (currentQuestion.answers.indexOf(playerAnswers[i]) === j) {\r\n          nrOfAnswers++;\r\n        }\r\n      }\r\n      answerData.data.push(nrOfAnswers);\r\n\r\n      if (currentQuestion.correctAnswers.indexOf(currentQuestion.answers[j]) > -1) {\r\n        answerData.correctAnswers.push(j);\r\n      }\r\n    }\r\n\r\n    return answerData;\r\n  }\r\n\r\n  getChartData() {\r\n    const chartData = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        label: 'asdf',\r\n        backgroundColor: [],\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n    const data = this.getAnswerData();\r\n    chartData.datasets[0].borderColor = [];\r\n    chartData.datasets[0].data = data.data;\r\n    for (let i = 0; i < data.data.length; i++) {\r\n      chartData.labels.push('');\r\n      chartData.datasets[0].backgroundColor.push(answerStyles[i].color);\r\n    }\r\n    return chartData;\r\n  }\r\n\r\n  getChartHeight() {\r\n    const answerData = this.getAnswerData();\r\n    const topvalue = Math.max(...answerData.data);\r\n    const incrementHeightPerAnswer = 25;\r\n    const minHeight = 65;\r\n    const maxHeight = 300;\r\n    const height = minHeight + (topvalue * incrementHeightPerAnswer);\r\n    if (height > maxHeight) {\r\n      return maxHeight;\r\n    }\r\n    return height;\r\n  }\r\n\r\n  getChartOptions() {\r\n    const that = this;\r\n    const options = {\r\n      maintainAspectRatio: false,\r\n      showTooltips: false,\r\n      responsiveAnimationDuration: 1000,\r\n      animation: {\r\n        easing: 'easeInOutCubic',\r\n        duration: '2000',\r\n        onProgress (animation) {\r\n                    let answerData = that.getAnswerData();\r\n                    animation.animationObject.onAnimationProgress = function () {\r\n                        let ctx = this.chart.ctx;\r\n                        let chart = this.chart;\r\n                        ctx.textAlign = \"center\";\r\n                        ctx.fillStyle = \"black\";\r\n                        ctx.textBaseline = \"bottom\";\r\n                        ctx.font = \"24px Roboto\";\r\n\r\n                        let stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n\r\n                        let meta = chart.getDatasetMeta(0);\r\n                        if (!meta.hidden) {\r\n                            meta.data.forEach(function (element, index) {\r\n\r\n                                let dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio);\r\n\r\n                                let position = element.tooltipPosition();\r\n                                ctx.fillStyle = answerStyles[index].color;\r\n                                ctx.fillText(dataString, position.x, position.y - 2);\r\n                                ctx.beginPath();\r\n                                ctx.rect(position.x - element._view.width / 2, chart.height - 32, element._view.width, 22);\r\n                                ctx.fill();\r\n                                if (answerData.correctAnswers.indexOf(index) > -1) {\r\n\r\n                                    let img = new Image();\r\n                                    img.src = PUBLIC_PATH + \"/baseline-done_outline-24px.svg\";\r\n                                    img.height = 100;\r\n                                    img.width = 100;\r\n                                    let ypos = chart.height - 34;\r\n                                    //ta bort onlead wrapper för att göra det instant\r\n                                    ctx.drawImage(img, position.x - 12, ypos);\r\n                                }\r\n                            });\r\n                        }\r\n                        /*\r\n                                                for (let i = 0; i < answerData.data.length; i++) {\r\n                                                    let value = Math.floor(answerData.data[i] * stepratio);\r\n                                                    //om det inte är någon som svarar så blir meta[0] undefined första gången. går jag in på nytt på gamet som host så fungerar det\r\n                                                    //ha någon specifik hantering för om ingen har svarat alls\r\n                                                    var meta = this.chart.getDatasetMeta(0);\r\n                                                    let metadata = meta.data[i];\r\n                        \r\n                                                    ctx.fillStyle = answerStyles[i].color;\r\n                                                    ctx.fillText(value, metadata._view.x, metadata._view.y - 2);\r\n                                                    ctx.beginPath();\r\n                                                    ctx.rect(metadata._view.x - metadata._view.width / 2, this.chart.height - 32, metadata._view.width, 22);\r\n                                                    ctx.fill();\r\n                                                    if (answerData.correctAnswers.indexOf(i) > -1) {\r\n                        \r\n                                                        let img = new Image();\r\n                                                        img.src = \"/baseline-done_outline-24px.svg\";\r\n                                                        img.height = 100;\r\n                                                        img.width = 100;\r\n                                                        let ypos = this.chart.height - 34;\r\n                                                        //ta bort onlead wrapper för att göra det instant\r\n                                                        ctx.drawImage(img, metadata._view.x - 12, ypos);\r\n                        \r\n                                                    }\r\n                                                }\r\n                        \r\n                                                */\r\n                    }\r\n\r\n\r\n                },\r\n      },\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n          display: false,\r\n          beginAtZero: true,\r\n        }],\r\n        xAxes: [{\r\n          display: false,\r\n        }],\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltips: {\r\n        enabled: false,\r\n      },\r\n      events: [],\r\n      layout: {\r\n        padding: {\r\n          left: 0,\r\n          right: 0,\r\n          top: 25,\r\n          bottom: 40,\r\n        },\r\n      },\r\n    };\r\n    return options;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <Bar\r\ndata={this.getChartData}\r\nheight={this.getChartHeight()}\r\n              options={this.getChartOptions()}\r\n            />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnswerChart;\r\n","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Table from '@material-ui/core/Table';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  table: {\r\n    maxWidth: 700,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n});\r\n\r\nclass Leaderboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      leaderboardData: this.getLeaderboardData(),\r\n      page: 0,\r\n      rowsPerPage: 10,\r\n    };\r\n    this.startScoreCounter = this.startScoreCounter.bind(this);\r\n    this.getScoreCellWidth = this.getScoreCellWidth.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(this.startScoreCounter, 2000);\r\n  }\r\n\r\n  startScoreCounter() {\r\n    const that = this;\r\n    const i = setInterval(() => {\r\n      const newLeaderBoard = that.state.leaderboardData;\r\n      let done = true;\r\n      for (let i = 0; i < newLeaderBoard.players.length; i++) {\r\n        const player = newLeaderBoard.players[i];\r\n        if (player.currentQuestionScore > 0) {\r\n          done = false;\r\n          player.currentQuestionScore--;\r\n          player.totalScore++;\r\n        }\r\n      }\r\n      newLeaderBoard.players.sort((a, b) => ((b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0));\r\n      that.setState({ leaderboard: newLeaderBoard });\r\n      if (done) {\r\n        clearInterval(i);\r\n      }\r\n    }, 10);\r\n  }\r\n\r\n  getLeaderboardData() {\r\n    const leaderboard = {\r\n      players: [],\r\n    };\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n\r\n    const currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    const playerList = [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const playerScoreData = {};\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      let score = 0;\r\n      if (player.answers) {\r\n        for (let j = 0; j < this.props.game.quiz.questions.length; j++) {\r\n          const question = this.props.game.quiz.questions[j];\r\n          const answer = player.answers[question.id];\r\n          if (answer) {\r\n            if (answer.questionId === currentQuestion.id) {\r\n              playerScoreData.currentQuestionScore = answer.score;\r\n              playerScoreData.lastScore = answer.score;\r\n            } else {\r\n              score += answer.score;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      playerScoreData.totalScore = score;\r\n      playerScoreData.name = player.name;\r\n      playerScoreData.key = player.key;\r\n      playerList.push(playerScoreData);\r\n    }\r\n\r\n    playerList.sort((a, b) => ((b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0));\r\n    leaderboard.players = playerList;\r\n    return leaderboard;\r\n  }\r\n\r\n  getLeaderboardScore(player) {\r\n    if (player.currentQuestionScore === 0) {\r\n      return `${player.totalScore} (+${player.lastScore})`;\r\n    }\r\n    return `${player.totalScore}           `;\r\n    // return player.totalScore + \" (+\" + player.currentQuestionScore + \")\";\r\n  }\r\n\r\n  getScoreCellWidth() {\r\n    let length = 0;\r\n    const leaderboardData = this.getLeaderboardData();\r\n    for (let i = 0; i < leaderboardData.players.length; i++) {\r\n      const player = leaderboardData.players[i];\r\n      const scoreWidth = `${player.totalScore} (+${player.lastScore})`;\r\n      if (scoreWidth.length > length) {\r\n        length = scoreWidth.length;\r\n      }\r\n    }\r\n\r\n\r\n    return (length * 6) + 65;\r\n  }\r\n\r\n    handleChangePage = (event, page) => {\r\n      this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n      this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n    render() {\r\n      const { classes } = this.props;\r\n      const { leaderboardData, rowsPerPage, page } = this.state;\r\n      return (\r\n        <div className={classes.root}>\r\n          <Table className={classes.table}>\r\n            <TableBody>\r\n              {leaderboardData.players.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((player, index) => (\r\n                <TableRow key={player.key}>\r\n                  <TableCell padding=\"dense\">{index + 1}</TableCell>\r\n                  <TableCell>{player.name}</TableCell>\r\n                  <TableCell style={{ width: this.getScoreCellWidth() }}>{this.getLeaderboardScore(player)}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          {leaderboardData.players.length > 10 && (\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={leaderboardData.players.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            backIconButtonProps={{\r\n              'aria-label': 'Previous Page',\r\n            }}\r\n            nextIconButtonProps={{\r\n              'aria-label': 'Next Page',\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n          />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Leaderboard);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport AnswerOption from '../AnswerOption';\r\nimport AnswerChart from '../AnswerChart';\r\nimport Leaderboard from '../Leaderboard';\r\n\r\n\r\nclass PhaseResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.nextQuestion = this.nextQuestion.bind(this);\r\n    this.finalizeQuiz = this.finalizeQuiz.bind(this);\r\n  }\r\n\r\n  nextQuestion() {\r\n    const game = {};\r\n    game.quiz = this.props.game.quiz;\r\n    game.quiz.currentQuestion = game.quiz.currentQuestion + 1;\r\n    game.phase = 'awaiting_question';\r\n    this.props.gameFunc.update(game);\r\n  }\r\n\r\n  finalizeQuiz() {\r\n    this.props.gameFunc.update({ phase: 'final_result' });\r\n  }\r\n\r\n  render() {\r\n    let answers = [];\r\n    let currentQuestion = '';\r\n    if (this.props.game) {\r\n      currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n      answers = currentQuestion.answers;\r\n    }\r\n    const nextQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion + 1];\r\n    const isLastQuestion = typeof nextQuestion === 'undefined';\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h6\" style={{ float: 'right' }}>{`Game PIN:${this.props.game.gameId} `}</Typography>\r\n          <Typography variant=\"h5\">{currentQuestion.question}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            <Grid item md={6} xs={12}>\r\n              <div className=\"quiz-answer-chart\">\r\n                <AnswerChart game={this.props.game} />\r\n              </div>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <div>\r\n                <Leaderboard game={this.props.game} />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n          <div>\r\n            {isLastQuestion && <Button onClick={this.finalizeQuiz}>Finalize result</Button>}\r\n            {!isLastQuestion && <Button onClick={this.nextQuestion}>Next question</Button>}\r\n            <Button onClick={this.props.gameFunc.restart}>Restart quiz</Button>\r\n            <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n            <Button onClick={this.props.gameFunc.end}>End quiz</Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Grid className=\"align-bottom\" container>\r\n            {answers.map((answer, index) => (\r\n              <Grid key={index} item xs={6}>\r\n                <AnswerOption answer={answer} index={index} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseResultQuestion;\r\n","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                HostEnd\r\n                toggleHeader()\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component } from 'react';\r\nimport PhaseSetup from './PhaseSetup';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\n\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"host-container\">\r\n                {this.props.game.phase === \"setup\" && <PhaseSetup game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"connection\" && <PhaseConnection game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"starting\" && <PhaseStarting game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"awaiting_question\" && <PhaseAwaitingQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"show_question\" && <PhaseShowQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"answer\" && <PhaseAnswer game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"result_question\" && <PhaseResultQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"final_result\" && <PhaseFinalResult game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"end\" && <PhaseEnd game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass PhaseSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      racetarget: props.game.minigame.racetarget,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      eatOpponents: props.game.minigame.eatOpponents,\r\n      wallCollision: props.game.minigame.wallCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        wallCollision,\r\n        opponentCollision,\r\n        eatOpponents,\r\n        racetarget,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"survival\">Survival</MenuItem>\r\n                  <MenuItem value=\"race\">Race</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'race'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Snake length\"\r\n                                name=\"racetarget\"\r\n                                type=\"number\"\r\n                                value={racetarget}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('racetarget')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={wallCollision}\r\n                      onChange={this.handleChangeBool('wallCollision')}\r\n                      value=\"wallCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Wall collisions\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision && eatOpponents}\r\n                      disabled={!opponentCollision}\r\n                      onChange={this.handleChangeBool('eatOpponents')}\r\n                      value=\"eatOpponents\"\r\n                    />\r\n                )}\r\n                  label=\"Eat opponent on collision\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nPhaseSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseSetup;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  nextPhase() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    let { players } = game;\r\n    if (!players) {\r\n      players = [];\r\n    } else {\r\n      players = Object.values(players);\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">\r\n            <span>Join game with Game PIN: </span>\r\n            <span className=\"dynamic-text\">{game.gameId}</span>\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">{game.title}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            {players.map(player => (\r\n              <Grid key={player.key} item xs={3}>\r\n                <Typography paragraph variant=\"body1\" className=\"dynamic-text\">{player.name}</Typography>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseConnection;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n    this.startCounter();\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    const counter = 5;\r\n    const i = setInterval(() => {\r\n      that.setState(state => ({\r\n        counter: state.counter + 1,\r\n      }));\r\n\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'gameplay' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseStarting;\r\n","const gridSize = 20;\r\nfunction isInvalidMove(keyPress, currentDirection) {\r\n  if (!keyPress) {\r\n    return true;\r\n  }\r\n  const invalidMovment = {\r\n    left: 'right', right: 'left', up: 'down', down: 'up',\r\n  };\r\n  return invalidMovment[keyPress] === currentDirection;\r\n}\r\nfunction getInitialFoods(amount) {\r\n  const initialFoods = [];\r\n  for (let i = 0; i < amount; i++) {\r\n    const food = {\r\n      active: false,\r\n    };\r\n    initialFoods.push(food);\r\n  }\r\n  return initialFoods;\r\n}\r\n// vissa snakes lyckas inte äta foods? är det en bugg med konstiga synkningar mot state när det är så många?\r\n// det verkar inte heller fungera med positioneringen indexof. Ormarna hamnar ibland precis brevid varandra.\r\nfunction getSnakesInStartingPosition(snakes, canvasSettings) {\r\n  for (let i = 0, len = snakes.length; i < len; i++) {\r\n    const snake = snakes[i];\r\n    snake.direction = snake.actions[i % 4];\r\n    snake.moves = [];\r\n    let pos;\r\n    switch (snake.direction) {\r\n      case 'right':\r\n        pos = getRandomStartingPosLeft(snakes, canvasSettings.height);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - gridSize,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - (gridSize * 2),\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - (gridSize * 3),\r\n          y: pos.y,\r\n        }];\r\n        break;\r\n      case 'left':\r\n        pos = getRandomStartingPosRight(snakes, canvasSettings);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + gridSize,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + (gridSize * 2),\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + (gridSize * 3),\r\n          y: pos.y,\r\n        }];\r\n        break;\r\n      case 'up':\r\n        pos = getRandomStartingPosBottom(snakes, canvasSettings);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + gridSize,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + (gridSize * 2),\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + (gridSize * 3),\r\n        }];\r\n        break;\r\n      case 'down':\r\n        pos = getRandomStartingPosTop(snakes, canvasSettings.width);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - gridSize,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - (gridSize * 2),\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - (gridSize * 3),\r\n        }];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return snakes;\r\n}\r\n\r\nfunction getRandomStartingPosTop(snakes, canvasWidth) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'down' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].x))];\r\n\r\n  const margin = gridSize * 8;\r\n  const xMax = canvasWidth - (margin * 2);\r\n  const y = gridSize * 2;\r\n  const x = getRandomStartingPos(xMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosBottom(snakes, canvasSettings) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'up' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].x))];\r\n\r\n  const margin = gridSize * 8;\r\n  const xMax = canvasSettings.width - (margin * 2);\r\n  const y = canvasSettings.height - (gridSize * 3);\r\n  const x = getRandomStartingPos(xMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosRight(snakes, canvasSettings) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'left' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].y))];\r\n\r\n  const margin = gridSize * 8;\r\n  const yMax = canvasSettings.height - (margin * 2);\r\n  const x = canvasSettings.width - (gridSize * 3);\r\n  const y = getRandomStartingPos(yMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosLeft(snakes, canvasHeight) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'right' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].y))];\r\n\r\n  const margin = gridSize * 8;\r\n  const yMax = canvasHeight - (margin * 2);\r\n  const x = gridSize * 2;\r\n  const y = getRandomStartingPos(yMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPos(max, margin, existingValues) {\r\n  const value = Math.round((Math.random() * max) / gridSize) * gridSize + margin;\r\n  const posTaken = existingValues.some(v => v === value || v === value - gridSize || v === value + gridSize);\r\n\r\n  if (posTaken) {\r\n    return getRandomStartingPos(max, margin, existingValues, gridSize);\r\n  }\r\n  return value;\r\n}\r\nfunction getRandomCanvasPositionMargin(yMax, xMax) {\r\n  const x = Math.round((Math.random() * (xMax - (gridSize * 14))) / gridSize) * gridSize + (gridSize * 4);\r\n  const y = Math.round((Math.random() * (yMax - (gridSize * 2))) / gridSize) * gridSize + (gridSize * 2);\r\n  return { x, y };\r\n}\r\n// denna function är inte så lätt, kan troligen förenklas\r\nfunction detectOpponentCollision(snakes, eatOpponents) {\r\n  for (let i = 0, len = snakes.length; i < len; i++) {\r\n    if (snakes[i].dead) {\r\n      // om den redan är död så fortsätt. t.ex. en headon så kör jag båda två till dead direkt.\r\n      continue;\r\n    }\r\n    const currentSnake = snakes[i];\r\n    for (let j = 0; j < len; j++) {\r\n      // om opponents är död så ska man inte kunna krocka med den. döda snakes har ju fortfarande coordinater. alt är att ta bort coordinaterna\r\n      if (j === i || snakes[j].dead) {\r\n        continue;\r\n      }\r\n      const opponentSnake = snakes[j];\r\n      // lägga till en function där om man äter body[1] så där opponent?\r\n      for (let k = 0, len2 = opponentSnake.body.length; k < len2; k++) {\r\n        const collision = opponentSnake.body[k].x === currentSnake.body[0].x && opponentSnake.body[k].y === currentSnake.body[0].y;\r\n        if (collision) {\r\n          if (k === 0) {\r\n            currentSnake.dead = true;\r\n            opponentSnake.dead = true;\r\n            // collision head>head\r\n          } else if (eatOpponents) {\r\n            // snakes\r\n            if (k === 1) {\r\n              opponentSnake.dead = true;\r\n            } else {\r\n              opponentSnake.body.length = k;\r\n              len2 = k;\r\n\r\n              // snakes[j].body.length = k;\r\n            }\r\n            // kan jag använda opponentSnakeBody istället för snakes[j].body\r\n            // opponentSnakeBody.length = k;?\r\n          } else {\r\n            currentSnake.dead = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return snakes;\r\n}\r\n\r\nfunction detectSelfCollision(snake) {\r\n  const { body } = snake;\r\n  if (body.length < 5) {\r\n    return false;\r\n  }\r\n  // denna är nog inte lika snabb som for loopen?\r\n  const collision = body.slice(4).some(b => b.x === body[0].x && b.y === body[0].y);\r\n  return collision;\r\n  /*\r\n    for (let i = 4, len = body.length; i < len; i++) {\r\n      const selfCollison = body[i].x === body[0].x && body[i].y === body[0].y;\r\n      if (selfCollison) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n    */\r\n}\r\n\r\nfunction detectWallCollision(snakeHead, maxHeight, maxWidth) {\r\n  const leftCollison = snakeHead.x < 0;\r\n  const topCollison = snakeHead.y < 0;\r\n  const rightCollison = snakeHead.x > maxWidth - gridSize;\r\n  const bottomCollison = snakeHead.y > maxHeight - gridSize;\r\n  return leftCollison || topCollison || rightCollison || bottomCollison;\r\n}\r\n/*\r\n  util functions that i can move to snakeUtil.js\r\n  */\r\nexport {\r\n  detectOpponentCollision,\r\n  getRandomCanvasPositionMargin,\r\n  getSnakesInStartingPosition,\r\n  getInitialFoods,\r\n  detectWallCollision,\r\n  detectSelfCollision,\r\n  getRandomStartingPosLeft,\r\n  getRandomStartingPosRight,\r\n  getRandomStartingPosBottom,\r\n  getRandomStartingPosTop,\r\n  isInvalidMove,\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nclass Tetris extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                tetris.js\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tetris;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseFinalResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.replayGame = this.replayGame.bind(this);\r\n  }\r\n\r\n  replayGame() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  /*\r\nskriv ut vinnaren och hur lång tid gamet tog\r\n(använd minigame.ticks och minigame.difficulty för att räkna ut sekunder)\r\nminigame.winners inner håller vinnare/vinnarna.\r\nkan vara så att winners inte finns om det snakes.length === 1\r\n men då är ju den \"vinnaren\". typ i coop singelplayer\r\npodium\r\n  */\r\n  render() {\r\n    const { gameFunc, game } = this.props;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h2\">Final score</Typography>\r\n          <Typography variant=\"h2\">{game.minigame.winners[0].name}</Typography>\r\n        </div>\r\n        <div className=\"align-bottom \">\r\n          <div>\r\n            <Button onClick={this.replayGame}>Replay game</Button>\r\n            <Button onClick={gameFunc.restart}>Re-host game</Button>\r\n            <Button onClick={gameFunc.quit}>Quit game</Button>\r\n            <Button onClick={() => alert('show results')}>Show results</Button>\r\n            <Button onClick={() => alert('start survey')}>Start survey</Button>\r\n            <Button>\r\n              <Link to=\"/create\">Create new game</Link>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseFinalResult.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseFinalResult;\r\n","import React, { PureComponent } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseEnd extends PureComponent {\r\n  render() {\r\n    const { game } = this.props;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography>{`hur seer detta ut konstigt med dollarsign?HostEnd toggleheader()${game.title}`}</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseEnd.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseEnd;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nfunction chunkify(a, nr) {\r\n  let n = nr;\r\n  if (n < 2) { return [a]; }\r\n  const len = a.length;\r\n  const out = [];\r\n  let i = 0;\r\n  let size;\r\n  if (len % n === 0) {\r\n    size = Math.floor(len / n);\r\n    while (i < len) {\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  } else {\r\n    while (i < len) {\r\n      size = Math.ceil((len - i) / n);\r\n      n -= 1;\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  }\r\n  return out;\r\n}\r\nfunction createSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const snakes = [];\r\n  // mocka flera spelare genom att loopa på x och sen byt player.key till playerKeys[0]\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      actions: ['up', 'down', 'right', 'left'],\r\n      score: 0,\r\n      color: SNAKE_COLORS[i % SNAKE_COLORS.length],\r\n      name: SNAKE_NAMES[i % SNAKE_NAMES.length],\r\n      // start positioner ska randomas helt, inklusive direction, varanan ska starta nereifrån upp, uppifrån ner, höger till vänster, vänster till göger..\r\n      // fyra olika random metoder och y måste vara unikt för de som kör horizontelt och x måste vara unikt för som kör vertikalt, kanske även ett mellanrum mellan varje snake\r\n      id: i,\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\n\r\nfunction createTeamSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 100;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const nrOfSnakes = playerKeys;\r\n  // coop snakes här vil jag kunna hitta ultimata updelningen. man ska kunna vara 2 eller 4 per orm. om det är ojämnt antal får man vara en 3a.\r\n  // chunkify tar in playerkeys och en siffra på hur många snakes det ska vara och delar upp dem men då behöver jag veta hur många snakes jag vill ha?\r\n  // kanske får göra en helt egen chunkify? behöver veta hur mågna snakes jag vill ha och sen kanske det löser sig självt i loopen\r\n\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      direction: 'right',\r\n      id: i,\r\n      score: 0,\r\n      body: [{\r\n        x: startingX,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - gridSize,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 2),\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 3),\r\n        y: startingY,\r\n      }],\r\n\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\nfunction createCoopSnakes(players) {\r\n  // alla players kontrollerar samma snake. antingen med en knapp var, eller så har alla alla knappar?\r\n  // kanske en spelare får bara 1 klick? samarbetesövning.\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 90;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const snake = {\r\n    playerKeys,\r\n    direction: 'right',\r\n    actions: ['up', 'down', 'right', 'left'],\r\n    score: 0,\r\n    color: SNAKE_COLORS[Math.floor(Math.random() * SNAKE_COLORS.length)],\r\n    name: SNAKE_NAMES[Math.floor(Math.random() * SNAKE_NAMES.length)],\r\n    id: 0,\r\n    body: [{\r\n      x: startingX,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - gridSize,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 2),\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 3),\r\n      y: startingY,\r\n    }],\r\n  };\r\n  snakes.push(snake);\r\n  return snakes;\r\n}\r\nconst SNAKE_COLORS = ['#F44336',\r\n  '#9C27B0',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FFEB3B',\r\n  '#FF9800',\r\n  '#607D8B',\r\n  '#795548',\r\n  '#E91E63',\r\n  '#3F51B5',\r\n  '#673AB7',\r\n  '#00BCD4',\r\n  '#03A9F4',\r\n  '#8BC34A',\r\n  '#CDDC39',\r\n  '#009688',\r\n  '#FFC107',\r\n  '#FF5722',\r\n];\r\nconst SNAKE_NAMES = ['Stan',\r\n  'Jane',\r\n  'Sara',\r\n  'Dan',\r\n  'Lisa',\r\n  'Joe',\r\n  'Rose',\r\n  'Ray',\r\n  'Lyra',\r\n  'Sam',\r\n  'Lucy',\r\n  'Ben',\r\n  'Noa',\r\n  'Mark',\r\n  'Eve',\r\n  'Ned',\r\n  'Ann',\r\n  'Todd'];\r\nconst gridSize = 20;\r\nclass SnakeStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startCounter();\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    let counter = 5;\r\n    const i = setInterval(() => {\r\n      counter -= 1;\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n    let snakes = [];\r\n    const snakeGenerator = {\r\n      classic: createSnakes(game.players),\r\n      team: createTeamSnakes(game.players),\r\n      coop: createCoopSnakes(game.players),\r\n    };\r\n    snakes = snakeGenerator[game.minigame.multiplayerMode];\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const actionChunks = chunkify(snakes[i].actions, snakes[i].playerKeys.length);\r\n      for (let j = 0; j < snakes[i].playerKeys.length; j++) {\r\n        const player = game.players[snakes[i].playerKeys[j]];\r\n        player.snakeId = snakes[i].id;\r\n        player.controlActions = actionChunks[j];\r\n      }\r\n    }\r\n\r\n    game.minigame.snakes = snakes;\r\n    game.phase = 'gameplay';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnakeStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeStarting;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\nimport * as minigameUtil from '../../common/utils/minigameUtil';\r\n\r\nlet ctx;\r\nlet canvas;\r\nconst gridSize = 20;\r\n\r\nclass Golf extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // för att göra det mer smooth. så behöver jag typ dela upp ätandet så att det sker i flera tick? för just nu är ett tick storleken på food och allt annat\r\n    // lite delay när jag ökar speeden. är det olika delay för olika snakes? optimera senare.\r\n    const canvasHeight = Math.floor(window.innerHeight / gridSize) * gridSize;\r\n    const canvasWidth = Math.floor(window.innerWidth / gridSize) * gridSize;\r\n    const nrOfFoods = props.game.minigame.snakes.length * 2;\r\n\r\n    this.state = {\r\n      gameTicker: null,\r\n      ticks: 0,\r\n      winners: [],\r\n      snakes: minigameUtil.getSnakesInStartingPosition(props.game.minigame.snakes, { height: canvasHeight, width: canvasWidth }),\r\n      foods: minigameUtil.getInitialFoods(nrOfFoods),\r\n      settings: {\r\n        snake: {\r\n          size: gridSize,\r\n          speed: props.game.minigame.difficulty,\r\n          border: '#000',\r\n          respawntime: 3,\r\n        },\r\n        food: {\r\n          background: '#EC5E0B',\r\n          border: '#73AA24',\r\n        },\r\n        canvas: {\r\n          height: canvasHeight,\r\n          width: canvasWidth,\r\n          background: '#F5F5F5',\r\n          border: '#000',\r\n        },\r\n      },\r\n    };\r\n\r\n    this.drawSnakes = this.drawSnakes.bind(this);\r\n    this.generateFood = this.generateFood.bind(this);\r\n    this.generateSnakes = this.generateSnakes.bind(this);\r\n    this.resetCanvas = this.resetCanvas.bind(this);\r\n    this.drawFood = this.drawFood.bind(this);\r\n    this.detectCollisions = this.detectCollisions.bind(this);\r\n    this.initControllerListener = this.initControllerListener.bind(this);\r\n    this.generateFoods = this.generateFoods.bind(this);\r\n    this.isEndGame = this.isEndGame.bind(this);\r\n    this.togglePausGame = this.togglePausGame.bind(this);\r\n    this.renderOverlay = this.renderOverlay.bind(this);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const {\r\n      snakes, settings,\r\n    } = this.state;\r\n    const app = document.querySelector('#snakeboard');\r\n\r\n    canvas = app.querySelector('canvas');\r\n    ctx = canvas.getContext('2d');\r\n    this.resetCanvas();\r\n    this.generateSnakes();\r\n    this.generateFoods();\r\n    const that = this;\r\n    const gameTicker = setInterval(() => {\r\n      if (that.state.isPaused) {\r\n        if (that.state.overlay) {\r\n          return;\r\n        }\r\n        that.renderOverlay();\r\n        return;\r\n      }\r\n      if (that.state.winners.length === 0) {\r\n        that.resetCanvas();\r\n        that.generateSnakes();\r\n        that.generateFoods();\r\n        that.detectCollisions();\r\n        that.isEndGame();\r\n      } else {\r\n        that.nextPhase();\r\n      }\r\n    }, settings.snake.speed);\r\n\r\n    this.setState({ gameTicker });\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      this.initControllerListener(snake);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    // kan jag ha det här?\r\n\r\n    return false;\r\n  }\r\n\r\n  togglePausGame = () => {\r\n    // async!!\r\n    this.setState(state => ({\r\n      isPaused: !state.isPaused,\r\n      overlay: false,\r\n    }));\r\n  }\r\n\r\n  nextPhase() {\r\n    const {\r\n      gameTicker, snakes, winners, ticks,\r\n    } = this.state;\r\n    const { game, gameFunc } = this.props;\r\n    clearInterval(gameTicker);\r\n    game.minigame.snakes = snakes;\r\n    game.minigame.winners = winners;\r\n    game.minigame.ticks = ticks;\r\n    game.phase = 'final_result';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  initControllerListener(snake) {\r\n    const { game } = this.props;\r\n    const snakeRef = fire.database().ref(`/games/${game.key}/minigame/snakes/${snake.id}`);\r\n    const that = this;\r\n    snakeRef.on('value', (snapshot) => {\r\n      const nextSnake = snapshot.val();\r\n      if (nextSnake && !that.state.isPaused) {\r\n        that.setState((state) => {\r\n          const snakes = [...state.snakes];\r\n          // kolla så att detta är okej sätt, blir snakes index alltid rätt kopplat till snake.id? ska jag fixa ett riktigt ID för att vara säker? alltså ett pushid\r\n          if (nextSnake.move) {\r\n            snakes[snake.id].moves.push(nextSnake.move);\r\n          }\r\n          return {\r\n            snakes,\r\n          };\r\n        });\r\n      } else {\r\n        console.log('move error');\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  isEndGame() {\r\n    const { snakes } = this.state;\r\n    const { game: { minigame: { gamemode, racetarget } } } = this.props;\r\n\r\n    // if survavalmode continue game if more than 1 snake is alive\r\n    // kolla performance på denna filter funktion jämfört med loopen under\r\n    if (gamemode === 'survival' && snakes.filter(s => !s.dead).length > 1) {\r\n      return;\r\n      /*\r\n      const l = snakes.length;\r\n      let alive = 0;\r\n      for (let i = 0; i < l; i++) {\r\n        if (!snakes[i].dead) {\r\n          alive += 1;\r\n        }\r\n        if (alive > 1) {\r\n          return;\r\n        }\r\n      }\r\n      */\r\n    }\r\n    // if race continue game if no one has reached racetarget\r\n    if (gamemode === 'race' && !snakes.some(s => s.body.length >= racetarget)) {\r\n      return;\r\n    }\r\n\r\n    // its gameover, lets find the winner/winners\r\n    let winners = [];\r\n    if (gamemode === 'survival') {\r\n      const alive = snakes.filter(s => !s.dead);\r\n      if (alive.length === 1) {\r\n        winners = alive;\r\n      } else {\r\n        const winner = snakes.reduce((prev, current) => ((prev.score > current.score) ? prev : current));\r\n        winners.push(winner);\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      winners = snakes.filter(s => s.body.length >= racetarget);\r\n    }\r\n    this.setState(() => ({\r\n      winners,\r\n      isPaused: true,\r\n      overlay: false,\r\n    }));\r\n\r\n    /*\r\n\r\n    if (gamemode === 'survival') {\r\n      if (snakes.length === 1 && snakes[0].dead) {\r\n        winners.push(snakes[0]);\r\n      } else {\r\n        for (let i = 0; i < l; i++) {\r\n          if (!snakes[i].dead) {\r\n            winners.push(snakes[i]);\r\n          }\r\n          // should not be possible as she check for this first thing in this function\r\n          // if (winners.length > 1) {\r\n          //  return;\r\n          // }\r\n        }\r\n        // om det inte finns någon levande alla så betyder det att de sista tog samtidigt. då vinner den som är längst av alla\r\n        if (winners.length === 0) {\r\n          let winnerIndex = 0;\r\n          let highestScore = 0;\r\n          for (let i = 0; i < l; i++) {\r\n            if (snakes[i].score > highestScore) {\r\n              winnerIndex = i;\r\n              highestScore = snakes[i].score;\r\n            }\r\n          }\r\n          winners.push(snakes[winnerIndex]);\r\n        }\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      for (let i = 0; i < l; i++) {\r\n        if (snakes[i].body.length >= racetarget) {\r\n          winners.push(snakes[i]);\r\n        }\r\n      }\r\n    }\r\n    if (winners.length > 0) {\r\n      this.setState(() => ({\r\n        winners,\r\n        isPaused: true,\r\n        overlay: false,\r\n      }));\r\n    }\r\n    */\r\n  }\r\n\r\n  resetCanvas() {\r\n    const { settings } = this.state;\r\n    canvas.width = settings.canvas.width;\r\n    canvas.height = settings.canvas.height;\r\n\r\n    ctx.fillStyle = settings.canvas.background;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  generateSnakes() {\r\n    // i alla såna här dpelarspecifika metoder måste jag ta in vilken snake/player det gäller\r\n    const { snakes, foods, settings } = this.state;\r\n    const { game } = this.props;\r\n    const nextSnakes = [];\r\n    const teleportSnakes = !game.minigame.wallCollision;\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      // behöver jag göra en copy? spelar det någon roll?\r\n      const snake = snakes[i];\r\n      if (snake.respawning) {\r\n        if (Date.now() > snake.respawntime) {\r\n          snake.dead = false;\r\n          snake.respawning = false;\r\n        }\r\n        nextSnakes.push(snake);\r\n        continue;\r\n      } else if (snake.dead) {\r\n        if (game.minigame.gamemode === 'survival') {\r\n          snake.body = [];\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        } else if (game.minigame.gamemode === 'race') {\r\n          const xMax = settings.canvas.width - gridSize;\r\n          const yMax = settings.canvas.height - gridSize;\r\n          const startPos = minigameUtil.getRandomCanvasPositionMargin(yMax, xMax);\r\n          snake.body = [{\r\n            x: startPos.x,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - gridSize,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 2),\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 3),\r\n            y: startPos.y,\r\n          }];\r\n          snake.direction = 'right';\r\n          snake.respawning = true;\r\n          snake.respawntime = Date.now() + (settings.snake.respawntime * 1000);\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        }\r\n      }\r\n      // testa denna perfomance mot tidigare switch. ngåon skillnad? kan tänka mig att denna är lite långsammare då jag måste definera alla 4directions varje gång\r\n      const movement = {\r\n        up: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y === 0) ? canvas.height - gridSize : snake.body[0].y - gridSize,\r\n        },\r\n        down: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y >= canvas.height - gridSize) ? 0 : snake.body[0].y + gridSize,\r\n        },\r\n        right: {\r\n          x: teleportSnakes && (snake.body[0].x >= canvas.width - gridSize) ? 0 : snake.body[0].x + gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n        left: {\r\n          x: teleportSnakes && (snake.body[0].x === 0) ? canvas.width - gridSize : snake.body[0].x - gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n      };\r\n      const nextMove = snake.moves.shift();\r\n      if (!minigameUtil.isInvalidMove(nextMove, snake.direction)) {\r\n        snake.direction = nextMove;\r\n      }\r\n\r\n      // The snake moves by adding a piece to the beginning \"this.snake.unshift(coordinate)\" and removing the last piece \"this.snake.pop()\"\r\n      // Except when it eats the food in which case there is no need to remove a piece and the added piece will make it grow\r\n      const coordinate = movement[snake.direction];\r\n      snake.body.unshift(coordinate);\r\n\r\n      const collidedFood = foods.find(f => f.active && snake.body[0].x === f.x && snake.body[0].y === f.y);\r\n\r\n      if (collidedFood) {\r\n        snake.score += 10;\r\n        collidedFood.active = false;\r\n      } else {\r\n        snake.body.pop();\r\n      }\r\n      nextSnakes.push(snake);\r\n    }\r\n    this.setState(state => ({\r\n      snakes: nextSnakes,\r\n      foods,\r\n      ticks: state.ticks + 1,\r\n    }));\r\n    // kan det inte blir problem här? litar jag på att state.snakes hunnit updateras innan de ritas ut? ska jag inte skicka in det? drawSnakes(nextSNakes)\r\n    // och sen updaterar jag state efteråt?\r\n    this.drawSnakes(nextSnakes);\r\n  }\r\n\r\n  drawSnakes(nextSnakes) {\r\n    const { settings, ticks } = this.state;\r\n    ctx.globalCompositeOperation = 'multiply';\r\n    ctx.strokestyle = settings.snake.border;\r\n    for (let i = 0, len = nextSnakes.length; i < len; i++) {\r\n      const snake = nextSnakes[i];\r\n      if (snake.respawning && ticks % 2 === 0) {\r\n        ctx.fillStyle = settings.canvas.background;\r\n      } else {\r\n        ctx.fillStyle = snake.color;\r\n      }\r\n      // Draw each piece\r\n\r\n      // om två snakes är över varandra så finns en schysst style för det som han gick igenom på öredev. där färgerna från båda kan blandas till en ljusare eller mörkar.\r\n      for (let j = 0, len2 = snake.body.length; j < len2; j++) {\r\n        const bodyPos = snake.body[j];\r\n        ctx.fillRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n        ctx.strokeRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n      }\r\n\r\n\r\n      // this.game.direction = this.game.nextDirection;\r\n    }\r\n    /*\r\n        jag kör rakt av på direction, verkar fungera och snabbare response då? om jag vill ha tillbaka nextdirection så ta fram denna metod och sätt i snakeListenern att den ska sätta nextDirection\r\n        this.setState(function (state, props) {\r\n            let snakes = state.snakes;\r\n            for (let i = 0; i < snakes.length; i++) {\r\n                snakes[i].direction = snakes[i].nextDirection;\r\n            }\r\n            return {\r\n                snakes: snakes,\r\n            };\r\n        });\r\n        */\r\n  }\r\n\r\n  generateFoods() {\r\n    const { foods } = this.state;\r\n    // fungerar detta? const och ingen kopia? blir det updaterat? risk att allt blir object istället för arrays? cost [foods] = this.state?\r\n    // const nextFoods = [...foods ];\r\n    for (let i = 0, len = foods.length; i < len; i++) {\r\n      let food = foods[i];\r\n      if (!food.active) {\r\n        food = this.generateFood();\r\n      }\r\n      this.drawFood(food);\r\n      foods[i] = food;\r\n    }\r\n    this.setState(() => ({\r\n      foods,\r\n    }));\r\n  }\r\n\r\n  generateFood() {\r\n    const { snakes, settings } = this.state;\r\n\r\n    const xMax = settings.canvas.width - gridSize;\r\n    const yMax = settings.canvas.height - gridSize;\r\n\r\n    const x = Math.round((Math.random() * xMax) / gridSize) * gridSize;\r\n    const y = Math.round((Math.random() * yMax) / gridSize) * gridSize;\r\n    /*\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      const collision = snake.body.some(b => b.x === x && b.y === y);\r\n      if (collision) {\r\n        return this.generateFood();\r\n      }\r\n    }\r\n    */\r\n    // fungerar denna tro?\r\n    const collision = snakes.some(s => s.body.some(b => b.x === x && b.y === y));\r\n    if (collision) {\r\n      return this.generateFood();\r\n    }\r\n    return {\r\n      active: true,\r\n      x,\r\n      y,\r\n    };\r\n  }\r\n\r\n  drawFood(food) {\r\n    const { settings } = this.state;\r\n    // denna metod kallas lite väl många gånger?? ioptimera?\r\n    ctx.fillStyle = settings.food.background;\r\n    ctx.strokestyle = settings.food.border;\r\n\r\n    ctx.fillRect(food.x, food.y, gridSize, gridSize);\r\n    ctx.strokeRect(food.x, food.y, gridSize, gridSize);\r\n  }\r\n\r\n  detectCollisions() {\r\n    // bryt ut de olika detectcollision till purecfunctions? optiering viktigt\r\n    // ha olika modes för krock med motståndare\r\n    // 2. krock med motståndare så händer inget\r\n    // 3. krock med motståndare så äts motståndaren upp (head-on-head så dör båda)\r\n    // 4. korck med motståndare så dör man\r\n    // modes krock med vägg:\r\n    // 1. man dör\r\n    // 2. man kommer ut på andra sidan\r\n    // vad händer om man får en selfcollision sammtidigt som någon får en opponentcollision i den?\r\n    // mode dö:\r\n    // när man dör så får man återställs man till liten mask\r\n    // när man dör så är man död för alltid\r\n\r\n    // Self collison\r\n    // It's impossible for the first 3 pieces of the snake to self collide so the loop starts at 4\r\n\r\n    // fixa en bättre metod för alla snakes senare\r\n\r\n    // fundra och test som det här är den mest effektiva lösningen? eller om jag gör några checks i onödan?\r\n    // jag vill nog bara göra en gemensam setState call efter den här loopen. så alla ändringar för t.ex. handleDeath\r\n    let { snakes } = this.state;\r\n    const { game: { minigame } } = this.props;\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      if (snakes[i].dead) {\r\n        continue;\r\n      }\r\n      if (minigameUtil.detectSelfCollision(snakes[i])) {\r\n        // vilken av dessa fungerar?\r\n        snakes[i].dead = true;\r\n        // snakes[i].dead = true;\r\n\r\n        // this.handleDeath(snake);\r\n      }\r\n      if (minigame.wallCollision && minigameUtil.detectWallCollision(snakes[i].body[0], canvas.height, canvas.width)) {\r\n        snakes[i].dead = true;\r\n      }\r\n    }\r\n\r\n    if (minigame.opponentCollision) {\r\n      // här inne så ändrar jag om i snakes genom att döda dem som ska dödas och klyver om det ska klyvas osv. det som returneras ska vara korrekta snakes\r\n      snakes = minigameUtil.detectOpponentCollision(snakes, minigame.eatOpponents);\r\n    }\r\n    this.setState(() => ({\r\n      snakes,\r\n    }));\r\n  }\r\n\r\n  renderOverlay() {\r\n    const { ticks, snakes, winners } = this.state;\r\n    const { game } = this.props;\r\n    this.setState(() => ({\r\n      overlay: true,\r\n    }));\r\n    ctx.globalAlpha = 0.4;\r\n    ctx.textAlign = 'center';\r\n    ctx.font = '100px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    if (ticks === 1) {\r\n      ctx.fillText('Click to start', canvas.width / 2, canvas.height / 2);\r\n    } else if (winners.length > 0) {\r\n      ctx.fillText('Game over', canvas.width / 2, canvas.height / 2);\r\n    } else {\r\n      ctx.fillText('Paused', canvas.width / 2, canvas.height / 2);\r\n    }\r\n    ctx.globalAlpha = 1;\r\n    ctx.font = '20px roboto';\r\n\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const snake = snakes[i];\r\n      if (!snake.body[0]) {\r\n        continue;\r\n      }\r\n      let headX = Math.max(gridSize, snake.body[0].x);\r\n      let headY = Math.max(gridSize, snake.body[0].y);\r\n      if (headX >= canvas.width) {\r\n        headX = canvas.width - (gridSize * 2);\r\n      }\r\n      if (headY >= canvas.height) {\r\n        headY = canvas.height - (gridSize * 2);\r\n      }\r\n      const snakeName = snake.playerKeys.length === 1 ? game.players[snake.playerKeys[0]].name : snake.name;\r\n      ctx.fillStyle = snake.color;\r\n\r\n      const namePosition = {\r\n        right: { textAlign: 'center', yPos: headY - (gridSize / 5) },\r\n        left: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        up: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        down: { textAlign: 'start', yPos: headY + (gridSize * 2) },\r\n      };\r\n      ctx.textAlign = namePosition[snake.direction].textAlign;\r\n      ctx.fillText(snakeName, headX, namePosition[snake.direction].yPos);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\" id=\"snakeboard\" role=\"button\" tabIndex={0} onClick={this.togglePausGame} onKeyDown={this.togglePausGame}>\r\n        <canvas />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolf.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default Golf;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nfunction chunkify(a, nr) {\r\n  let n = nr;\r\n  if (n < 2) { return [a]; }\r\n  const len = a.length;\r\n  const out = [];\r\n  let i = 0;\r\n  let size;\r\n  if (len % n === 0) {\r\n    size = Math.floor(len / n);\r\n    while (i < len) {\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  } else {\r\n    while (i < len) {\r\n      size = Math.ceil((len - i) / n);\r\n      n -= 1;\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  }\r\n  return out;\r\n}\r\nfunction createSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const snakes = [];\r\n  // mocka flera spelare genom att loopa på x och sen byt player.key till playerKeys[0]\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      actions: ['up', 'down', 'right', 'left'],\r\n      score: 0,\r\n      color: SNAKE_COLORS[i % SNAKE_COLORS.length],\r\n      name: SNAKE_NAMES[i % SNAKE_NAMES.length],\r\n      // start positioner ska randomas helt, inklusive direction, varanan ska starta nereifrån upp, uppifrån ner, höger till vänster, vänster till göger..\r\n      // fyra olika random metoder och y måste vara unikt för de som kör horizontelt och x måste vara unikt för som kör vertikalt, kanske även ett mellanrum mellan varje snake\r\n      id: i,\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\n\r\nfunction createTeamSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 100;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const nrOfSnakes = playerKeys;\r\n  // coop snakes här vil jag kunna hitta ultimata updelningen. man ska kunna vara 2 eller 4 per orm. om det är ojämnt antal får man vara en 3a.\r\n  // chunkify tar in playerkeys och en siffra på hur många snakes det ska vara och delar upp dem men då behöver jag veta hur många snakes jag vill ha?\r\n  // kanske får göra en helt egen chunkify? behöver veta hur mågna snakes jag vill ha och sen kanske det löser sig självt i loopen\r\n\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      direction: 'right',\r\n      id: i,\r\n      score: 0,\r\n      body: [{\r\n        x: startingX,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - gridSize,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 2),\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 3),\r\n        y: startingY,\r\n      }],\r\n\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\nfunction createCoopSnakes(players) {\r\n  // alla players kontrollerar samma snake. antingen med en knapp var, eller så har alla alla knappar?\r\n  // kanske en spelare får bara 1 klick? samarbetesövning.\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 90;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const snake = {\r\n    playerKeys,\r\n    direction: 'right',\r\n    actions: ['up', 'down', 'right', 'left'],\r\n    score: 0,\r\n    color: SNAKE_COLORS[Math.floor(Math.random() * SNAKE_COLORS.length)],\r\n    name: SNAKE_NAMES[Math.floor(Math.random() * SNAKE_NAMES.length)],\r\n    id: 0,\r\n    body: [{\r\n      x: startingX,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - gridSize,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 2),\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 3),\r\n      y: startingY,\r\n    }],\r\n  };\r\n  snakes.push(snake);\r\n  return snakes;\r\n}\r\nconst SNAKE_COLORS = ['#F44336',\r\n  '#9C27B0',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FFEB3B',\r\n  '#FF9800',\r\n  '#607D8B',\r\n  '#795548',\r\n  '#E91E63',\r\n  '#3F51B5',\r\n  '#673AB7',\r\n  '#00BCD4',\r\n  '#03A9F4',\r\n  '#8BC34A',\r\n  '#CDDC39',\r\n  '#009688',\r\n  '#FFC107',\r\n  '#FF5722',\r\n];\r\nconst SNAKE_NAMES = ['Stan',\r\n  'Jane',\r\n  'Sara',\r\n  'Dan',\r\n  'Lisa',\r\n  'Joe',\r\n  'Rose',\r\n  'Ray',\r\n  'Lyra',\r\n  'Sam',\r\n  'Lucy',\r\n  'Ben',\r\n  'Noa',\r\n  'Mark',\r\n  'Eve',\r\n  'Ned',\r\n  'Ann',\r\n  'Todd'];\r\nconst gridSize = 20;\r\nclass GolfStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startCounter();\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    let counter = 5;\r\n    const i = setInterval(() => {\r\n      counter -= 1;\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n    let snakes = [];\r\n    const snakeGenerator = {\r\n      classic: createSnakes(game.players),\r\n      team: createTeamSnakes(game.players),\r\n      coop: createCoopSnakes(game.players),\r\n    };\r\n    snakes = snakeGenerator[game.minigame.multiplayerMode];\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const actionChunks = chunkify(snakes[i].actions, snakes[i].playerKeys.length);\r\n      for (let j = 0; j < snakes[i].playerKeys.length; j++) {\r\n        const player = game.players[snakes[i].playerKeys[j]];\r\n        player.snakeId = snakes[i].id;\r\n        player.controlActions = actionChunks[j];\r\n      }\r\n    }\r\n\r\n    game.minigame.snakes = snakes;\r\n    game.phase = 'gameplay';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  // skapa bara en klassic mode med en \"boll\" per spelare\r\n\r\n  // i golf.js så sno kod för att kunna skapa en golfbana med fysik osv.\r\n  // skapa firebase lyssnare till varje boll? likt snake kanske. men granska den lösningen dåden inte var så jättebra\r\n  // skapa en enkel golfcontroller som kan göra en swing, få ett powervärde och skicka värdet till firebaase och in i snake.js som slår till bollen utifrån värdet\r\n  // börja med en standard klubba/vinkel, i golfController ska man sen kunna ändra klubba innan varje slag.\r\n  // putter, wedge, iron 8, iron 6, driver är standard?\r\n  // övriga klubbtyper kan man köpa för ingame currency som man vinner efter varje hål?\r\n  // eller som kan kan köpa till sin \"profil\" kräver att jag börjar med inloggning till stagehoot. krävs också för att få till handikapp.\r\n  // kanske bara för golf man behöver logga in? eller har valet att kunna logga in med fördelen att spara progress etc?\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolfStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default GolfStarting;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass SnakeSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      racetarget: props.game.minigame.racetarget,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      eatOpponents: props.game.minigame.eatOpponents,\r\n      wallCollision: props.game.minigame.wallCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        wallCollision,\r\n        opponentCollision,\r\n        eatOpponents,\r\n        racetarget,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"survival\">Survival</MenuItem>\r\n                  <MenuItem value=\"race\">Race</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'race'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Snake length\"\r\n                                name=\"racetarget\"\r\n                                type=\"number\"\r\n                                value={racetarget}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('racetarget')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={wallCollision}\r\n                      onChange={this.handleChangeBool('wallCollision')}\r\n                      value=\"wallCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Wall collisions\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision && eatOpponents}\r\n                      disabled={!opponentCollision}\r\n                      onChange={this.handleChangeBool('eatOpponents')}\r\n                      value=\"eatOpponents\"\r\n                    />\r\n                )}\r\n                  label=\"Eat opponent on collision\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nSnakeSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeSetup;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass GolfSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      holes: props.game.minigame.holes,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator,\r\n        opponentCollision, holes, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        opponentCollision,\r\n        holes,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator,\r\n        opponentCollision, holes, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"classic\">Classic</MenuItem>\r\n                  <MenuItem value=\"wild\">Wild</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'classic'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"holes to play\"\r\n                                name=\"holes\"\r\n                                type=\"number\"\r\n                                value={holes}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('holes')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nGolfSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default GolfSetup;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PhaseSetup from './PhaseSetup';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport Snake from '../snake/Snake';\r\nimport Tetris from '../tetris/Tetris';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseEnd from './PhaseEnd';\r\nimport SnakeStarting from '../snake/SnakeStarting';\r\nimport Golf from '../golf/Golf';\r\nimport GolfStarting from '../golf/GolfStarting';\r\nimport SnakeSetup from '../snake/SnakeSetup';\r\nimport GolfSetup from '../golf/GolfSetup';\r\n\r\nclass Minigame extends PureComponent {\r\n  render() {\r\n    const { game, gameFunc } = this.props;\r\n    switch (game.gametype) {\r\n      case 'snake':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <SnakeSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <SnakeStarting game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'gameplay' && <Snake game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      case 'tetris':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <PhaseSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'gameplay' && <Tetris game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      case 'golf':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <GolfSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <GolfStarting game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'gameplay' && <Golf game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      default:\r\n        return (null);\r\n    }\r\n  }\r\n}\r\nMinigame.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default Minigame;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../base';\r\nimport Quiz from '../quiz/host/Quiz';\r\nimport Minigame from '../minigame/host/Minigame';\r\n\r\nclass Host extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n      gameId: localStorage.getItem('RecentGameId') || '',\r\n      password: '',\r\n\r\n    };\r\n    this.updateGame = this.updateGame.bind(this);\r\n    this.fetchGame = this.fetchGame.bind(this);\r\n    this.initGameListiner = this.initGameListiner.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.quitGame = this.quitGame.bind(this);\r\n    this.endGame = this.endGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    updateGame(gameupdate) {\r\n      const { showSnackbar } = this.props;\r\n      const { game } = this.state;\r\n      // se till att inte updatera game.players...\r\n      // game som kommer in här ska bara innehålla det som ska uppdateras.\r\n      // updateras med gamesettings, phasechanges, currenquestionId etc\r\n      fire.database().ref(`games/${game.key}`).update(gameupdate, (error) => {\r\n        if (error) {\r\n          const snack = {\r\n            variant: 'error',\r\n            message: 'Unexpected internal error',\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n    }\r\n\r\n    restartGame() {\r\n      const game = {};\r\n      game.players = [];\r\n      game.phase = 'setup';\r\n      this.updateGame(game);\r\n    }\r\n\r\n    quitGame() {\r\n      const { toggleHeader } = this.props;\r\n      this.updateGame({ phase: null });\r\n      toggleHeader(true);\r\n    }\r\n\r\n    endGame() {\r\n      this.updateGame({ phase: 'final_result' });\r\n    }\r\n\r\n\r\n    fetchGame() {\r\n      const { gameId, password } = this.state;\r\n      const { showSnackbar, toggleHeader } = this.props;\r\n      const that = this;\r\n      fire.database().ref('games').orderByChild('gameId').equalTo(gameId)\r\n        .once('value', (snapshot) => {\r\n          if (snapshot.val()) {\r\n            let game;\r\n            snapshot.forEach((child) => {\r\n              game = child.val();\r\n            });\r\n            if (game.password === password) {\r\n              that.initGameListiner(game.key);\r\n              toggleHeader();\r\n            } else {\r\n              const snack = {\r\n                variant: 'error',\r\n                message: 'Could not find matching game',\r\n              };\r\n              showSnackbar(snack);\r\n            }\r\n          } else {\r\n            const snack = {\r\n              variant: 'info',\r\n              message: 'No game found',\r\n            };\r\n            showSnackbar(snack);\r\n          }\r\n        });\r\n    }\r\n\r\n    initGameListiner(gameKey) {\r\n      const gameRef = fire.database().ref(`games/${gameKey}`);\r\n      const that = this;\r\n      gameRef.on('value', (snapshot) => {\r\n        const game = snapshot.val();\r\n        if (!game.phase) {\r\n          game.phase = 'setup';\r\n        }\r\n        if (game) {\r\n          // kan blir problem med asynch setstate?\r\n          that.setState({\r\n            game,\r\n          });\r\n        } else {\r\n          that.setState({\r\n            game: '',\r\n          });\r\n        }\r\n      });\r\n      // koppla game till gameKey\r\n      // lägg till en likadan listener i Play.\r\n      // hosts gamelistiner ska lyssna på alla ändringar. Play ska inte lyssna på andra players ändringar om det går. något att optimera i framtiden.\r\n      // ett alt är att lyfta ut Players till en egen root? kan lägga phase och currentq i en game.state och sen är det allt som Player lyssnar på?\r\n      // men play behöver också behöva synca sin egna player.\r\n    }\r\n\r\n    render() {\r\n      // behöver bara updatera phase till firebase när det är phases som play bryr sig om. t.ex. inte setup då play bara kan connecta till games som är i phase==connection\r\n      // lägg till två rutor här för att söka fram ett game med hjälp av gameid och pass.\r\n\r\n      // strukturera filerna för host och play. kommentera i varje fil vad syftet med den är. vad den ska updatera i game etc.\r\n      // HostSetup updates settings and sets phase to connection on action\r\n      // connection shows players and sets phase to starting on action\r\n      // starting shows a countdown sets phase to awating_question and currentQuestion to 0(or some id) after countdown\r\n      // awaiting_question shows countdown and sets phase to show question after countdown\r\n      // show_question shows question and sets phase to answer after countdown\r\n      // answer shows q&a, countdown, nrPlayersAnswered, sets phase to result_question after countdown\r\n      // result_question shows stats about the answers, correct answer, hightscorelist etc, sets phase to awaiting_question and currentQuestion++ on action.\r\n      // result_question sets phase to final_result if questions are all done.\r\n      // final_result shows result of all players. top 3 and/or all. sets phase to end on action\r\n      // end shows options for replay, export result, etc.\r\n      const { gameId, password, game } = this.state;\r\n      const { showSnackbar, toggleHeader } = this.props;\r\n      const gameFunctions = {\r\n        update: this.updateGame,\r\n        restart: this.restartGame,\r\n        end: this.endGame,\r\n        quit: this.quitGame,\r\n      };\r\n      if (!game.phase) {\r\n        return (\r\n          <div className=\"page-container host-page\">\r\n            <FormControl>\r\n              <TextField\r\n                label=\"Game PIN\"\r\n                name=\"Game ID\"\r\n                value={gameId}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('gameId')}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <TextField\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                margin=\"normal\"\r\n                value={password}\r\n                onChange={this.handleChange('password')}\r\n              />\r\n            </FormControl>\r\n            <Button onClick={this.fetchGame} variant=\"contained\">Fetch</Button>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className=\"page-container host-page\">\r\n          {game.gametype === 'quiz' && <Quiz game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'snake' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'tetris' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'golf' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nHost.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  toggleHeader: PropTypes.func.isRequired,\r\n};\r\nexport default Host;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseConnection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            authId: '',\r\n            playerCreated: false,\r\n        };\r\n        this.createPlayer = this.createPlayer.bind(this);\r\n        this.generateName = this.generateName.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        //problem vid restart så skapas en ny användare. test spara playerkey till localhost och testa använda den keyn om den passar\r\n        if (!this.props.playerKey && this.props.game.quiz.nameGenerator) {\r\n            this.props.addPlayer(this.generatePlayer());\r\n        }\r\n    }\r\n    createPlayer() {\r\n        //validera så att namnet inte är taget.\r\n        let player = {\r\n            name: this.state.name,\r\n            score: 0,\r\n\r\n        }\r\n        this.props.addPlayer(player);\r\n        this.setState({ playerCreated: true });\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    generatePlayer() {\r\n        //skriv upp en lista med namn. kanske använda två arrayer en med adjekktiv och en med substantiv \"crazy tomato\" etc. \r\n        //använd generateName(this.game.players) den randomar ett namn, kollar om namnet redan finns och randomar igen isåfall.\r\n        //randomar xx antal gånger sen lägger den till ett extra adjektiv\r\n        let name = this.generateName();\r\n        let player = {\r\n            name: name,\r\n            score: 0,\r\n        }\r\n        return player;\r\n    }\r\n    generateName() {\r\n        let adjectives = [\"adamant\", \"adroit\", \"amatory\", \"animistic\", \"antic\", \"arcadian\", \"baleful\", \"bellicose\", \"bilious\", \"boorish\", \"calamitous\", \"caustic\", \"cerulean\", \"comely\", \"concomitant\", \"contumacious\", \"corpulent\", \"crapulous\", \"defamatory\", \"didactic\", \"dilatory\", \"dowdy\", \"efficacious\", \"effulgent\", \"egregious\", \"endemic\", \"equanimous\", \"execrable\", \"fastidious\", \"feckless\", \"fecund\", \"friable\", \"fulsome\", \"garrulous\", \"guileless\", \"gustatory\", \"heuristic\", \"histrionic\", \"hubristic\", \"incendiary\", \"insidious\", \"insolent\", \"intransigent\", \"inveterate\", \"invidious\", \"irksome\", \"jejune\", \"jocular\", \"judicious\", \"lachrymose\", \"limpid\", \"loquacious\", \"luminous\", \"mannered\", \"mendacious\", \"meretricious\", \"minatory\", \"mordant\", \"munificent\", \"nefarious\", \"noxious\", \"obtuse\", \"parsimonious\", \"pendulous\", \"pernicious\", \"pervasive\", \"petulant\", \"platitudinous\", \"precipitate\", \"propitious\", \"puckish\", \"querulous\", \"quiescent\", \"rebarbative\", \"recalcitant\", \"redolent\", \"rhadamanthine\", \"risible\", \"ruminative\", \"sagacious\", \"salubrious\", \"sartorial\", \"sclerotic\", \"serpentine\", \"spasmodic\", \"strident\", \"taciturn\", \"tenacious\", \"tremulous\", \"trenchant\", \"turbulent\", \"turgid\", \"ubiquitous\", \"uxorious\", \"verdant\", \"voluble\", \"voracious\", \"wheedling\", \"withering\", \"zealous\"];\r\n        let nouns = [\"ninja\", \"chair\", \"pancake\", \"statue\", \"unicorn\", \"rainbows\", \"laser\", \"senor\", \"bunny\", \"captain\", \"nibblets\", \"cupcake\", \"carrot\", \"gnomes\", \"glitter\", \"potato\", \"salad\", \"toejam\", \"curtains\", \"beets\", \"toilet\", \"exorcism\", \"stick figures\", \"mermaid eggs\", \"sea barnacles\", \"dragons\", \"jellybeans\", \"snakes\", \"dolls\", \"bushes\", \"cookies\", \"apples\", \"ice cream\", \"ukulele\", \"kazoo\", \"banjo\", \"opera singer\", \"circus\", \"trampoline\", \"carousel\", \"carnival\", \"locomotive\", \"hot air balloon\", \"praying mantis\", \"animator\", \"artisan\", \"artist\", \"colorist\", \"inker\", \"coppersmith\", \"director\", \"designer\", \"flatter\", \"stylist\", \"leadman\", \"limner\", \"make-up artist\", \"model\", \"musician\", \"penciller\", \"producer\", \"scenographer\", \"set decorator\", \"silversmith\", \"teacher\", \"auto mechanic\", \"beader\", \"bobbin boy\", \"clerk of the chapel\", \"filling station attendant\", \"foreman\", \"maintenance engineering\", \"mechanic\", \"miller\", \"moldmaker\", \"panel beater\", \"patternmaker\", \"plant operator\", \"plumber\", \"sawfiler\", \"shop foreman\", \"soaper\", \"stationary engineer\", \"wheelwright\", \"woodworkers\"];\r\n        let finalName = \"\";\r\n        let currentNames = [];\r\n        if (this.props.game.players) {\r\n            currentNames = Object.values(this.props.game.players).map(a => a.name);\r\n        }\r\n        for (let i = 0; i < 20; i++) {\r\n            let name = \"\";\r\n            if (i > 10) {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            } else {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            }\r\n            if (currentNames.indexOf(name) > -1) {\r\n                continue;\r\n            } else {\r\n                finalName = name;\r\n                break;\r\n            }\r\n        }\r\n        return finalName;\r\n\r\n    }\r\n\r\n    render() {\r\n        let players = this.props.game.players;\r\n        let playerName = '';\r\n        if (players && this.props.playerKey) {\r\n            playerName = players[this.props.playerKey].name;\r\n        }\r\n        let playersInLobby = [];\r\n        if (players) {\r\n            playersInLobby = Object.values(players);\r\n        }\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    {playerName &&\r\n                        <div >\r\n                            <div className=\"quiz-top-section\">\r\n                                <Typography variant=\"h5\">Welcome <span className=\"dynamic-text\">{playerName}</span>! </Typography>\r\n\r\n                            </div>\r\n                            <div className='quiz-middle-section'>\r\n                                <Typography paragraph variant=\"subtitle1\">Players in lobby</Typography>\r\n                                <Grid container>\r\n                                    {playersInLobby.map((player, index) =>\r\n                                        <Grid key={player.key} item md={3} xs={6}>\r\n                                            <Typography paragraph variant=\"body1\">{player.name}</Typography>\r\n                                        </Grid>)}\r\n                                </Grid>\r\n\r\n                            </div>\r\n                            <div className=\"quiz-bottom-section\">\r\n                                <Typography paragraph variant=\"subtitle1\">Waiting for the host to start the game</Typography>\r\n\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {!playerName &&\r\n                        <div>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('name')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    {playerName &&\r\n                        <div >\r\n                            <div className=\"quiz-top-section\">\r\n                            </div>\r\n                            <div className='quiz-middle-section'>\r\n                                <Typography variant=\"h5\">Welcome <span className=\"dynamic-text\">{playerName}</span>!</Typography>\r\n                                <Typography variant=\"subtitle1\"> Watch the screen, your name should show.</Typography>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"quiz-bottom-section\">\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {!playerName &&\r\n                        <div>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('name')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseConnection;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        <Typography variant=\"h5\">Starting quiz</Typography>\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <CountdownAnimation speed=\"slow\" />\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Starting quiz...</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        <Typography variant=\"h5\">Loading question</Typography>\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <CountdownAnimation speed=\"slow\" />\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the screen.</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">{this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the question on the screen!</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseShowQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\n\r\nclass PhaseAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: 0,\r\n      question: {},\r\n      hasAnswered: false,\r\n      selectedAnswer: '',\r\n    };\r\n    this.answerQuestion = this.answerQuestion.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question, startTime: Date.now() });\r\n  }\r\n\r\n    answerQuestion = (answer) => {\r\n      this.setState({ selectedAnswer: answer, hasAnswered: true });\r\n      const answerTime = Date.now() - this.state.startTime;\r\n      const correct = this.state.question.correctAnswers.indexOf(answer) > -1;\r\n      let score = 0;\r\n      // använd object speed={easy: 100, medium: 200, hard:300} score += speed[question.difficulty]\r\n      if (correct) {\r\n        switch (this.state.question.difficulty) {\r\n          case 'easy':\r\n            score += 100;\r\n            break;\r\n          case 'medium':\r\n            score += 200;\r\n            break;\r\n          case 'hard':\r\n            score += 300;\r\n            break;\r\n          case undefined:\r\n            score += 200;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        if (this.props.game.quiz.timelimit && this.state.question.timelimit) {\r\n          // let timeRemaining = this.state.question.timelimit - answerTime;\r\n          const timeFactorUsed = answerTime / (this.state.question.timelimit * 1000);\r\n          const timeBonus = Math.floor((score / Math.max(0.2, timeFactorUsed)) / 10);\r\n          score += timeBonus;\r\n        }\r\n      }\r\n      const playerAnswer = {\r\n        answer,\r\n        score,\r\n        answerTime,\r\n        questionId: this.state.question.id,\r\n      };\r\n      this.props.saveAnswer(playerAnswer);\r\n    };\r\n\r\n    render() {\r\n        let answers = [];\r\n        if (this.props.game) {\r\n            answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n        }\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            if (this.state.hasAnswered) {\r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                            <Typography paragraph variant=\"h5\">\r\n                                {this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className='quiz-middle-section'>\r\n                            <Typography variant=\"body1\">\r\n                                You answered: <span className=\"dynamic-text\">{this.state.selectedAnswer}</span> \r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-bottom-section\">\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } \r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                            <Typography variant=\"h5\">\r\n                                {this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-middle-and-bottom-section\">\r\n                            <Grid container spacing={8} className=\"full-height\">\r\n                                {answers.map((answer, index) =>\r\n                                    <Grid key={index} item xs={6}>\r\n                                        <AnswerOption answer={answer} index={index} answerQuestion={this.answerQuestion} remoteMode={true} />\r\n                                    </Grid>)}\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            \r\n        } \r\n            if (this.state.hasAnswered) {\r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                        </div>\r\n                        <div className='quiz-middle-section'>\r\n                            <Typography variant=\"body1\">\r\n                                You answered: <span className=\"dynamic-text\">{this.state.selectedAnswer}</span>\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-bottom-section\">\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } \r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-complete-section\">\r\n                            <Grid container spacing={8} className=\"full-height\">\r\n                                {answers.map((answer, index) =>\r\n                                    <Grid key={index} item xs={6}>\r\n                                        <AnswerOption answer={answer} index={index} answerQuestion={this.answerQuestion} />\r\n                                    </Grid>)}\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            \r\n        \r\n    }\r\n}\r\nexport default PhaseAnswer;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Podium from '../Podium';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: null\r\n        };\r\n        this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n    }\r\n    handleChange = panel => (event, expanded) => {\r\n        this.setState({\r\n            expanded: expanded ? panel : false,\r\n        });\r\n    };\r\n    getPlayerAnswerData() {\r\n        let answerDataList = [];\r\n\r\n        let currentPlayer = this.props.game.players[this.props.playerKey];\r\n\r\n        for (let i = 0; i < this.props.game.quiz.questions.length; i++) {\r\n            let answerData = {\r\n                question: {},\r\n                score: 0,\r\n                time: 0,\r\n                answer: '',\r\n            };\r\n            let question = this.props.game.quiz.questions[i];\r\n\r\n            if (currentPlayer.answers[question.id]) {\r\n                answerData.score = currentPlayer.answers[question.id].score;\r\n                answerData.answer = currentPlayer.answers[question.id].answer;\r\n                answerData.time = currentPlayer.answers[question.id].answerTime;\r\n            } else {\r\n                answerData.score = 0;\r\n                answerData.answer = \"no answer\";\r\n                answerData.time = 0;\r\n            }\r\n            answerData.question = question;\r\n\r\n            answerDataList.push(answerData);\r\n        }\r\n        return answerDataList;\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            let playerData = this.getPlayerAnswerData();\r\n            return (<div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                    <Typography variant=\"h5\">Quiz finished</Typography>\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"subtitle1\">You finished\r\n                        <span className=\"dynamic-text\">2nd</span> with a score of  <span className=\"dynamic-text\">560</span>\r\n                    </Typography>\r\n                    <ExpansionPanel>\r\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography >Final scoretable</Typography>\r\n                        </ExpansionPanelSummary>\r\n                        <ExpansionPanelDetails>\r\n                            <div>\r\n                                <Podium game={this.props.game} />\r\n                            </div>\r\n                        </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n                    <ExpansionPanel>\r\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Your own data</Typography>\r\n                        </ExpansionPanelSummary>\r\n                        <ExpansionPanelDetails style={{display:'block'}}>\r\n                            {playerData.map((data, index) =>\r\n                                <ExpansionPanel key={data.question.id} expanded={this.state.expanded === data.question.id} onChange={this.handleChange(data.question.id)}>\r\n                                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                                        <Typography variant=\"subtitle1\">{data.question.question}</Typography>\r\n                                        <Typography variant=\"subtitle2\">{data.score}pt</Typography>\r\n                                    </ExpansionPanelSummary>\r\n                                    <ExpansionPanelDetails>\r\n                                        <Typography>Your answer: {data.answer}</Typography>\r\n                                        <Typography>Your time: {data.time/1000}sec</Typography>\r\n\r\n                                        <Typography variant=\"subtitle1\" align=\"left\">Correct answers</Typography>\r\n                                        <List>\r\n                                            {data.question.correctAnswers.map((answer, index) =>\r\n                                                <ListItem key={answer}>\r\n                                                    <ListItemText\r\n                                                        primary={answer}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            )}\r\n                                        </List>\r\n                                        <Typography variant=\"subtitle1\" align=\"left\">Wrong answers</Typography>\r\n                                        <List>\r\n                                            {data.question.wrongAnswers.map((answer, index) =>\r\n                                                <ListItem key={answer}>\r\n                                                    <ListItemText\r\n                                                        primary={answer}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            )}\r\n                                        </List>\r\n                                    </ExpansionPanelDetails>\r\n                                </ExpansionPanel>\r\n                            )}\r\n                        </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the screen.</Typography>\r\n\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport AnswerOption from '../AnswerOption';\r\nimport AnswerChart from '../AnswerChart';\r\nimport Leaderboard from '../Leaderboard';\r\n\r\nPlayerQuestionResult.propTypes = {\r\n  playerData: PropTypes.object.isRequired,\r\n};\r\nfunction PlayerQuestionResult(props) {\r\n  const { playerData } = props;\r\n  const wrongAnswer = playerData.hasAnswered && playerData.currentQuestionScore === 0;\r\n  const correctAnswer = playerData.currentQuestionScore > 0;\r\n  return (\r\n    <div>\r\n      {correctAnswer > 0 && <Typography variant=\"h5\">Correct answer!</Typography>}\r\n      {wrongAnswer && <Typography variant=\"h5\">Wrong answer!</Typography>}\r\n      {!playerData.hasAnswered && <Typography variant=\"h5\">You did not answer the question</Typography>}\r\n      {playerData.hasAnswered && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <div>\r\n            <span>Score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.currentQuestionScore}</span>\r\n          </div>\r\n          <div>\r\n            <span>Time: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.answerTime}</span>\r\n          </div>\r\n          <div>\r\n            <span>Total score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.totalScore}</span>\r\n          </div>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition !== playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Old position:</span>\r\n          <span>\r\n            {' '}\r\n            {playerData.oldLeaderboardPosition}\r\n          </span>\r\n          <span>New position: </span>\r\n          <span>{playerData.newLeaderboardPosition}</span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition === playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Position: </span>\r\n          <span>\r\n            {' '}\r\n            {playerData.newLeaderboardPosition}\r\n          </span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nclass PhaseResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n  }\r\n\r\n  getPlayerAnswerData() {\r\n    const { game, playerKey } = this.props;\r\n    const answerData = {\r\n      totalScore: 0,\r\n      currentQuestionScore: 0,\r\n      newLeaderboardPosition: 1,\r\n      oldLeaderboardPosition: 1,\r\n      answerTime: 0,\r\n      hasAnswered: false,\r\n    };\r\n    const currentQuestion = game.quiz.questions[game.quiz.currentQuestion];\r\n    const currentPlayer = game.players[playerKey];\r\n    // answers kan vara undefined. refactorera hela klassen\r\n    // den här läsningen håller inte. kan bli fel värden som man missar att svara på en fråga.\r\n    // gör om till reduce och se om det ska vara iteration på answers eller på quiz.questions kanske?\r\n\r\n    for (let j = 0; j < game.quiz.questions.length; j++) {\r\n      const question = game.quiz.questions[j];\r\n      const answer = currentPlayer.answers ? currentPlayer.answers[question.id] : false;\r\n      if (answer) {\r\n        if (answer.questionId === currentQuestion.id) {\r\n          answerData.hasAnswered = true;\r\n          answerData.currentQuestionScore = answer.score;\r\n          answerData.answerTime = answer.answerTime;\r\n        }\r\n        answerData.totalScore += answer.score;\r\n      }\r\n    }\r\n\r\n    const playerKeys = game.players ? Object.keys(game.players) : [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      if (playerKeys[i] === currentPlayer.key) {\r\n        continue;\r\n      }\r\n      const opponent = game.players[playerKeys[i]];\r\n      let totalScore = 0;\r\n      let currentQuestionScore = 0;\r\n      for (let j = 0; j < game.quiz.questions.length; j++) {\r\n        const question = game.quiz.questions[j];\r\n        const answer = opponent.answers ? opponent.answers[question.id] : false;\r\n        if (answer) {\r\n          if (answer.questionId === currentQuestion.id) {\r\n            currentQuestionScore = answer.score;\r\n          }\r\n          totalScore += answer.score;\r\n        }\r\n      }\r\n      if (totalScore > answerData.totalScore) {\r\n        answerData.newLeaderboardPosition += 1;\r\n      }\r\n      if (totalScore - currentQuestionScore > answerData.totalScore - answerData.currentQuestionScore) {\r\n        answerData.oldLeaderboardPosition += 1;\r\n      }\r\n    }\r\n\r\n    return answerData;\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    const playerData = this.getPlayerAnswerData();\r\n\r\n    if (game.quiz.remoteMode) {\r\n      let currentQuestion;\r\n      if (game) {\r\n        currentQuestion = game.quiz.questions[game.quiz.currentQuestion];\r\n      }\r\n      const { answers } = currentQuestion;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <div className=\"quiz-top-section\">\r\n            <PlayerQuestionResult playerData={playerData} />\r\n          </div>\r\n          <div className=\"quiz-middle-section\">\r\n            <Grid container>\r\n              <Grid item md={6} xs={12}>\r\n                <div className=\"quiz-answer-chart\">\r\n\r\n                  <AnswerChart game={game} />\r\n                </div>\r\n              </Grid>\r\n              <Grid item md={6} xs={12}>\r\n                <div>\r\n                  <Leaderboard game={game} />\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n          <div className=\"quiz-bottom-section\">\r\n            <Grid container>\r\n              {answers.map((answer, index) => (\r\n                <Grid key={answer} item xs={6}>\r\n                  <AnswerOption answer={answer} index={index} />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <PlayerQuestionResult playerData={playerData} />\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Typography variant=\"subtitle1\">Look at the screen to se overall player results</Typography>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseResultQuestion.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string.isRequired,\r\n};\r\nexport default PhaseResultQuestion;\r\n","import React, { Component } from 'react';\r\nimport { fire } from '../../../base';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n        this.saveAnswer = this.saveAnswer.bind(this);\r\n    }\r\n\r\n    saveAnswer(answer) {\r\n        let that = this;\r\n        let currentQuestionId = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id;\r\n        fire.database().ref('/games/' + that.props.game.key + '/players/' + this.props.playerKey + '/answers/' + currentQuestionId).set(answer, function (error) {\r\n            if (error) {\r\n                let snack = {\r\n                    variant: \"error\",\r\n                    message: \"Unexpected internal error\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n            else {\r\n                let snack = {\r\n                    variant: \"success\",\r\n                    message: \"Successfully updated player!\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let lastPhase = this.props.game.phase === \"final_result\" || this.props.game.phase === \"end\";\r\n        return (\r\n            <div className=\"play-container\">\r\n                {this.props.game.phase === \"connection\" && <PhaseConnection game={this.props.game} addPlayer={this.props.createPlayer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"starting\" && <PhaseStarting game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"awaiting_question\" && <PhaseAwaitingQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"show_question\" && <PhaseShowQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"answer\" && <PhaseAnswer game={this.props.game} saveAnswer={this.saveAnswer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"result_question\" && <PhaseResultQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n                {lastPhase  && <PhaseFinalResult game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                PlayEnd\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction generateName(currentNames) {\r\n  const adjectives = ['adamant', 'adroit', 'amatory', 'animistic', 'antic', 'arcadian', 'baleful', 'bellicose', 'bilious', 'boorish', 'calamitous', 'caustic', 'cerulean', 'comely', 'concomitant', 'contumacious', 'corpulent', 'crapulous', 'defamatory', 'didactic', 'dilatory', 'dowdy', 'efficacious', 'effulgent', 'egregious', 'endemic', 'equanimous', 'execrable', 'fastidious', 'feckless', 'fecund', 'friable', 'fulsome', 'garrulous', 'guileless', 'gustatory', 'heuristic', 'histrionic', 'hubristic', 'incendiary', 'insidious', 'insolent', 'intransigent', 'inveterate', 'invidious', 'irksome', 'jejune', 'jocular', 'judicious', 'lachrymose', 'limpid', 'loquacious', 'luminous', 'mannered', 'mendacious', 'meretricious', 'minatory', 'mordant', 'munificent', 'nefarious', 'noxious', 'obtuse', 'parsimonious', 'pendulous', 'pernicious', 'pervasive', 'petulant', 'platitudinous', 'precipitate', 'propitious', 'puckish', 'querulous', 'quiescent', 'rebarbative', 'recalcitant', 'redolent', 'rhadamanthine', 'risible', 'ruminative', 'sagacious', 'salubrious', 'sartorial', 'sclerotic', 'serpentine', 'spasmodic', 'strident', 'taciturn', 'tenacious', 'tremulous', 'trenchant', 'turbulent', 'turgid', 'ubiquitous', 'uxorious', 'verdant', 'voluble', 'voracious', 'wheedling', 'withering', 'zealous'];\r\n  const nouns = ['ninja', 'chair', 'pancake', 'statue', 'unicorn', 'rainbows', 'laser', 'senor', 'bunny', 'captain', 'nibblets', 'cupcake', 'carrot', 'gnomes', 'glitter', 'potato', 'salad', 'toejam', 'curtains', 'beets', 'toilet', 'exorcism', 'stick figures', 'mermaid eggs', 'sea barnacles', 'dragons', 'jellybeans', 'snakes', 'dolls', 'bushes', 'cookies', 'apples', 'ice cream', 'ukulele', 'kazoo', 'banjo', 'opera singer', 'circus', 'trampoline', 'carousel', 'carnival', 'locomotive', 'hot air balloon', 'praying mantis', 'animator', 'artisan', 'artist', 'colorist', 'inker', 'coppersmith', 'director', 'designer', 'flatter', 'stylist', 'leadman', 'limner', 'make-up artist', 'model', 'musician', 'penciller', 'producer', 'scenographer', 'set decorator', 'silversmith', 'teacher', 'auto mechanic', 'beader', 'bobbin boy', 'clerk of the chapel', 'filling station attendant', 'foreman', 'maintenance engineering', 'mechanic', 'miller', 'moldmaker', 'panel beater', 'patternmaker', 'plant operator', 'plumber', 'sawfiler', 'shop foreman', 'soaper', 'stationary engineer', 'wheelwright', 'woodworkers'];\r\n  let finalName = '';\r\n  for (let i = 0; i < 20; i++) {\r\n    let name = '';\r\n    if (i > 10) {\r\n      name = `${adjectives[Math.floor(Math.random() * adjectives.length)]} ${adjectives[Math.floor(Math.random() * adjectives.length)]} ${nouns[Math.floor(Math.random() * nouns.length)]}`;\r\n    } else {\r\n      name = `${adjectives[Math.floor(Math.random() * adjectives.length)]} ${nouns[Math.floor(Math.random() * nouns.length)]}`;\r\n    }\r\n    if (currentNames.indexOf(name) > -1) {\r\n      continue;\r\n    } else {\r\n      finalName = name;\r\n      break;\r\n    }\r\n  }\r\n  return finalName;\r\n}\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n    };\r\n    this.createPlayer = this.createPlayer.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { playerKey, game, addPlayer } = this.props;\r\n    if (!playerKey && game.minigame.nameGenerator) {\r\n      addPlayer(this.generatePlayer());\r\n    }\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  createPlayer() {\r\n    const { name } = this.state;\r\n    const { addPlayer } = this.props;\r\n    // validera så att namnet inte är taget.\r\n    const player = {\r\n      name,\r\n      score: 0,\r\n    };\r\n    addPlayer(player);\r\n  }\r\n\r\n  generatePlayer() {\r\n    const { game } = this.props;\r\n    let currentNames = [];\r\n    if (game.players) {\r\n      currentNames = Object.values(game.players).map(a => a.name);\r\n    }\r\n    const name = generateName(currentNames);\r\n    const player = {\r\n      name,\r\n      score: 0,\r\n    };\r\n    return player;\r\n  }\r\n\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const { name } = this.state;\r\n    let playerName = '';\r\n    if (game.players && playerKey && game.players[playerKey]) {\r\n      playerName = game.players[playerKey].name;\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        {playerName\r\n          ? (\r\n            <div>\r\n              <div className=\"quiz-top-section\" />\r\n              <div className=\"quiz-middle-section\">\r\n                <Typography variant=\"h5\">\r\n                  <span>Welcome</span>\r\n                  <span className=\"dynamic-text\">{playerName}</span>\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\"> Watch the screen, your name should show.</Typography>\r\n              </div>\r\n              <div className=\"quiz-bottom-section\" />\r\n            </div>\r\n          )\r\n          : (\r\n            <div>\r\n              <FormControl>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  margin=\"normal\"\r\n                  onChange={this.handleChange('name')}\r\n                />\r\n              </FormControl>\r\n              <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n            </div>\r\n          )\r\n            }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string,\r\n  addPlayer: PropTypes.func.isRequired,\r\n};\r\nexport default PhaseConnection;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h5\">Starting game...</Typography>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseStarting;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseFinalResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h5\">Look at the screen. playerKey</Typography>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseFinalResult;\r\n","import React, { Component, Fragment } from 'react';\r\nimport LeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport RightIcon from '@material-ui/icons/ChevronRight';\r\nimport UpIcon from '@material-ui/icons/ExpandLess';\r\nimport DownIcon from '@material-ui/icons/ExpandMore';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\n\r\nclass SnakeController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAction = this.handleAction.bind(this);\r\n  }\r\n\r\n  handleAction(name) {\r\n    const { playerKey, game } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n\r\n    fire.database().ref(`/games/${game.key}/minigame/snakes/${currentPlayer.snakeId}/move`).set(name, (error) => {\r\n      if (error) {\r\n        console.log('error updated snake move');\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n    const playerSnake = game.minigame.snakes[currentPlayer.snakeId];\r\n\r\n    const allControlActions = playerSnake.actions;\r\n    const displayName = playerSnake.playerKeys.length === 1 ? currentPlayer.name : playerSnake.name;\r\n\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"player-controlls-container\">\r\n          {allControlActions.map(action => (\r\n            <Fragment key={action}>\r\n              {currentPlayer.controlActions.includes(action)\r\n                ? (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} onClick={() => { this.handleAction(action); }} style={{ backgroundColor: playerSnake.color }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                : (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} style={{ backgroundColor: playerSnake.color, opacity: 0.3 }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                            }\r\n            </Fragment>\r\n          ))}\r\n          <div className=\"player-controlls-action player-controlls-middle\">\r\n            <Typography variant=\"body1\">{displayName}</Typography>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnakeController.propTypes = {\r\n  playerKey: PropTypes.string.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeController;\r\n","import React, { Component } from 'react';\r\n\r\nclass TetrisController extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                TetrisController.js\r\n\r\n                här  ska jag visa knappar för moves. och en metod här som tar knapptrycket och updaterar en specifik property i firebase baserat på gameid, playerkey etc.\r\n                måste ha med snakeId in i dnena kommmponent?\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TetrisController;","import React, { Component, Fragment } from 'react';\r\nimport LeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport RightIcon from '@material-ui/icons/ChevronRight';\r\nimport UpIcon from '@material-ui/icons/ExpandLess';\r\nimport DownIcon from '@material-ui/icons/ExpandMore';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\n\r\nclass GolfController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAction = this.handleAction.bind(this);\r\n  }\r\n\r\n  handleAction(name) {\r\n    const { playerKey, game } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n\r\n    fire.database().ref(`/games/${game.key}/minigame/snakes/${currentPlayer.snakeId}/move`).set(name, (error) => {\r\n      if (error) {\r\n        console.log('error updated snake move');\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n    const playerSnake = game.minigame.snakes[currentPlayer.snakeId];\r\n\r\n    const allControlActions = playerSnake.actions;\r\n    const displayName = playerSnake.playerKeys.length === 1 ? currentPlayer.name : playerSnake.name;\r\n\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"player-controlls-container\">\r\n          {allControlActions.map(action => (\r\n            <Fragment key={action}>\r\n              {currentPlayer.controlActions.includes(action)\r\n                ? (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} onClick={() => { this.handleAction(action); }} style={{ backgroundColor: playerSnake.color }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                : (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} style={{ backgroundColor: playerSnake.color, opacity: 0.3 }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                            }\r\n            </Fragment>\r\n          ))}\r\n          <div className=\"player-controlls-action player-controlls-middle\">\r\n            <Typography variant=\"body1\">{displayName}</Typography>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolfController.propTypes = {\r\n  playerKey: PropTypes.string.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default GolfController;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport SnakeController from '../snake/SnakeController';\r\nimport TetrisController from '../tetris/TetrisController';\r\nimport GolfController from '../golf/GolfController';\r\n\r\nclass Minigame extends PureComponent {\r\n  render() {\r\n    const {\r\n      game, playerKey, createPlayer,\r\n    } = this.props;\r\n    const lastPhase = game.phase === 'final_result' || game.phase === 'end';\r\n    switch (game.gametype) {\r\n      case 'snake':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <SnakeController game={game} playerKey={playerKey} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      case 'tetris':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <TetrisController game={game} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      case 'golf':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <GolfController game={game} playerKey={playerKey} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      default:\r\n        return (null);\r\n    }\r\n  }\r\n}\r\nMinigame.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  createPlayer: PropTypes.func.isRequired,\r\n  playerKey: PropTypes.string.isRequired,\r\n};\r\nexport default Minigame;\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../base';\r\nimport Quiz from '../quiz/play/Quiz';\r\nimport Minigame from '../minigame/play/Minigame';\r\n\r\nclass Play extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n      gameId: '',\r\n      playerKey: '',\r\n    };\r\n    this.createPlayer = this.createPlayer.bind(this);\r\n    this.fetchGame = this.fetchGame.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  fetchGame() {\r\n    const { gameId } = this.state;\r\n    const { showSnackbar, toggleHeader } = this.props;\r\n    const that = this;\r\n    fire.database().ref('games').orderByChild('gameId').equalTo(gameId)\r\n      .once('value', (snapshot) => {\r\n        if (snapshot.val()) {\r\n          let game;\r\n          snapshot.forEach((child) => {\r\n            game = child.val();\r\n          });\r\n          // får skapa en ny attribut, canPlayerJoin true/false om det begövs\r\n          if (game.phase === 'connection') {\r\n            const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n            if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n              that.setState({ playerKey: storedPlayerKey });\r\n            }\r\n\r\n            that.initGameListiner(game.key);\r\n            const snack = {\r\n              variant: 'success',\r\n              message: 'Connected to game',\r\n            };\r\n            showSnackbar(snack);\r\n            toggleHeader(false);\r\n          } else if (game.phase === 'setup') {\r\n            const snack = {\r\n              variant: 'error',\r\n              message: 'Game is not yet started',\r\n            };\r\n            showSnackbar(snack);\r\n          } else {\r\n            const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n            if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n              that.setState({ playerKey: storedPlayerKey });\r\n              that.initGameListiner(game.key);\r\n              const snack = {\r\n                variant: 'success',\r\n                message: 'Connected to game',\r\n              };\r\n              showSnackbar(snack);\r\n              toggleHeader(false);\r\n            } else {\r\n              const snack = {\r\n                variant: 'error',\r\n                message: 'Game is in progress',\r\n              };\r\n              showSnackbar(snack);\r\n            }\r\n          }\r\n        } else {\r\n          const snack = {\r\n            variant: 'info',\r\n            message: 'No game found',\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n  }\r\n\r\n  initGameListiner(gameKey) {\r\n    const gameRef = fire.database().ref(`games/${gameKey}`);\r\n    const that = this;\r\n    gameRef.on('value', (snapshot) => {\r\n      const game = snapshot.val();\r\n      if (game) {\r\n        // kan blir problem med asynch setstate?\r\n        that.setState({\r\n          game,\r\n        });\r\n      } else {\r\n        that.setState({\r\n          game: '',\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  createPlayer(player) {\r\n    const { game } = this.state;\r\n    const { showSnackbar } = this.props;\r\n    const playerRef = fire.database().ref(`/games/${game.key}/players`).push();\r\n    const newPlayer = Object.assign({ key: playerRef.key }, player);\r\n    const that = this;\r\n    playerRef.set(newPlayer, (error) => {\r\n      if (error) {\r\n        const snack = {\r\n          variant: 'error',\r\n          message: 'Unexpected internal error',\r\n        };\r\n        showSnackbar(snack);\r\n      } else {\r\n        that.setState({\r\n          playerKey: newPlayer.key,\r\n        });\r\n        localStorage.setItem('RecentPlayerKey', newPlayer.key);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { game, playerKey, gameId } = this.state;\r\n    const { showSnackbar } = this.props;\r\n    if (!game.phase) {\r\n      return (\r\n        <div className=\"page-container play-page\">\r\n          <FormControl>\r\n            <TextField\r\n              label=\"Game PIN\"\r\n              name=\"Game ID\"\r\n              value={gameId}\r\n              margin=\"normal\"\r\n              onChange={this.handleChange('gameId')}\r\n            />\r\n          </FormControl>\r\n          <Button onClick={this.fetchGame} variant=\"contained\">Join</Button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"page-container play-page\">\r\n        {game.gametype === 'quiz' && <Quiz game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'snake' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'tetris' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'golf' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPlay.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  toggleHeader: PropTypes.func.isRequired,\r\n};\r\nexport default Play;\r\n","import React, { Component } from 'react';\r\nimport { Typography, Card } from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-page home-page\">\r\n        <Grid container spacing={24}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h3\">Welcome to stagehoot</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Link to=\"/play\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Play\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Connect to a game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Link to=\"/host\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Host\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Host a created game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link to=\"/create\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Create\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n  success: {\r\n    backgroundColor: green[600],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700],\r\n  },\r\n  icon: {\r\n    fontSize: 20,\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  message: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n  const {\r\n    classes, message, onClose, variant, ...other\r\n  } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={classes[variant]}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={(\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n            )}\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"Close\"\r\n          color=\"inherit\"\r\n          className={classes.close}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>,\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nclass CustomizedSnackbars extends React.Component {\r\n    handleClose = (reason) => {\r\n      const { hideSnackbar } = this.props;\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n      hideSnackbar();\r\n    };\r\n\r\n    render() {\r\n      const { snack } = this.props;\r\n      return (\r\n        <div>\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'left',\r\n            }}\r\n            open={snack.open}\r\n            autoHideDuration={6000}\r\n            onClose={this.handleClose}\r\n          >\r\n            <MySnackbarContentWrapper\r\n              onClose={this.handleClose}\r\n              variant={snack.variant}\r\n              message={snack.message}\r\n            />\r\n          </Snackbar>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCustomizedSnackbars.propTypes = {\r\n  snack: PropTypes.object,\r\n  hideSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default CustomizedSnackbars;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { fire } from './base';\nimport Header from './components/common/Header';\nimport Create from './components/pages/Create';\nimport Host from './components/pages/Host';\nimport Play from './components/pages/Play';\nimport Home from './components/pages/Home';\nimport CustomizedSnackbars from './components/common/CustomizedSnackbars';\n\nimport {\n  HashRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snack: '',\n      showHeader: true,\n    };\n    this.showSnackbar = this.showSnackbar.bind(this);\n    this.hideSnackbar = this.hideSnackbar.bind(this);\n    this.toggleHeader = this.toggleHeader.bind(this);\n\n  }\n  hideSnackbar() {\n    let snack = this.state.snack;\n    snack.open = false;\n    this.setState({\n      snack: snack,\n    });\n  }\n  showSnackbar(snack) {\n    snack.open = true;\n    this.setState({\n      snack: snack,\n    });\n  }\n  toggleHeader(value) {\n    this.setState({ showHeader: value });\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {this.state.showHeader && <Header />}\n          <div id=\"content\">\n            <Route exact path=\"/play\" render={() => <Play showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/host\" render={() => <Host showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/create\" render={() => <Create showSnackbar={this.showSnackbar} />} />\n            <Route exact path=\"/\" render={() => <Home />} />\n          </div>\n          {this.state.snack && <CustomizedSnackbars snack={this.state.snack} hideSnackbar={this.hideSnackbar} />}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}