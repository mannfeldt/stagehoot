{"version":3,"sources":["components/common/CountdownAnimation.scss","base.js","components/common/Header.js","components/quiz/create/GenerateQuizForm.js","components/quiz/create/QuestionForm.js","components/quiz/create/Question.js","components/quiz/create/CreateQuiz.js","components/pages/Create.js","components/quiz/host/PhaseSetup.js","components/quiz/host/PhaseConnection.js","components/common/CountdownAnimation.js","components/quiz/host/PhaseStarting.js","components/quiz/host/PhaseAwaitingQuestion.js","components/quiz/host/PhaseShowQuestion.js","components/quiz/AnswerOption.js","components/common/Timer.js","components/quiz/host/AnswerCounter.js","components/quiz/host/PhaseAnswer.js","components/quiz/host/Podium.js","components/quiz/host/PhaseFinalResult.js","components/quiz/host/AnswerChart.js","components/quiz/host/Leaderboard.js","components/quiz/host/PhaseResultQuestion.js","components/quiz/host/PhaseEnd.js","components/quiz/host/Quiz.js","components/pages/Host.js","components/quiz/play/PhaseConnection.js","components/quiz/play/PhaseStarting.js","components/quiz/play/PhaseAwaitingQuestion.js","components/quiz/play/PhaseShowQuestion.js","components/quiz/play/PhaseAnswer.js","components/quiz/play/PhaseFinalResult.js","components/quiz/play/PhaseResultQuestion.js","components/quiz/play/Quiz.js","components/quiz/play/PhaseEnd.js","components/pages/Play.js","components/pages/Home.js","components/common/CustomizedSnackbars.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cyanColor","redColor","purpleColor","greenColor","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openMenu","event","setState","anchorEl","currentTarget","state","bind","assertThisInitialized","handleClose","titleText","options","route","window","location","href","substr","indexOf","react_default","a","createElement","id","AppBar_default","position","Toolbar_default","className","Link","to","Button_default","IconButton_default","onClick","MoreVert_default","Menu_default","open","onClose","items","push","key","length","MenuItem_default","Component","GenerateQuizForm","handleChange","name","defineProperty","target","value","handleChangeSelect","nrOfQuestions","category","difficulty","aType","generateQuestions","parseDOMArray","s","DOMParser","parseFromString","body","textContent","arr","result","i","parseDOM","that","url","fetch","then","response","json","generated","response_code","questions","results","generatedQuestion","question","correctAnswers","correct_answer","wrongAnswers","incorrect_answers","qType","type","addQuestions","snack","variant","message","showSnackbar","FormControl_default","TextField_default","label","margin","onChange","InputLabel_default","htmlFor","Select_default","inputProps","QuestionForm","handleTrueFalse","answer","correctAnswer","wrongAnswerOne","wrongAnswerTwo","wrongAnswerThree","timelimit","answerBool","sendQuestion","toggleGenerateQuestion","addQuestion","create_GenerateQuizForm","required","component","FormLabel_default","RadioGroup_default","aria-label","FormControlLabel_default","control","Radio_default","isTimelimit","Question","expanded","deleteQuestion","classes","Card_default","card","CardHeader_default","action","DeleteOutlined_default","title","subheader","CardContent_default","Typography_default","align","List_default","map","index","ListItem_default","ListItemText_default","primary","withStyles","theme","maxWidth","Create","handleChangeBool","checked","gametype","gamemode","timescore","gameid","gamePass","validateGame","createQuiz","Math","floor","join","max","apply","o","calculateDefaultTimeLimit","existingQuestions","e","splice","game","password","tile","quiz","_this2","Grid_default","container","spacing","autoComplete","FormGroup_default","Switch_default","create_QuestionForm","create_Question","transitionDelay","setGameType","gameId","createGame","generateGameId","created","Date","now","status","phase","gameRef","database","ref","set","error","errorText","localStorage","setItem","possible","charAt","random","CreateQuiz","index_es","PhaseSetup","surveyPlayers","answerStreak","nameGenerator","useTeams","randomizeQuestionOrder","autoPlayQuestions","startGame","createTeamGame","createClassicGame","teamMode","currentQuestion","gameFunc","update","PhaseConnection","nextPhase","players","values","player","item","xs","paragraph","CountdownAnimation","speed","viewBox","d","PhaseStarting","counter","startCounter","setInterval","clearInterval","components_common_CountdownAnimation","PhaseAwaitingQuestion","PhaseShowQuestion","phaseTime","setTimeout","answers","concat","shuffle","array","temp","answerStyles","icon","Cake_default","color","ExtensionOutlined_default","FavoriteBorder_default","StarBorder_default","AnswerOption","design","answerQuestion","Paper_default","playAnswer","style","backgroundColor","paper","root","flexGrow","paddingTop","unit","paddingBottom","textAlign","palette","text","secondary","width","height","float","fontSize","marginLeft","Timer","currentCount","startValue","completed","CircularProgress_default","circle","colorSecondary","thickness","size","marginBottom","AnswerCounter","LinearProgress_default","bar","PhaseAnswer","started","isTimelimited","playerKeys","keys","answersCollected","answerCollectedPercentage","common_Timer","ceil","host_AnswerCounter","quiz_AnswerOption","colors","Podium","getChartData","getChartOptions","getChartHeight","chartData","labels","datasets","data","borderWidth","rawPlayerData","playerScoreData","score","j","sort","b","maxIndex","padding","maintainAspectRatio","showTooltips","responsiveAnimationDuration","animation","easing","duration","onProgress","animationObject","onAnimationProgress","ctx","chart","textBaseline","font","stepratio","currentStep","numSteps","meta","getDatasetMeta","hidden","forEach","element","dataString","toString","fillStyle","tooltipPosition","fillText","x","y","_model","scales","yAxes","ticks","beginAtZero","display","xAxes","legend","tooltips","enabled","events","layout","left","right","top","bottom","es","getWinnerString","PhaseFinalResult","host_Podium","alert","AnswerChart","getAnswerData","borderColor","answerData","toConsumableArray","beginPath","rect","_view","fill","img","Image","src","PUBLIC_PATH","ypos","drawImage","Leaderboard","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","leaderboardData","getLeaderboardData","startScoreCounter","newLeaderBoard","done","currentQuestionScore","totalScore","leaderboard","playerList","questionId","lastScore","currentQuestionId","_this$state","Table_default","table","TableBody_default","slice","TableRow_default","TableCell_default","numeric","getLeaderboardScore","TablePagination_default","count","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","whiteSpace","PhaseResultQuestion","nextQuestion","finalizeQuiz","getTopScorerString","topPlayer","playerKey","playerAnswers","nrOfAnswers","isLastQuestion","host_AnswerChart","host_Leaderboard","restart","quit","end","PhaseEnd","Quiz","host_PhaseSetup","host_PhaseConnection","host_PhaseStarting","host_PhaseAwaitingQuestion","host_PhaseShowQuestion","host_PhaseAnswer","host_PhaseResultQuestion","host_PhaseFinalResult","host_PhaseEnd","Host","getItem","updateGame","fetchGame","initGameListiner","restartGame","quitGame","endGame","toggleHeader","orderByChild","equalTo","once","snapshot","val","child","gameKey","on","gameFunctions","host_Quiz","authId","playerCreated","createPlayer","generateName","addPlayer","generatePlayer","adjectives","nouns","finalName","currentNames","playerName","selectedAnswer","hasAnswered","answerTime","startTime","undefined","timeFactorUsed","playerAnswer","saveAnswer","getPlayerAnswerData","newLeaderboardPosition","oldLeaderboardPosition","currentPlayer","playerData","lastPhase","play_PhaseConnection","play_PhaseStarting","updatePlayer","play_PhaseAwaitingQuestion","play_PhaseShowQuestion","play_PhaseAnswer","play_PhaseResultQuestion","play_PhaseFinalResult","Play","storedPlayerKey","playerRef","play_Quiz","Home","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","green","dark","amber","iconVariant","opacity","marginRight","alignItems","other","objectWithoutProperties","Icon","SnackbarContent_default","assign","classNames","aria-describedby","close","Close_default","CustomizedSnackbars","reason","hideSnackbar","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","React","App","showHeader","HashRouter","common_Header","Route","exact","path","render","pages_Play","pages_Host","pages_Create","pages_Home","common_CustomizedSnackbars","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75a3065d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cyanColor\":\"#80DEEA\",\"redColor\":\"#EF9A9A\",\"purpleColor\":\"#CE93D8\",\"greenColor\":\"#C5E1A5\"};","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\n//PROD\r\nvar prodConfig = {\r\n  apiKey: \"AIzaSyB8vYoKiw2DlJycM5bqKKaU4vK_0n7HcsU\",\r\n  authDomain: \"stagehoot.firebaseapp.com\",\r\n  databaseURL: \"https://stagehoot.firebaseio.com\",\r\n  projectId: \"stagehoot\",\r\n  storageBucket: \"stagehoot.appspot.com\",\r\n  messagingSenderId: \"589747985768\"\r\n};\r\n\r\n//DEV\r\n\r\nconst fire = firebase.initializeApp(prodConfig);\r\n\r\nexport { fire }","import React, { Component } from 'react';\r\n//import './header.css';\r\nimport { Link } from 'react-router-dom';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n//import headerImg from './header.jpg';\r\nimport { fire } from '../../base';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      anchorEl: null\r\n    };\r\n    this.openMenu = this.openMenu.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n\r\n  }\r\n\r\n  openMenu = event => {\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n    });\r\n  };\r\n\r\n  handleClose() {\r\n    this.setState({\r\n      anchorEl: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n    function MenuItemList(props) {\r\n      let items = [];\r\n      items.push(<Link key={items.length} to={'/'}><MenuItem onClick={props.onClose}>Home</MenuItem></Link>);\r\n      items.push(<Link key={items.length} to={'/play'}><MenuItem onClick={props.onClose}>Play</MenuItem></Link>);\r\n      items.push(<Link key={items.length} to={'/host'}><MenuItem onClick={props.onClose} >Host</MenuItem></Link>);\r\n      items.push(<Link key={items.length} to={'/create'}><MenuItem onClick={props.onClose} >Create</MenuItem></Link>);\r\n      return (<div className=\"header-menulist\">\r\n        {items}\r\n      </div>);\r\n    }\r\n\r\n    let titleText = \"Stagehoot\";\r\n    if (fire.options.projectId === \"ettkilomjol-dev\") {\r\n      titleText = \"Ett Kilo Mjöl DEV\";\r\n    }\r\n    let route = window.location.href.substr(window.location.href.indexOf(\"/#/\") + 2);\r\n\r\n    return (\r\n      <div id=\"header\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar className=\"toolbar\">\r\n            <div className=\"appbar-container--left\">\r\n              <Link className=\"appbar-title text-big\" to={'/'}>\r\n                {titleText}\r\n              </Link>\r\n              <span className=\"hide-mobile\">\r\n                <Link to={'/'}>\r\n                  <Button className={route === \"/\" ? 'appbar-nav-button selected-route':'appbar-nav-button'}>\r\n                    Home\r\n                  </Button>\r\n                </Link>\r\n                <Link to={'/play'}>\r\n                  <Button className={route === \"/play\" ? 'appbar-nav-button selected-route':'appbar-nav-button'}>\r\n                    Play\r\n                  </Button>\r\n                </Link>\r\n                <Link to={'/host'}>\r\n                  <Button className={route === \"/host\" ? 'appbar-nav-button selected-route':'appbar-nav-button'}>\r\n                    Host\r\n                  </Button>\r\n                </Link>\r\n                <Link to={'/create'}>\r\n                  <Button className={route === \"/create\" ? 'appbar-nav-button selected-route':'appbar-nav-button'}>\r\n                    Create\r\n                  </Button>\r\n                </Link>\r\n              </span>\r\n            </div>\r\n            <div className=\"appbar-container--right hide-desktop\">\r\n              <IconButton onClick={this.openMenu}>\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n              <Menu open={!!this.state.anchorEl} onClose={this.handleClose} anchorEl={this.state.anchorEl}>\r\n                <MenuItemList onClose={this.handleClose} />\r\n              </Menu>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div >\r\n    );\r\n  }\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nclass GenerateQuizForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nrOfQuestions: '10',\r\n            category: '0',\r\n            difficulty: '0',\r\n            aType: '0',\r\n\r\n        };\r\n        this.generateQuestions = this.generateQuestions.bind(this);\r\n        this.parseDOMArray = this.parseDOMArray.bind(this);\r\n    }\r\n    parseDOM(s){\r\n        let parser = new DOMParser();\r\n        let dom = parser.parseFromString(\r\n            '<!doctype html><body>' + s,\r\n            'text/html');\r\n        let decodedString = dom.body.textContent;\r\n        return decodedString;\r\n    }\r\n    parseDOMArray(arr){\r\n        let result = [];\r\n        for(let i =0; i<arr.length; i++){\r\n            result.push(this.parseDOM(arr[i]));\r\n        }\r\n        return result;\r\n    }\r\n    generateQuestions() {\r\n        let that = this;\r\n        let url = \"https://opentdb.com/api.php?\";\r\n        if (this.state.nrOfQuestions !== \"0\") {\r\n            url += \"amount=\" + this.state.nrOfQuestions;\r\n        }\r\n        if (this.state.category !== \"0\") {\r\n            url += \"&category=\" + this.state.category;\r\n        }\r\n        if (this.state.difficulty !== \"0\") {\r\n            url += \"&difficulty=\" + this.state.difficulty;\r\n        }\r\n        if (this.state.aType !== \"0\") {\r\n            url += \"&type=\" + this.state.aType;\r\n        }\r\n        fetch(url)\r\n            .then(function (response) {\r\n                return response.json();\r\n            })\r\n            .then(function (generated) {\r\n                if (generated.response_code === 0) {\r\n                    let questions = [];\r\n                    for (let i = 0; i < generated.results.length; i++) {\r\n                        let generatedQuestion = generated.results[i];\r\n                        let question = {\r\n                            question: that.parseDOM(generatedQuestion.question),\r\n                            correctAnswers: [that.parseDOM(generatedQuestion.correct_answer)],\r\n                            wrongAnswers: that.parseDOMArray(generatedQuestion.incorrect_answers),\r\n                            qType: \"text\",\r\n                            aType: generatedQuestion.type,\r\n                            category: generatedQuestion.category,\r\n                            difficulty: generatedQuestion.difficulty,\r\n                        };\r\n                        questions.push(question);\r\n                    }\r\n                    that.props.addQuestions(questions);\r\n                } else {\r\n                    let snack = {\r\n                        variant: 'error',\r\n                        message: 'Could not generate questions( code: ' + generated.response_code + ')',\r\n                    }\r\n                    that.props.showSnackbar(snack);\r\n                }\r\n\r\n            });\r\n\r\n\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleChangeSelect = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormControl>\r\n                    <TextField\r\n                        label=\"Number of questions\"\r\n                        name=\"nrOfQuestions\"\r\n                        value={this.state.nrOfQuestions}\r\n                        margin=\"normal\"\r\n                        onChange={this.handleChange('nrOfQuestions')}\r\n                    />\r\n                </FormControl>\r\n                <FormControl >\r\n                    <InputLabel htmlFor=\"category\">Category</InputLabel>\r\n                    <Select\r\n                        value={this.state.category || \"\"}\r\n                        onChange={this.handleChangeSelect}\r\n                        name=\"category\"\r\n                        inputProps={{\r\n                            id: 'category',\r\n                        }}\r\n                    >\r\n                        <MenuItem value={\"0\"}>Any category</MenuItem>\r\n                        <MenuItem value={\"9\"}>General Knowledge</MenuItem>\r\n                        <MenuItem value={\"10\"}>Entertainment: Books</MenuItem>\r\n                        <MenuItem value={\"11\"}>Entertainment: Film</MenuItem>\r\n                        <MenuItem value={\"12\"}>Entertainment: Music</MenuItem>\r\n                        <MenuItem value={\"13\"}>Entertainment: Musicals and Theatres</MenuItem>\r\n                        <MenuItem value={\"14\"}>Entertainment: Television</MenuItem>\r\n                        <MenuItem value={\"15\"}>Entertainment: Video Games</MenuItem>\r\n                        <MenuItem value={\"16\"}>Entertainment: Board Games</MenuItem>\r\n                        <MenuItem value={\"17\"}>Science and Nature</MenuItem>\r\n                        <MenuItem value={\"18\"}>Science: Computers</MenuItem>\r\n                        <MenuItem value={\"19\"}>Science: Mathematics</MenuItem>\r\n                        <MenuItem value={\"20\"}>Mythology</MenuItem>\r\n                        <MenuItem value={\"21\"}>Sports</MenuItem>\r\n                        <MenuItem value={\"22\"}>Geography</MenuItem>\r\n                        <MenuItem value={\"23\"}>History</MenuItem>\r\n                        <MenuItem value={\"24\"}>Politics</MenuItem>\r\n                        <MenuItem value={\"25\"}>Art</MenuItem>\r\n                        <MenuItem value={\"26\"}>Celebrities</MenuItem>\r\n                        <MenuItem value={\"27\"}>Animals</MenuItem>\r\n                        <MenuItem value={\"28\"}>Vehicles</MenuItem>\r\n                        <MenuItem value={\"29\"}>Entertainment: Comics</MenuItem>\r\n                        <MenuItem value={\"30\"}>Science: Gadgets</MenuItem>\r\n                        <MenuItem value={\"31\"}>Entertainment: Japanese Anime and Manga</MenuItem>\r\n                        <MenuItem value={\"32\"}>Entertainment: Cartoon and Animations</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl >\r\n                    <InputLabel htmlFor=\"difficulty\">Difficulty</InputLabel>\r\n                    <Select\r\n                        value={this.state.difficulty || \"\"}\r\n                        onChange={this.handleChangeSelect}\r\n                        name=\"difficulty\"\r\n                        inputProps={{\r\n                            id: 'difficulty',\r\n                        }}\r\n                    >\r\n                        <MenuItem value={\"0\"}>Any difficulty</MenuItem>\r\n                        <MenuItem value={\"easy\"}>Easy</MenuItem>\r\n                        <MenuItem value={\"medium\"}>Medium</MenuItem>\r\n                        <MenuItem value={\"hard\"}>Hard</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl >\r\n                    <InputLabel htmlFor=\"aType\">Answer type</InputLabel>\r\n                    <Select\r\n                        value={this.state.aType || \"\"}\r\n                        onChange={this.handleChangeSelect}\r\n                        name=\"aType\"\r\n                        inputProps={{\r\n                            id: 'aType',\r\n                        }}\r\n                    >\r\n                        <MenuItem value={\"0\"}>Any type</MenuItem>\r\n                        <MenuItem value={\"multiple\"}>Multiple choice</MenuItem>\r\n                        <MenuItem value={\"boolean\"}>True/False</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <Button onClick={this.generateQuestions} variant=\"contained\">Generate</Button>\r\n            </div >\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default GenerateQuizForm;","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport GenerateQuizForm from './GenerateQuizForm';\r\n\r\nclass QuestionForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            correctAnswer: '',\r\n            wrongAnswerOne: '',\r\n            wrongAnswerTwo: '',\r\n            wrongAnswerThree: '',\r\n            timelimit: '10',\r\n            qType: 'text',\r\n            aType: 'multiple',\r\n            answerBool: '',\r\n            generateQuestions: true,\r\n\r\n        };\r\n        this.sendQuestion = this.sendQuestion.bind(this);\r\n        this.toggleGenerateQuestion = this.toggleGenerateQuestion.bind(this);\r\n\r\n    }\r\n    sendQuestion() {\r\n        let question = {\r\n            question: this.state.question,\r\n            correctAnswers: [this.state.correctAnswer],\r\n            wrongAnswers: [this.state.wrongAnswerOne, this.state.wrongAnswerTwo, this.state.wrongAnswerThree],\r\n            timelimit: this.state.timelimit,\r\n            qType: this.state.qType,\r\n            aType: this.state.aType,\r\n        };\r\n        this.setState({\r\n            question: '',\r\n            correctAnswer: '',\r\n            wrongAnswerOne: '',\r\n            wrongAnswerTwo: '',\r\n            wrongAnswerThree: '',\r\n        });\r\n        this.props.addQuestion(question);\r\n    }\r\n    toggleGenerateQuestion(){\r\n        this.setState({\r\n            generateQuestions: !this.state.generateQuestions\r\n        });\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    handleTrueFalse = event => {\r\n        let answer = event.target.value;\r\n        this.setState({\r\n            correctAnswer: answer,\r\n            wrongAnswerOne: answer === \"true\" ? 'false' : 'true',\r\n        });\r\n    };\r\n    handleChangeSelect = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n    render() {\r\n        if (this.state.generateQuestions) {\r\n            return (\r\n                <div>\r\n                    <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Custom questions</Button>\r\n                    <GenerateQuizForm addQuestions={this.props.addQuestions} showSnackbar={this.props.showSnackbar} />\r\n                </div >\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Auto generate questions</Button>\r\n\r\n                    <FormControl required >\r\n                        <InputLabel htmlFor=\"qtype-required\">Question type</InputLabel>\r\n                        <Select\r\n                            value={this.state.qType || \"\"}\r\n                            onChange={this.handleChangeSelect}\r\n                            name=\"qtype\"\r\n                            inputProps={{\r\n                                id: 'qtype-required',\r\n                            }}\r\n                        >\r\n                            <MenuItem value={\"text\"}>Text</MenuItem>\r\n                            <MenuItem value={\"image\"}>Image</MenuItem>\r\n                            <MenuItem value={\"video\"}>Video</MenuItem>\r\n\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl required >\r\n                        <InputLabel htmlFor=\"aType-required\">Answer type</InputLabel>\r\n                        <Select\r\n                            value={this.state.aType || \"\"}\r\n                            onChange={this.handleChangeSelect}\r\n                            name=\"aType\"\r\n                            inputProps={{\r\n                                id: 'aType-required',\r\n                            }}\r\n                        >\r\n                            <MenuItem value={\"boolean\"}>True/false</MenuItem>\r\n                            <MenuItem value={\"player\"}>Player</MenuItem>\r\n                            <MenuItem value={\"multiple\"}>Mulitichoice</MenuItem>\r\n                            <MenuItem value={\"free\"}>Free text</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <TextField\r\n                            label=\"Question\"\r\n                            name=\"question\"\r\n                            value={this.state.question}\r\n                            margin=\"normal\"\r\n                            onChange={this.handleChange('question')}\r\n                        />\r\n                    </FormControl>\r\n                    {this.state.aType === \"multiple\" &&\r\n                        <div>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Correct answer\"\r\n                                    name=\"correctAnswer\"\r\n                                    margin=\"normal\"\r\n                                    value={this.state.correctAnswer}\r\n                                    onChange={this.handleChange('correctAnswer')}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Wrong answer\"\r\n                                    name=\"wrongAnswerOne\"\r\n                                    margin=\"normal\"\r\n                                    value={this.state.wrongAnswerOne}\r\n                                    onChange={this.handleChange('wrongAnswerOne')}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Wrong answer\"\r\n                                    name=\"wrongAnswerTwo\"\r\n                                    margin=\"normal\"\r\n                                    value={this.state.wrongAnswerTwo}\r\n                                    onChange={this.handleChange('wrongAnswerTwo')}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Wrong answer\"\r\n                                    name=\"wrongAnswerThree\"\r\n                                    margin=\"normal\"\r\n                                    value={this.state.wrongAnswerThree}\r\n                                    onChange={this.handleChange('wrongAnswerThree')}\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                    }\r\n                    {this.state.aType === \"boolean\" &&\r\n                        <div>\r\n                            <FormControl component=\"fieldset\">\r\n                                <FormLabel component=\"legend\">Answer</FormLabel>\r\n                                <RadioGroup\r\n                                    aria-label=\"answer\"\r\n                                    name=\"correctAnswer\"\r\n                                    value={this.state.correctAnswer}\r\n                                    onChange={this.handleTrueFalse}\r\n                                >\r\n                                    <FormControlLabel value=\"true\" control={<Radio />} label=\"True\" />\r\n                                    <FormControlLabel value=\"false\" control={<Radio />} label=\"False\" />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                        </div>\r\n                    }\r\n                    {this.props.isTimelimit &&\r\n                        <FormControl>\r\n                            <TextField\r\n                                label=\"Time limit\"\r\n                                name=\"timelimit\"\r\n                                type=\"number\"\r\n                                value={this.state.timelimit}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('timelimit')}\r\n                            />\r\n                        </FormControl>\r\n                    }\r\n                    <Button onClick={this.sendQuestion} variant=\"contained\">Add question</Button>\r\n                </div >\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default QuestionForm;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\n\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        maxWidth: 400,\r\n    },\r\n});\r\nclass Question extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    }\r\n\r\n    deleteQuestion() {\r\n        this.props.deleteQuestion(this.props.question);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <Card className={classes.card}>\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton onClick={this.deleteQuestion}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={this.props.question.question}\r\n                    subheader={this.props.question.timelimit ? this.props.question.timelimit + ' seconds' : 'default timelimit'}\r\n                />\r\n                <CardContent>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Correct answers</Typography>\r\n                    <List>\r\n                        {this.props.question.correctAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Wrong answers</Typography>\r\n                    <List>\r\n                        {this.props.question.wrongAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                </CardContent>\r\n\r\n\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Question);","import React, { Component } from 'react';\r\nimport QuestionForm from './QuestionForm';\r\nimport Question from './Question';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass Create extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            gametype: 'quiz',\r\n            gamemode: 'normal',\r\n            timelimit: true,\r\n            timescore: false,\r\n            questions: [],\r\n            gameid: '',\r\n            gamePass: '',\r\n        };\r\n        this.addQuestion = this.addQuestion.bind(this);\r\n        this.addQuestions = this.addQuestions.bind(this);\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n        this.validateGame = this.validateGame.bind(this);\r\n        this.createQuiz = this.createQuiz.bind(this);\r\n\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    handleChangeBool = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n    handleChangeSelect = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n    calculateDefaultTimeLimit(question) {\r\n        if (question.aType === 'multiple' || question.aType === 'boolean') {\r\n            return 10 + Math.floor((question.correctAnswers.join().length + question.wrongAnswers.join().length)/ 50);\r\n        } else if (question.aType === \"free\") {\r\n            return 20;\r\n        } else if (question.aType === \"player\") {\r\n            //answer blir 4-8 random utvalda till varje fråga\r\n            return 20;\r\n        }\r\n    }\r\n    addQuestion(question) {\r\n        let questions = this.state.questions;\r\n        if (questions.length === 0) {\r\n            question.id = 1;\r\n        } else {\r\n            //räknar ut ett id som det nuvarande högsta id+1. Kan då använda id både som unik identifierare och som index\r\n            question.id = Math.max.apply(Math, questions.map(function (o) { return o.id; })) + 1;\r\n        }\r\n        if (this.state.timelimit && !question.timelimit) {\r\n            question.timelimit = this.calculateDefaultTimeLimit(question);\r\n        }\r\n        questions.push(question);\r\n        this.setState({\r\n            questions: questions\r\n        });\r\n        let snack = {\r\n            variant: \"success\",\r\n            message: \"Added question\"\r\n        }\r\n        this.props.showSnackbar(snack);\r\n    }\r\n    addQuestions(questions) {\r\n        let existingQuestions = this.state.questions;\r\n        for (let i = 0; i < questions.length; i++) {\r\n            let question = questions[i];\r\n            if (existingQuestions.length === 0) {\r\n                question.id = 1;\r\n            } else {\r\n                question.id = Math.max.apply(Math, existingQuestions.map(function (o) { return o.id; })) + 1;\r\n            }\r\n            if (this.state.timelimit && !question.timelimit) {\r\n                question.timelimit = this.calculateDefaultTimeLimit(question);\r\n            }\r\n            existingQuestions.push(question);\r\n        }\r\n        this.setState({\r\n            questions: existingQuestions\r\n        });\r\n        let snack = {\r\n            variant: \"success\",\r\n            message: \"Added questions\"\r\n        }\r\n        this.props.showSnackbar(snack);\r\n    }\r\n    deleteQuestion(question) {\r\n        let questions = this.state.questions;\r\n        const index = questions.map(e => e.id).indexOf(question.id);\r\n        questions.splice(index, 1);\r\n        this.setState({\r\n            questions: questions\r\n        });\r\n    }\r\n    createQuiz() {\r\n        let game = {};\r\n        game = {\r\n            password: this.state.gamePass,\r\n            gametype: this.state.gametype,\r\n            tile: this.state.title,\r\n            quiz: {\r\n                gamemode: 'normal',\r\n                timelimit: this.state.timelimit,\r\n                timescore: this.state.timescore,\r\n                questions: this.state.questions,\r\n            }\r\n        };\r\n        this.props.createQuiz(game);\r\n    }\r\n    validateGame(game) {\r\n        //validera lösenord är tillräckligt starkt här eller direkt efter input om det finns någon smart lösning.\r\n        //kolla på gametype hur ha en secifik validering för varje type\r\n        return true;\r\n\r\n    }\r\n    clearForm() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-page create-page\">\r\n                <Grid container spacing={24}>\r\n                    <form autoComplete=\"off\">\r\n                        <FormControl required >\r\n                            <InputLabel htmlFor=\"gametype-required\">Gametype</InputLabel>\r\n                            <Select\r\n                                value={this.state.gametype || \"\"}\r\n                                onChange={this.handleChangeSelect}\r\n                                name=\"gametype\"\r\n                                inputProps={{\r\n                                    id: 'gametype-required',\r\n                                }}\r\n                            >\r\n                                <MenuItem value={\"quiz\"}>Quiz</MenuItem>\r\n                                <MenuItem value={\"survey\"}>Survey</MenuItem>\r\n                                <MenuItem value={\"discussion\"}>Discussion</MenuItem>\r\n                                <MenuItem value={\"minigame\"}>Mini game</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl required >\r\n                            <InputLabel htmlFor=\"gametype-required\">Gamemode</InputLabel>\r\n                            <Select\r\n                                value={this.state.gamemode || \"\"}\r\n                                onChange={this.handleChangeSelect}\r\n                                name=\"gamemode\"\r\n                                inputProps={{\r\n                                    id: 'gamemode-required',\r\n                                }}\r\n                            >\r\n                                <MenuItem value={\"normal\"}>Normal</MenuItem>\r\n                                <MenuItem value={\"wild\"}>Wild</MenuItem>\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Game options</FormLabel>\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Switch\r\n                                            checked={this.state.timelimit}\r\n                                            onChange={this.handleChangeBool('timelimit')}\r\n                                            value=\"timelimit\"\r\n                                        />\r\n                                    }\r\n                                    label=\"Time limited questions\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Switch\r\n                                            checked={this.state.timescore}\r\n                                            onChange={this.handleChangeBool('timescore')}\r\n                                            value=\"timescore\"\r\n                                        />\r\n                                    }\r\n                                    label=\"Time based score\"\r\n                                />\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <TextField\r\n                                label=\"Title\"\r\n                                name=\"title\"\r\n                                value={this.state.title}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('title')}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                name=\"gamePass\"\r\n                                margin=\"normal\"\r\n                                value={this.state.gamePass}\r\n                                onChange={this.handleChange('gamePass')}\r\n                            />\r\n                        </FormControl>\r\n                        <Button onClick={this.createQuiz} variant=\"contained\">Create</Button>\r\n                    </form>\r\n                    <QuestionForm addQuestions={this.addQuestions} addQuestion={this.addQuestion} isTimelimit={!!this.state.timelimit} showSnackbar={this.props.showSnackbar} />\r\n                    {this.state.questions.map((question, index) =>\r\n                        <Question key={question.id} question={question} transitionDelay={index} deleteQuestion={this.deleteQuestion} />\r\n                    )}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Create;","import React, { Component } from 'react';\r\nimport { fire } from '../../base';\r\nimport CreateQuiz from '../quiz/create/CreateQuiz';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Create extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gametype: '',\r\n            gameId: '',\r\n        };\r\n        this.createGame = this.createGame.bind(this);\r\n        this.validateGame = this.validateGame.bind(this);\r\n        this.generateGameId = this.generateGameId.bind(this);\r\n\r\n    }\r\n\r\n    setGameType = name => event => {\r\n        this.setState({ gametype: name });\r\n    };\r\n\r\n    createGame(game) {\r\n        game.gameId = this.generateGameId();\r\n        game.created = Date.now();\r\n        game.status = \"CREATED\";\r\n        game.phase = \"setup\";\r\n        if (!this.validateGame(game)) {\r\n            return;\r\n        }\r\n\r\n        let that = this;\r\n        //game push få ett id.\r\n        let gameRef = fire.database().ref('/games').push();\r\n        game.key = gameRef.key;\r\n        gameRef.set(game, function (error) {\r\n            if (error) {\r\n                that.setState({\r\n                    errorText: 'Error: ' + error,\r\n                });\r\n                let snack = {\r\n                    variant: \"error\",\r\n                    message: \"Unexpected internal error\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n            else {\r\n                let snack = {\r\n                    variant: \"success\",\r\n                    message: \"Successfully created!\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n                that.setState({\r\n                    gameId: game.gameId,\r\n                    gametype: 'done'\r\n                });\r\n                localStorage.setItem('RecentGameId', game.gameId);\r\n\r\n                //show gameid and password\r\n                //show button to start game / navigate to host\r\n            }\r\n        });\r\n    }\r\n    validateGame(game) {\r\n        //validera lösenord är tillräckligt starkt här eller direkt efter input om det finns någon smart lösning.\r\n        //kolla på gametype hur ha en secifik validering för varje type\r\n        let snack = {\r\n            variant: \"error\",\r\n            message: \"explain error or errors/\"\r\n        }\r\n        //this.props.showSnackbar(snack);\r\n        return true;\r\n\r\n    }\r\n\r\n    generateGameId() {\r\n        let id = \"\";\r\n        let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-page create-page\">\r\n                {!this.state.gametype && <Grid container spacing={24}>\r\n                    <Button onClick={this.setGameType(\"quiz\")} variant=\"contained\">Quiz</Button>\r\n                    <Button onClick={this.setGameType(\"survey\")} variant=\"contained\">Survey</Button>\r\n                    <Button onClick={this.setGameType(\"minigame\")} variant=\"contained\">Mini game</Button>\r\n                    <Button onClick={this.setGameType(\"discussion\")} variant=\"contained\">Discussion</Button>\r\n                </Grid>}\r\n                {this.state.gametype === \"quiz\" && <CreateQuiz createQuiz={this.createGame} showSnackbar={this.props.showSnackbar} />}\r\n                {this.state.gametype === \"done\" &&\r\n                    <div>\r\n                        <Typography variant=\"h3\">Created game ID: {this.state.gameId}</Typography>\r\n                        <Link to={'/host'}>Host game</Link>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Create;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Switch from '@material-ui/core/Switch';\r\nclass PhaseSetup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            surveyPlayers: false,\r\n            answerStreak: true,\r\n            nameGenerator: false,\r\n            useTeams: false,\r\n            randomizeQuestionOrder: false,\r\n            autoPlayQuestions: false,\r\n\r\n        };\r\n        this.startGame = this.startGame.bind(this);\r\n        this.createTeamGame = this.createTeamGame.bind(this);\r\n        this.createClassicGame = this.createClassicGame.bind(this);\r\n\r\n\r\n    }\r\n    handleChangeBool = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    createTeamGame() {\r\n        this.startGame(true);\r\n    }\r\n    createClassicGame() {\r\n        this.startGame(false);\r\n    }\r\n    startGame(teamMode) {\r\n        let game = {};\r\n        let quiz = this.props.game.quiz;\r\n        quiz.surveyPlayers = this.state.surveyPlayers;\r\n        quiz.answerStreak = this.state.answerStreak;\r\n        quiz.nameGenerator = this.state.nameGenerator;\r\n        quiz.useTeams = teamMode;\r\n        quiz.autoPlayQuestions = this.state.autoPlayQuestions;\r\n        quiz.randomizeQuestionOrder = this.state.randomizeQuestionOrder;\r\n        quiz.currentQuestion = 0;\r\n\r\n        game.quiz = quiz;\r\n        game.phase = \"connection\";\r\n        game.status = \"IN_PROGRESS\";\r\n        this.props.gameFunc.update(game);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h2\">Game Settings</Typography>\r\n                <Button onClick={this.createClassicGame} variant=\"contained\">Classic</Button>\r\n                <Button onClick={this.createTeamGame} variant=\"contained\">Team mode</Button>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.nameGenerator}\r\n                                    onChange={this.handleChangeBool('nameGenerator')}\r\n                                    value=\"nameGenerator\"\r\n                                />\r\n                            }\r\n                            label=\"Generate names for players\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.answerStreak}\r\n                                    onChange={this.handleChangeBool('answerStreak')}\r\n                                    value=\"answerStreak\"\r\n                                />\r\n                            }\r\n                            label=\"Use answer scorestreak\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.surveyPlayers}\r\n                                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                                    value=\"surveyPlayers\"\r\n                                />\r\n                            }\r\n                            label=\"Survey players after game\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.randomizeQuestionOrder}\r\n                                    onChange={this.handleChangeBool('randomizeQuestionOrder')}\r\n                                    value=\"randomizeQuestionOrder\"\r\n                                />\r\n                            }\r\n                            label=\"Randomize question order\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.autoPlayQuestions}\r\n                                    onChange={this.handleChangeBool('autoPlayQuestions')}\r\n                                    value=\"autoPlayQuestions\"\r\n                                />\r\n                            }\r\n                            label=\"Auto play questions\"\r\n                        />\r\n\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseSetup;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass PhaseConnection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"starting\" });\r\n    }\r\n    //add function to kick player\r\n    render() {\r\n        let players = this.props.game.players;\r\n        if (!players) {\r\n            players = [];\r\n        } else {\r\n            players = Object.values(players);\r\n        }\r\n        return (\r\n            <div className=\"phase-container\">\r\n\r\n                <div className=\"quiz-top-section\">\r\n                    <Typography variant=\"h3\">Join game with Game ID: {this.props.game.gameId}</Typography>\r\n                    <Typography variant=\"h4\">{this.props.game.title}</Typography>\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Grid container>\r\n                        {players.map((player, index) =>\r\n                            <Grid key={index} item xs={3}>\r\n                                <Typography className=\"big-caption\" paragraph variant=\"caption\">{player.name}</Typography>\r\n                            </Grid>)}\r\n                    </Grid>\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                    <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PhaseConnection;","import React, { Component } from 'react';\r\nimport './CountdownAnimation.scss';\r\n\r\nclass CountdownAnimation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n      if(this.props.speed === \"slow\"){\r\n\r\n        return (\r\n          <div className=\"demo_slow\">\r\n<div className=\"demo_slow__colored-blocks\">\r\n  <div className=\"demo_slow__colored-blocks-rotater\">\r\n    <div className=\"demo_slow__colored-block\"></div>\r\n    <div className=\"demo_slow__colored-block\"></div>\r\n    <div className=\"demo_slow__colored-block\"></div>\r\n    <div className=\"demo_slow__colored-block\"></div>\r\n  </div>\r\n  <div className=\"demo_slow__colored-blocks-inner\"></div>\r\n  <div className=\"demo_slow__text\">Ready</div>\r\n</div>\r\n<div className=\"demo_slow__inner\">\r\n  <svg className=\"demo_slow__numbers\" viewBox=\"0 0 100 100\">\r\n    <defs>\r\n      <path className=\"demo_slow__num-path-1\" d=\"M40,28 55,22 55,78\"/>\r\n      <path className=\"demo_slow__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\"/>\r\n      <path className=\"demo_slow__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\"/>\r\n      <path className=\"demo_slow__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\"/>\r\n      <path className=\"demo_slow__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\"/>\r\n    </defs>\r\n    <path className=\"demo_slow__numbers-path\" \r\n          d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19 \r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73 \r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83 \r\n          l0,-61 L40,28\" />\r\n  </svg>\r\n</div>\r\n</div>\r\n        );\r\n      }else{\r\n        return (\r\n          <div className=\"demo\">\r\n<div className=\"demo__colored-blocks\">\r\n  <div className=\"demo__colored-blocks-rotater\">\r\n    <div className=\"demo__colored-block\"></div>\r\n    <div className=\"demo__colored-block\"></div>\r\n    <div className=\"demo__colored-block\"></div>\r\n    <div className=\"demo__colored-block\"></div>\r\n  </div>\r\n  <div className=\"demo__colored-blocks-inner\"></div>\r\n  <div className=\"demo__text\">Ready</div>\r\n</div>\r\n<div className=\"demo__inner\">\r\n  <svg className=\"demo__numbers\" viewBox=\"0 0 100 100\">\r\n    <defs>\r\n      <path className=\"demo__num-path-1\" d=\"M40,28 55,22 55,78\"/>\r\n      <path className=\"demo__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\"/>\r\n      <path className=\"demo__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\"/>\r\n      <path className=\"demo__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\"/>\r\n      <path className=\"demo__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\"/>\r\n    </defs>\r\n    <path className=\"demo__numbers-path\" \r\n          d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19 \r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73 \r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83 \r\n          l0,-61 L40,28\" />\r\n  </svg>\r\n</div>\r\n</div>\r\n        );\r\n      }\r\n    }\r\n}\r\n\r\nexport default CountdownAnimation;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"awaiting_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h2\">Starting quiz</Typography>\r\n                <CountdownAnimation speed=\"slow\" />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"show_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n            <Typography variant=\"h2\">Loading next question</Typography>\r\n                <CountdownAnimation speed=\"slow\"/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        let question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n        this.setState({ question })\r\n        let phaseTime = 3000 + (question.question.length * 20);\r\n        setTimeout(this.nextPhase, phaseTime);\r\n    }\r\n    nextPhase() {\r\n        let answers = [];\r\n        if (this.state.question.aType === 'multiple') {\r\n            answers = this.state.question.wrongAnswers.concat(this.state.question.correctAnswers);\r\n            answers = this.shuffle(answers);\r\n        } else if (this.state.question.aType === 'boolean') {\r\n            answers = ['True', 'False'];\r\n        }\r\n        if (answers.length) {\r\n            let game = {};\r\n            game.phase = \"answer\";\r\n            game.quiz = this.props.game.quiz;\r\n            game.quiz.questions[game.quiz.currentQuestion].answers = answers;\r\n            this.props.gameFunc.update(game);\r\n\r\n        } else {\r\n            this.props.gameFunc.update({ phase: \"answer\" });\r\n        }\r\n    }\r\n    shuffle(array) {\r\n        let counter = array.length;\r\n        while (counter > 0) {\r\n            let index = Math.floor(Math.random() * counter);\r\n            counter--;\r\n            let temp = array[counter];\r\n            array[counter] = array[index];\r\n            array[index] = temp;\r\n        }\r\n        return array;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseShowQuestion;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    playAnswer: {\r\n        width: '50vw',\r\n        height: '50vh',\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    icon:{\r\n        float: 'left',\r\n        fontSize: '28',\r\n        color: 'white',\r\n        marginLeft: '10px'\r\n    },\r\n    answer:{\r\n        fontSize: '24',\r\n        color: 'white',\r\n    }\r\n});\r\n\r\nconst answerStyles = [{\r\n    icon: <CakeIcon />,\r\n    color: '#80DEEA',\r\n},\r\n{\r\n    icon: <ExtensionIcon />,\r\n    color: '#EF9A9A',\r\n},\r\n{\r\n    icon: <FavoriteIcon />,\r\n    color: '#CE93D8',\r\n},\r\n{\r\n    icon: <StarIcon />,\r\n    color: '#C5E1A5'\r\n}];\r\n\r\nclass AnswerOption extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n        /*\r\n                        på play answer vill jag inte skriva texten utan bara ha rätt färg + symbol. play answer ska vara större. men det kanske jag kan fixa via cssklass i playanswer.\r\n                        på host answer har jag rätt färg symbol + text\r\n        \r\n                        symboler icons: hjärta,stjärna,blomma (filter_vintage), berg, pusselbit(extension), cloud\r\n                        trekant, fyrkant, cirkel,\r\n                        1,2,3,4 (finns som icon)\r\n                        a,b,c,d (finns inte om icon)\r\n                        välj 4 coola färger, grön röd blå gul?\r\n                        tänk på att det kan vara två alternativ\r\n        */\r\n    }\r\n\r\n    render() {\r\n        let design = answerStyles[this.props.index];\r\n        const { classes } = this.props;\r\n        return (<div>\r\n            {this.props.answerQuestion && <Paper onClick={() => { this.props.answerQuestion(this.props.answer) }} className={classes.playAnswer} style={{ backgroundColor: design.color }}>\r\n            <div className=\"button-answer-icon\">{design.icon}</div>\r\n            </Paper>\r\n            }\r\n            {!this.props.answerQuestion && <Paper className={classes.paper} style={{ backgroundColor: design.color }}>\r\n                <div className={classes.icon}>{design.icon}</div>\r\n                <div className={classes.answer}>{this.props.answer}</div>\r\n            </Paper>\r\n            }\r\n        </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerOption);","import React, { Component } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nconst styles = theme => ({\r\n    text: {\r\n        marginBottom: '-200px',\r\n        fontSize: '86px',\r\n        paddingTop: '160px',\r\n    },\r\n    circle: {\r\n        color: '#6JpDK4',\r\n\r\n    }\r\n});\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        //let currentCount = this.props.startValue - this.props.value;\r\n        let currentCount = this.props.value === null ? this.props.startValue : this.props.value;\r\n        let startValue = this.props.startValue;\r\n        if (startValue < 1) {\r\n            startValue = 1;\r\n        }\r\n        if (currentCount < 0) {\r\n            currentCount = 0;\r\n        }\r\n        let completed = currentCount / startValue;\r\n\r\n\r\n        return (\r\n            <div className={classes.container}>\r\n                <Typography variant=\"caption\" className={classes.text}>{this.props.text}</Typography>\r\n                <CircularProgress className={classes.circle}\r\n                    classes={{\r\n                        colorSecondary: classes.circle,\r\n                    }}\r\n                    variant=\"static\"\r\n                    value={completed * 100}\r\n                    thickness={4}\r\n                    size={300}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withStyles(styles)(Timer);","import React, { Component } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    bar: {\r\n        color: '#32386D'\r\n    }\r\n});\r\nclass AnswerCounter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h4\">Answers collected</Typography>\r\n                <LinearProgress className={classes.bar} variant=\"determinate\" value={this.props.value} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerCounter);","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport AnswerOption from '../AnswerOption';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Timer from '../../common/Timer';\r\nimport AnswerCounter from './AnswerCounter';\r\nclass PhaseAnswer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: null,\r\n            timelimit: 0,\r\n            started: false,\r\n            isTimelimited: true,\r\n            question: {\r\n                question: '',\r\n                answers: [],\r\n            },\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let that = this;\r\n        let question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n        this.setState({ question: question, isTimelimited: this.props.game.quiz.timelimit, timelimit: question.timelimit * 10 });\r\n        if (this.props.game.quiz.timelimit) {\r\n\r\n            let playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n            let counter = question.timelimit * 10;\r\n            let i = setInterval(function () {\r\n                let answersCollected = 0;\r\n                for (let i = 0; i < playerKeys.length; i++) {\r\n                    if (that.props.game.players[playerKeys[i]].answers && that.props.game.players[playerKeys[i]].answers[question.id]) {\r\n                        answersCollected++;\r\n                    }\r\n                }\r\n                counter--;\r\n                that.setState({ counter: counter, started: true });\r\n                if (counter <= -5 || answersCollected === playerKeys.length) {\r\n                    that.nextPhase();\r\n                    clearInterval(i);\r\n                }\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"result_question\" });\r\n    }\r\n    render() {\r\n        let answers = [];\r\n        if (this.props.game) {\r\n            answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n        }\r\n        let answersCollected = 0;\r\n        let playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n            if (this.props.game.players[playerKeys[i]].answers && this.props.game.players[playerKeys[i]].answers[this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id]) {\r\n                answersCollected++;\r\n            }\r\n        }\r\n        let answerCollectedPercentage = (answersCollected / playerKeys.length) * 100;\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                    <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    {!this.state.isTimelimited && <Button onClick={this.nextPhase}>Next</Button>}\r\n                    {this.state.isTimelimited && <Timer startValue={this.state.timelimit} value={this.state.counter} text={Math.ceil(this.state.counter / 10)} />\r\n                    }\r\n                    <div className=\"quiz-answercounter-container\">\r\n                        <AnswerCounter value={answerCollectedPercentage} />\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n\r\n                    <Grid container spacing={8}>\r\n                        {answers.map((answer, index) =>\r\n                            <Grid key={index} item xs={6}>\r\n                                <AnswerOption answer={answer} index={index} />\r\n                            </Grid>)}\r\n                    </Grid>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default PhaseAnswer;","import React, { Component } from 'react';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst colors = ['#80DEEA', '#EF9A9A', '#CE93D8', '#C5E1A5'];\r\nconst MAX_PLAYERS = 20;\r\nconst PLAYER_BAR_HEIGHT_INCREMENT = 30;\r\nconst MAX_HEIGHT_PODIUM = 740;\r\nclass Podium extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getChartData = this.getChartData.bind(this);\r\n        this.getChartOptions = this.getChartOptions.bind(this);\r\n        this.getChartHeight = this.getChartHeight.bind(this);\r\n\r\n    }\r\n    getChartData() {\r\n        let chartData = {\r\n            labels: [],\r\n            datasets: [{\r\n                data: [],\r\n                label: 'podium',\r\n                backgroundColor: [],\r\n                borderWidth: 1,\r\n            }]\r\n        };\r\n\r\n        let playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n        let rawPlayerData = [];\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n            let playerScoreData = {};\r\n            let player = this.props.game.players[playerKeys[i]];\r\n            let score = 0;\r\n            if (player.answers) {\r\n                for (let j = 0; j < Object.keys(player.answers).length; j++) {\r\n                    let question = this.props.game.quiz.questions[j];\r\n                    let answer = player.answers[question.id];\r\n                    if (answer) {\r\n                        score += answer.score;\r\n                    }\r\n                }\r\n                playerScoreData.score = score;\r\n                playerScoreData.name = player.name;\r\n                rawPlayerData.push(playerScoreData);\r\n            }\r\n        }\r\n        rawPlayerData.sort((a, b) => b.score - a.score); // For ascending sort\r\n        let maxIndex = rawPlayerData.length > MAX_PLAYERS ? MAX_PLAYERS : rawPlayerData.length;\r\n        for (let i = 0; i < maxIndex; i++) {\r\n            chartData.labels.push(rawPlayerData[i].name);\r\n            chartData.datasets[0].data.push(rawPlayerData[i].score);\r\n            chartData.datasets[0].backgroundColor.push(colors[i % 4]);\r\n        }\r\n\r\n        return chartData;\r\n    }\r\n    getChartHeight() {\r\n        let chartData = this.getChartData();\r\n        let height = 70 + (chartData.labels.length * PLAYER_BAR_HEIGHT_INCREMENT);\r\n        if (height > MAX_HEIGHT_PODIUM) {\r\n            height = MAX_HEIGHT_PODIUM;\r\n        }\r\n        return height;\r\n    }\r\n\r\n    getChartOptions() {\r\n        let chartHeight = this.getChartHeight();\r\n        let padding = (MAX_HEIGHT_PODIUM - chartHeight) / 2;\r\n        let options = {\r\n            maintainAspectRatio: false,\r\n            showTooltips: false,\r\n            responsiveAnimationDuration: 1000,\r\n            animation: {\r\n                easing: 'easeInOutCubic',\r\n                duration: '2000',\r\n                onProgress: function (animation) {\r\n                    animation.animationObject.onAnimationProgress = function () {\r\n                        let ctx = this.chart.ctx;\r\n                        let chart = this.chart;\r\n                        ctx.textAlign = \"center\";\r\n                        ctx.textBaseline = \"bottom\";\r\n                        ctx.font = \"20px Roboto\";\r\n\r\n                        let stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n                        let meta = chart.getDatasetMeta(0);\r\n                        if (!meta.hidden) {\r\n                            meta.data.forEach(function (element, index) {\r\n                                // Draw the text in black, with the specified font\r\n\r\n                                // Just naively convert to string for now\r\n                                let dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio).toString();\r\n                                ctx.fillStyle = colors[index % 4];\r\n\r\n                                let position = element.tooltipPosition();\r\n                                ctx.fillText(dataString, position.x+2+(dataString.length*6), position.y + (element._model.height/2));\r\n                            });\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                },\r\n            },\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    },\r\n                    display: true,\r\n                    beginAtZero: true,\r\n                }],\r\n                xAxes: [{\r\n                    display: true,\r\n                    beginAtZero: true,\r\n                }]\r\n            },\r\n            legend: {\r\n                display: false,\r\n            },\r\n            tooltips: {\r\n                enabled: false\r\n            },\r\n            events: [],\r\n            layout: {\r\n                padding: {\r\n                    left: 0,\r\n                    right: 60,\r\n                    top: padding,\r\n                    bottom: padding,\r\n                }\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n    getWinnerString() {\r\n        return \"Congratulations [name of player]! \";\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <HorizontalBar data={this.getChartData} height={MAX_HEIGHT_PODIUM}\r\n                    options={this.getChartOptions()} />\r\n                <Typography variant=\"caption\">{this.getWinnerString()}</Typography>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Podium;","import React, { Component } from 'react';\r\nimport Podium from './Podium';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h2\">Final score</Typography>\r\n\r\n                    <Podium game={this.props.game} />\r\n                </div>\r\n                <div className=\"align-bottom \">\r\n                    <div>\r\n                        <Button onClick={() => alert('new game')}>Save results</Button>\r\n                        <Button onClick={() => alert('new game')}>Analyse results</Button>\r\n                        <Button onClick={() => alert('new game')}>Start survey</Button>\r\n                        <Button onClick={() => alert('new game')}>Create new game</Button>\r\n                        <Button onClick={() => alert('new game')}>Quit game</Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\nconst PUBLIC_PATH = process.env.PUBLIC_URL;\r\n\r\nconst answerStyles = [{\r\n    icon: <CakeIcon />,\r\n    color: '#80DEEA',\r\n},\r\n{\r\n    icon: <ExtensionIcon />,\r\n    color: '#EF9A9A',\r\n},\r\n{\r\n    icon: <FavoriteIcon />,\r\n    color: '#CE93D8',\r\n},\r\n{\r\n    icon: <StarIcon />,\r\n    color: '#C5E1A5'\r\n}];\r\n\r\nclass AnswerChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getChartData = this.getChartData.bind(this);\r\n        this.getChartOptions = this.getChartOptions.bind(this);\r\n        this.getChartHeight = this.getChartHeight.bind(this);\r\n\r\n    }\r\n    getChartData() {\r\n        let chartData = {\r\n            labels: [],\r\n            datasets: [{\r\n                data: [],\r\n                label: 'asdf',\r\n                backgroundColor: [],\r\n                borderWidth: 1,\r\n            }]\r\n        };\r\n        let data = this.props.getAnswerData();\r\n        chartData.datasets[0].borderColor = [];\r\n        chartData.datasets[0].data = data.data;\r\n        for (let i = 0; i < data.data.length; i++) {\r\n            chartData.labels.push(\"\");\r\n            chartData.datasets[0].backgroundColor.push(answerStyles[i].color);\r\n        }\r\n\r\n        return chartData;\r\n    }\r\n    getChartHeight() {\r\n        let answerData = this.props.getAnswerData();\r\n        let topvalue = Math.max(...answerData.data);\r\n        let incrementHeightPerAnswer = 25;\r\n        //räcker 65?\r\n        let minHeight = 65;\r\n        let maxHeight = 300;\r\n        let height = minHeight + (topvalue * incrementHeightPerAnswer);\r\n        if (height > maxHeight) {\r\n            return maxHeight;\r\n        }\r\n        return height;\r\n    }\r\n\r\n    getChartOptions() {\r\n        let that = this;\r\n        let options = {\r\n            maintainAspectRatio: false,\r\n            showTooltips: false,\r\n            responsiveAnimationDuration: 1000,\r\n            animation: {\r\n                easing: 'easeInOutCubic',\r\n                duration: '2000',\r\n                onProgress: function (animation) {\r\n                    let answerData = that.props.getAnswerData();\r\n                    animation.animationObject.onAnimationProgress = function () {\r\n                        let ctx = this.chart.ctx;\r\n                        let chart = this.chart;\r\n                        ctx.textAlign = \"center\";\r\n                        ctx.fillStyle = \"black\";\r\n                        ctx.textBaseline = \"bottom\";\r\n                        ctx.font = \"24px Roboto\";\r\n\r\n                        let stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n\r\n                        let meta = chart.getDatasetMeta(0);\r\n                        if (!meta.hidden) {\r\n                            meta.data.forEach(function (element, index) {\r\n                                // Draw the text in black, with the specified font\r\n\r\n                                // Just naively convert to string for now\r\n                                let dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio);\r\n\r\n                                let position = element.tooltipPosition();\r\n                                ctx.fillStyle = answerStyles[index].color;\r\n                                ctx.fillText(dataString, position.x, position.y - 2);\r\n                                ctx.beginPath();\r\n                                ctx.rect(position.x - element._view.width / 2, chart.height - 32, element._view.width, 22);\r\n                                ctx.fill();\r\n                                if (answerData.correctAnswers.indexOf(index) > -1) {\r\n\r\n                                    let img = new Image();\r\n                                    img.src = PUBLIC_PATH +\"/baseline-done_outline-24px.svg\";\r\n                                    img.height = 100;\r\n                                    img.width = 100;\r\n                                    let ypos = chart.height - 34;\r\n                                    //ta bort onlead wrapper för att göra det instant\r\n                                    ctx.drawImage(img, position.x - 12, ypos);\r\n\r\n                                }\r\n                            });\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        /*\r\n                                                for (let i = 0; i < answerData.data.length; i++) {\r\n                                                    let value = Math.floor(answerData.data[i] * stepratio);\r\n                                                    //om det inte är någon som svarar så blir meta[0] undefined första gången. går jag in på nytt på gamet som host så fungerar det\r\n                                                    //ha någon specifik hantering för om ingen har svarat alls\r\n                                                    var meta = this.chart.getDatasetMeta(0);\r\n                                                    let metadata = meta.data[i];\r\n                        \r\n                                                    ctx.fillStyle = answerStyles[i].color;\r\n                                                    ctx.fillText(value, metadata._view.x, metadata._view.y - 2);\r\n                                                    ctx.beginPath();\r\n                                                    ctx.rect(metadata._view.x - metadata._view.width / 2, this.chart.height - 32, metadata._view.width, 22);\r\n                                                    ctx.fill();\r\n                                                    if (answerData.correctAnswers.indexOf(i) > -1) {\r\n                        \r\n                                                        let img = new Image();\r\n                                                        img.src = \"/baseline-done_outline-24px.svg\";\r\n                                                        img.height = 100;\r\n                                                        img.width = 100;\r\n                                                        let ypos = this.chart.height - 34;\r\n                                                        //ta bort onlead wrapper för att göra det instant\r\n                                                        ctx.drawImage(img, metadata._view.x - 12, ypos);\r\n                        \r\n                                                    }\r\n                                                }\r\n                        \r\n                                                */\r\n                    }\r\n\r\n\r\n                },\r\n            },\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    },\r\n                    display: false,\r\n                    beginAtZero: true,\r\n                }],\r\n                xAxes: [{\r\n                    display: false,\r\n                }]\r\n            },\r\n            legend: {\r\n                display: false,\r\n            },\r\n            tooltips: {\r\n                enabled: false\r\n            },\r\n            events: [],\r\n            layout: {\r\n                padding: {\r\n                    left: 0,\r\n                    right: 0,\r\n                    top: 25,\r\n                    bottom: 40,\r\n                }\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Bar data={this.getChartData} height={this.getChartHeight()}\r\n                options={this.getChartOptions()} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default AnswerChart;","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Table from '@material-ui/core/Table';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    table: {\r\n        maxWidth: 700,\r\n        whiteSpace: 'nowrap',\r\n    },\r\n});\r\n\r\nclass Leaderboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            leaderboardData: this.getLeaderboardData(),\r\n            page: 0,\r\n            rowsPerPage: 10,\r\n        };\r\n        this.startScoreCounter = this.startScoreCounter.bind(this);\r\n\r\n    }\r\n    componentDidMount() {\r\n        setTimeout(this.startScoreCounter, 2000);\r\n\r\n\r\n    }\r\n    startScoreCounter() {\r\n        let that = this;\r\n        let i = setInterval(function () {\r\n            let newLeaderBoard = that.state.leaderboardData;\r\n            let done = true;\r\n            for (let i = 0; i < newLeaderBoard.players.length; i++) {\r\n                let player = newLeaderBoard.players[i];\r\n                if (player.currentQuestionScore > 0) {\r\n                    done = false;\r\n                    player.currentQuestionScore--;\r\n                    player.totalScore++;\r\n                }\r\n            }\r\n            newLeaderBoard.players.sort(function (a, b) {\r\n                return (b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0;\r\n            });\r\n            that.setState({ leaderboard: newLeaderBoard });\r\n            if (done) {\r\n                clearInterval(i);\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    getLeaderboardData() {\r\n        let leaderboard = {\r\n            players: [],\r\n        };\r\n        let playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n\r\n        let currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n        let playerList = [];\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n            let playerScoreData = {};\r\n            let player = this.props.game.players[playerKeys[i]];\r\n            let score = 0;\r\n            if (player.answers) {\r\n                for (let j = 0; j < Object.keys(player.answers).length; j++) {\r\n                    let question = this.props.game.quiz.questions[j];\r\n                    let answer = player.answers[question.id];\r\n                    if (answer) {\r\n\r\n                        if (answer.questionId === currentQuestion.id) {\r\n                            playerScoreData.currentQuestionScore = answer.score;\r\n                            playerScoreData.lastScore = answer.score;\r\n\r\n                        } else {\r\n                            score += answer.score;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            playerScoreData.totalScore = score;\r\n            playerScoreData.name = player.name;\r\n            playerScoreData.key = player.key;\r\n            playerList.push(playerScoreData);\r\n        }\r\n\r\n        playerList.sort(function (a, b) {\r\n            return (b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0;\r\n        });\r\n        leaderboard.players = playerList;\r\n        leaderboard.currentQuestionId = currentQuestion.id;\r\n        return leaderboard;\r\n\r\n    }\r\n    getLeaderboardScore(player) {\r\n        if (player.currentQuestionScore === 0) {\r\n            return player.totalScore + \" (+\" + player.lastScore + \")\";\r\n        } else {\r\n            return player.totalScore + \"           \";\r\n            //return player.totalScore + \" (+\" + player.currentQuestionScore + \")\";\r\n        }\r\n    }\r\n    handleChangePage = (event, page) => {\r\n        this.setState({ page });\r\n    };\r\n    handleChangeRowsPerPage = event => {\r\n        this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { leaderboardData, rowsPerPage, page } = this.state;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Table className={classes.table}>\r\n                    <TableBody>\r\n                        {leaderboardData.players.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((player, index) =>\r\n                            <TableRow key={player.key}>\r\n                                <TableCell padding=\"dense\" numeric>{index + 1}</TableCell>\r\n                                <TableCell>{player.name}</TableCell>\r\n                                <TableCell>{this.getLeaderboardScore(player)}</TableCell>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n                {leaderboardData.players.length > 10 && <TablePagination\r\n                    component=\"div\"\r\n                    count={leaderboardData.players.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'Previous Page',\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'Next Page',\r\n                    }}\r\n                    onChangePage={this.handleChangePage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n\r\n                />}\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Leaderboard);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\nimport { Typography } from '@material-ui/core';\r\nimport AnswerChart from './AnswerChart';\r\nimport Leaderboard from './Leaderboard';\r\n\r\n\r\nclass PhaseResultQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n        this.nextQuestion = this.nextQuestion.bind(this);\r\n        this.finalizeQuiz = this.finalizeQuiz.bind(this);\r\n        this.getAnswerData = this.getAnswerData.bind(this);\r\n        this.getTopScorerString = this.getTopScorerString.bind(this);\r\n\r\n    }\r\n    //om jag vill försvåra fusk så gömmer jag correctanswer/wronganswers från Play.js och gör rättningen i Host genom att play bara anger vilket svarsalternativ de valt\r\n    //i host när jag kommer hit så rättar jag alla svar och updaterar varje players score\r\n    //play for tillbaka updateringen och visar score och rätt/fel. \r\n    //\r\n\r\n    //alternativet som är mindre säkert men effektivare datamässigt är att play rättar och skriver score, då slipper jag också spara hur snabbt spelaren svarade utan kan göra scoreberäkningen \"offline\"\r\n    //kör på detta alternativ då det är snabbast att bygga.\r\n\r\n    /*\r\n                HostResultQuestion: nu är det dags att börja visa resultat. se över om min datastruktur är hållbar?\r\nmed answers, currenq, osv. jag vill ha staplar likt kahootöver hur många som röstade på varje och en top lista över scoresom fylls i lite coolt med animationer\r\nTypräkna upp poängen och ha en horizontel stapel som visualiserar hur mycket någon leder .\r\ni play.js så visas det personliga resultatetsamt sin placering totalt. även där cool animation med score som räknar upp\r\nsvg animationer? ettkilomjol stats.js?? skipa chart lib. gör en helt egen komponent som animeras. eller nej ta in chart.js och ha enkel bar chart för result.\r\ncorrect answer är en vissfärg eller nåt. rita ut siffran på dem. leaderboard rendreras i en componentdör score räknas upp ett i taget,\r\nkolla på javascript för det.kanske ha npgon bakgrund på en div som matchar width till storlek?\r\nleader=100% och alla andra är en bråkdel av leaders score iw idth\r\n\r\n\r\nstrukturera upp denna vy och hostanswer vyn till 3 segment. top middle bottom. top där frågan visas, middle där counter/resultatet visas, bottom där svarsalternativen visas.\r\nanvänd Grid och vh för att få till detta. kolla kahoot. top 20vh, middle 40vh, bottom 40vh?\r\nlägg till någon färg/symbol på varje svarsalternativ använd index för att styra vilken som får vilket, ha fyra olika designer.\r\nkolla om jag ska använda chart.js för svarsresultatet, finns det någon enkel chart med bara staplarna utan axlar och text? lägg till texten själv? någon annan lib? det ska se ut som kahhot\r\nmed siffra för hur många som valde ett alternaiv och markering för vilket som var det rätta.\r\nha en enkel tabell för leaderboard? men fixa så poängen strömas in. alt en horozontal bar\r\n\r\nhttps://stackoverflow.com/questions/31631354/how-to-display-data-values-on-chart-js\r\naxis.display=false;\r\ndetta + rätt färg + en extra symbol på det rätta svaret så är vi hemma!\r\n\r\n                                3. fixa finalResultHost: podium.js + leaderboard(?) (tänker mig att podium är en barchart med top 3 eller 10 players?)\r\n                                yaxeln är baserad på totalscore. ovanför eller i baren verticalt så skrivs namnet. score visas också och räknas upp likt answerChart.\r\n                                Det hela är väldigt likt answerChart. informationen som ska visas på varje bar är totalscore, position, playername,\r\n                                Vinnarens namn ska presenteras nedan i större text och med guldkrona? istället för att hålla på med baren.\r\n                                playerPodium visas på playerFinalResult: den innehåller bara en stapel för playern själv och namnet visas inte?\r\n                                finalresult kan även innehålla lite rolig fakta som vem som svarade snabbast, \r\n                                playerfinalresult kan innehålla en hel tabell där man kan se alla sina svar! \r\n                                frågenummer, score, time (grön eller röd rad), klickar man på en rad får man se hela frågan med alla alternativ, vilket som var rätt och vilket man själv svarade \r\n                                5. phaseEndHost: action för restart, create new game, save result(export), \r\n                                \r\n                                6.phaseEndPlay: thanks for playing, creat your own game here..\r\n                                7. testa ha en \"chat\" i finalresult/connecting. en ruta där varje Play kan skriva ett meddelande som sedan visas upp i host :)\r\n                                7. kolla på snake. test hur reaktionstiden är i quiz från när play klickar till host skriver ut answers collected:\r\n    */\r\n    nextQuestion() {\r\n        let game = {};\r\n        game.quiz = this.props.game.quiz;\r\n        game.quiz.currentQuestion = game.quiz.currentQuestion + 1;\r\n        game.phase = \"awaiting_question\";\r\n        this.props.gameFunc.update(game);\r\n\r\n    }\r\n    finalizeQuiz() {\r\n        this.props.gameFunc.update({ phase: \"final_result\" });\r\n\r\n    }\r\n\r\n    getAnswerData() {\r\n        let answerData = {\r\n            data: [],\r\n            topPlayer: {\r\n                score: 0,\r\n                playerKey: ''\r\n            },\r\n            correctAnswers: [],\r\n        };\r\n        let playerAnswers = [];\r\n        let playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n        let currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n            let player = this.props.game.players[playerKeys[i]];\r\n            if (!player.answers) {\r\n                continue;\r\n            }\r\n            let answer = player.answers[currentQuestion.id];\r\n            if (answer) {\r\n\r\n                playerAnswers.push(answer.answer);\r\n                if (answer.score > answerData.topPlayer.score) {\r\n                    answerData.topPlayer.score = answer.score;\r\n                    answerData.topPlayer.playerKey = player.key;\r\n                }\r\n            }\r\n        }\r\n        for (let j = 0; j < currentQuestion.answers.length; j++) {\r\n            let nrOfAnswers = 0;\r\n            for (let i = 0; i < playerAnswers.length; i++) {\r\n                if (currentQuestion.answers.indexOf(playerAnswers[i]) === j) {\r\n                    nrOfAnswers++;\r\n                }\r\n            }\r\n            answerData.data.push(nrOfAnswers);\r\n\r\n            if (currentQuestion.correctAnswers.indexOf(currentQuestion.answers[j]) > -1) {\r\n                answerData.correctAnswers.push(j);\r\n            }\r\n        }\r\n\r\n        return answerData;\r\n    }\r\n    getTopScorerString() {\r\n        let result = \"\";\r\n        let answerData = this.getAnswerData();\r\n        if (answerData.topPlayer.score === 0) {\r\n            return null;\r\n        }\r\n        let topPlayer = this.props.game.players[answerData.topPlayer.playerKey];\r\n        result = topPlayer.name + \" Scored \" + answerData.topPlayer.score + \" points!\";\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let answers = [];\r\n        let currentQuestion = \"\";\r\n        if (this.props.game) {\r\n            currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n            answers = currentQuestion.answers;\r\n        }\r\n        let nextQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion + 1];\r\n        let isLastQuestion = typeof nextQuestion === \"undefined\";\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                    <Typography variant=\"h2\">{currentQuestion.question}</Typography>\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <div className=\"quiz-answer-chart\">\r\n                                <AnswerChart getAnswerData={this.getAnswerData} />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <div>\r\n                                <Leaderboard game={this.props.game} />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div>\r\n                                {isLastQuestion && <Button onClick={this.finalizeQuiz}>Finalize result</Button>}\r\n                                {!isLastQuestion && <Button onClick={this.nextQuestion}>Next question</Button>}\r\n\r\n                                <Button onClick={this.props.gameFunc.restart}>Restart quiz</Button>\r\n                                <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n                                <Button onClick={this.props.gameFunc.end}>End quiz</Button>\r\n\r\n\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                    <Grid className=\"align-bottom\" container>\r\n                        {answers.map((answer, index) =>\r\n                            <Grid key={index} item xs={6}>\r\n                                <AnswerOption answer={answer} index={index} />\r\n                            </Grid>)}\r\n                    </Grid>\r\n                </div>\r\n            </div >\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default PhaseResultQuestion;","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                HostEnd\r\n                toggleHeader()\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component } from 'react';\r\nimport PhaseSetup from './PhaseSetup';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\n\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"host-container\">\r\n                {this.props.game.phase === \"setup\" && <PhaseSetup game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"connection\" && <PhaseConnection game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"starting\" && <PhaseStarting game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"awaiting_question\" && <PhaseAwaitingQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"show_question\" && <PhaseShowQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"answer\" && <PhaseAnswer game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"result_question\" && <PhaseResultQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"final_result\" && <PhaseFinalResult game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n                {this.props.game.phase === \"end\" && <PhaseEnd game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React, { Component } from 'react';\r\nimport { fire } from '../../base';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Quiz from '../quiz/host/Quiz';\r\n\r\nclass Host extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            game: {},\r\n            gameId: localStorage.getItem('RecentGameId') || '',\r\n            password: '',\r\n\r\n        };\r\n        this.updateGame = this.updateGame.bind(this);\r\n        this.fetchGame = this.fetchGame.bind(this);\r\n        this.initGameListiner = this.initGameListiner.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n        this.quitGame = this.quitGame.bind(this);\r\n        this.endGame = this.endGame.bind(this);\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    updateGame(game) {\r\n        let that = this;\r\n        //se till att inte updatera game.players...\r\n        //game som kommer in här ska bara innehålla det som ska uppdateras.\r\n        //updateras med gamesettings, phasechanges, currenquestionId etc\r\n        fire.database().ref('games/' + that.state.game.key).update(game, function (error) {\r\n            if (error) {\r\n                let snack = {\r\n                    variant: \"error\",\r\n                    message: \"Unexpected internal error\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n            else {\r\n            }\r\n        })\r\n    }\r\n    restartGame(){\r\n       let game = {};\r\n        game.players = [];\r\n       game.phase = \"setup\";\r\n       this.updateGame(game);\r\n    }\r\n\r\n    quitGame(){\r\n        this.updateGame({phase: null});\r\n        this.props.toggleHeader(true);\r\n\r\n\r\n    }\r\n    endGame(){\r\n        this.updateGame({phase: \"final_result\"});\r\n    }\r\n\r\n\r\n    fetchGame() {\r\n        let that = this;\r\n        fire.database().ref('games').orderByChild(\"gameId\").equalTo(that.state.gameId).once(\"value\", function (snapshot) {\r\n            if (snapshot.val()) {\r\n                let game;\r\n                snapshot.forEach(function (child) {\r\n                    game = child.val();\r\n                });\r\n                if (game.password === that.state.password) {\r\n                    that.initGameListiner(game.key);\r\n                    that.props.toggleHeader();\r\n                } else {\r\n                    let snack = {\r\n                        variant: \"error\",\r\n                        message: \"Could not find matching game\"\r\n                    }\r\n                    that.props.showSnackbar(snack);\r\n                }\r\n            } else {\r\n                let snack = {\r\n                    variant: \"info\",\r\n                    message: \"No game found\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n        });\r\n    }\r\n\r\n    initGameListiner(gameKey) {\r\n        var gameRef = fire.database().ref('games/' + gameKey);\r\n        let that = this;\r\n        gameRef.on('value', function (snapshot) {\r\n            let game = snapshot.val();\r\n            if (game) {\r\n                //kan blir problem med asynch setstate?\r\n                that.setState({\r\n                    game: game,\r\n                });\r\n            } else {\r\n                that.setState({\r\n                    game: '',\r\n                });\r\n            }\r\n        });\r\n        //koppla this.state.game till gameKey\r\n        //lägg till en likadan listener i Play.\r\n        //hosts gamelistiner ska lyssna på alla ändringar. Play ska inte lyssna på andra players ändringar om det går. något att optimera i framtiden.\r\n        //ett alt är att lyfta ut Players till en egen root? kan lägga phase och currentq i en game.state och sen är det allt som Player lyssnar på?\r\n        //men play behöver också behöva synca sin egna player.\r\n    }\r\n    render() {\r\n        //behöver bara updatera phase till firebase när det är phases som play bryr sig om. t.ex. inte setup då play bara kan connecta till games som är i phase==connection\r\n        //lägg till två rutor här för att söka fram ett game med hjälp av gameid och pass.\r\n\r\n        //strukturera filerna för host och play. kommentera i varje fil vad syftet med den är. vad den ska updatera i game etc. \r\n        //HostSetup updates settings and sets phase to connection on action\r\n        //connection shows players and sets phase to starting on action\r\n        //starting shows a countdown sets phase to awating_question and currentQuestion to 0(or some id) after countdown\r\n        //awaiting_question shows countdown and sets phase to show question after countdown\r\n        //show_question shows question and sets phase to answer after countdown\r\n        //answer shows q&a, countdown, nrPlayersAnswered, sets phase to result_question after countdown\r\n        //result_question shows stats about the answers, correct answer, hightscorelist etc, sets phase to awaiting_question and currentQuestion++ on action.\r\n        //result_question sets phase to final_result if questions are all done.\r\n        //final_result shows result of all players. top 3 and/or all. sets phase to end on action\r\n        //end shows options for replay, export result, etc.\r\n        let gameFunctions = {\r\n            update: this.updateGame,\r\n            restart: this.restartGame,\r\n            end: this.endGame,\r\n            quit: this.quitGame,\r\n        }\r\n        if (!this.state.game.phase) {\r\n            return (\r\n                <div className=\"page-container host-page\">\r\n                    <Grid container spacing={24}>\r\n                        <form autoComplete=\"off\">\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Game ID\"\r\n                                    name=\"Game ID\"\r\n                                    value={this.state.gameId}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('gameId')}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    margin=\"normal\"\r\n                                    value={this.state.password}\r\n                                    onChange={this.handleChange('password')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.fetchGame} variant=\"contained\">Fetch</Button>\r\n                        </form>\r\n                    </Grid>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"page-container host-page\">\r\n                    {this.state.game.gametype === \"quiz\" && <Quiz game={this.state.game} gameFunc={gameFunctions} />}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Host;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseConnection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            authId: '',\r\n            playerCreated: false,\r\n        };\r\n        this.createPlayer = this.createPlayer.bind(this);\r\n        this.generateName = this.generateName.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        //problem vid restart så skapas en ny användare. test spara playerkey till localhost och testa använda den keyn om den passar\r\n        if (!this.props.playerKey && this.props.game.quiz.nameGenerator) {\r\n            this.props.addPlayer(this.generatePlayer());\r\n        }\r\n    }\r\n    createPlayer() {\r\n        //validera så att namnet inte är taget.\r\n        let player = {\r\n            name: this.state.name,\r\n            score: 0,\r\n\r\n        }\r\n        this.props.addPlayer(player);\r\n        this.setState({ playerCreated: true });\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    generatePlayer() {\r\n        //skriv upp en lista med namn. kanske använda två arrayer en med adjekktiv och en med substantiv \"crazy tomato\" etc. \r\n        //använd generateName(this.game.players) den randomar ett namn, kollar om namnet redan finns och randomar igen isåfall.\r\n        //randomar xx antal gånger sen lägger den till ett extra adjektiv\r\n        let name = this.generateName();\r\n        let player = {\r\n            name: name,\r\n            score: 0,\r\n        }\r\n        return player;\r\n    }\r\n    generateName() {\r\n        let adjectives = [\"adamant\", \"adroit\", \"amatory\", \"animistic\", \"antic\", \"arcadian\", \"baleful\", \"bellicose\", \"bilious\", \"boorish\", \"calamitous\", \"caustic\", \"cerulean\", \"comely\", \"concomitant\", \"contumacious\", \"corpulent\", \"crapulous\", \"defamatory\", \"didactic\", \"dilatory\", \"dowdy\", \"efficacious\", \"effulgent\", \"egregious\", \"endemic\", \"equanimous\", \"execrable\", \"fastidious\", \"feckless\", \"fecund\", \"friable\", \"fulsome\", \"garrulous\", \"guileless\", \"gustatory\", \"heuristic\", \"histrionic\", \"hubristic\", \"incendiary\", \"insidious\", \"insolent\", \"intransigent\", \"inveterate\", \"invidious\", \"irksome\", \"jejune\", \"jocular\", \"judicious\", \"lachrymose\", \"limpid\", \"loquacious\", \"luminous\", \"mannered\", \"mendacious\", \"meretricious\", \"minatory\", \"mordant\", \"munificent\", \"nefarious\", \"noxious\", \"obtuse\", \"parsimonious\", \"pendulous\", \"pernicious\", \"pervasive\", \"petulant\", \"platitudinous\", \"precipitate\", \"propitious\", \"puckish\", \"querulous\", \"quiescent\", \"rebarbative\", \"recalcitant\", \"redolent\", \"rhadamanthine\", \"risible\", \"ruminative\", \"sagacious\", \"salubrious\", \"sartorial\", \"sclerotic\", \"serpentine\", \"spasmodic\", \"strident\", \"taciturn\", \"tenacious\", \"tremulous\", \"trenchant\", \"turbulent\", \"turgid\", \"ubiquitous\", \"uxorious\", \"verdant\", \"voluble\", \"voracious\", \"wheedling\", \"withering\", \"zealous\"];\r\n        let nouns = [\"ninja\", \"chair\", \"pancake\", \"statue\", \"unicorn\", \"rainbows\", \"laser\", \"senor\", \"bunny\", \"captain\", \"nibblets\", \"cupcake\", \"carrot\", \"gnomes\", \"glitter\", \"potato\", \"salad\", \"toejam\", \"curtains\", \"beets\", \"toilet\", \"exorcism\", \"stick figures\", \"mermaid eggs\", \"sea barnacles\", \"dragons\", \"jellybeans\", \"snakes\", \"dolls\", \"bushes\", \"cookies\", \"apples\", \"ice cream\", \"ukulele\", \"kazoo\", \"banjo\", \"opera singer\", \"circus\", \"trampoline\", \"carousel\", \"carnival\", \"locomotive\", \"hot air balloon\", \"praying mantis\", \"animator\", \"artisan\", \"artist\", \"colorist\", \"inker\", \"coppersmith\", \"director\", \"designer\", \"flatter\", \"stylist\", \"leadman\", \"limner\", \"make-up artist\", \"model\", \"musician\", \"penciller\", \"producer\", \"scenographer\", \"set decorator\", \"silversmith\", \"teacher\", \"auto mechanic\", \"beader\", \"bobbin boy\", \"clerk of the chapel\", \"filling station attendant\", \"foreman\", \"maintenance engineering\", \"mechanic\", \"miller\", \"moldmaker\", \"panel beater\", \"patternmaker\", \"plant operator\", \"plumber\", \"sawfiler\", \"shop foreman\", \"soaper\", \"stationary engineer\", \"wheelwright\", \"woodworkers\"];\r\n        let finalName = \"\";\r\n        let currentNames = [];\r\n        if (this.props.game.players) {\r\n            currentNames = Object.values(this.props.game.players).map(a => a.name);\r\n        }\r\n        for (let i = 0; i < 20; i++) {\r\n            let name = \"\";\r\n            if (i > 10) {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            } else {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            }\r\n            if (currentNames.indexOf(name) > -1) {\r\n                continue;\r\n            } else {\r\n                finalName = name;\r\n                break;\r\n            }\r\n        }\r\n        return finalName;\r\n\r\n    }\r\n\r\n    render() {\r\n        let players = this.props.game.players;\r\n        let playerName = '';\r\n        if (players && this.props.playerKey) {\r\n            playerName = players[this.props.playerKey].name;\r\n        }\r\n        return (\r\n            <div className=\"phase-container\">\r\n                {playerName &&\r\n                    <div >\r\n                        <div className=\"quiz-top-section\">\r\n                        </div>\r\n                        <div className='quiz-middle-section'>\r\n                            <Typography variant=\"h4\">Welcome {playerName}! Watch the screen, your name should show.</Typography>\r\n\r\n\r\n                        </div>\r\n                        <div className=\"quiz-bottom-section\">\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {!playerName &&\r\n                    <div>\r\n                        <FormControl>\r\n                            <TextField\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                value={this.state.name}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('name')}\r\n                            />\r\n                        </FormControl>\r\n                        <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseConnection;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h3\">Starting quiz...</Typography>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h3\">Look at the screen.</Typography>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h3\">Question is displayed on the screen.</Typography>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseShowQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\n\r\nclass PhaseAnswer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: 0,\r\n            question: {},\r\n            hasAnswered: false,\r\n            selectedAnswer: ''\r\n        };\r\n        this.answerQuestion = this.answerQuestion.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        let question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n        this.setState({ question: question, startTime: Date.now() });\r\n\r\n    }\r\n    answerQuestion = answer => {\r\n        this.setState({ selectedAnswer: answer, hasAnswered: true });\r\n        let answerTime = Date.now() - this.state.startTime;\r\n        let correct = this.state.question.correctAnswers.indexOf(answer) > -1;\r\n        let score = 0;\r\n        if (correct) {\r\n            switch (this.state.question.difficulty) {\r\n                case \"easy\":\r\n                    score += 100;\r\n                    break;\r\n                case \"medium\":\r\n                    score += 200;\r\n                    break;\r\n                case \"hard\":\r\n                    score += 300;\r\n                    break;\r\n                case undefined:\r\n                    score += 200;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (this.props.game.quiz.timelimit && this.state.question.timelimit) {\r\n                //let timeRemaining = this.state.question.timelimit - answerTime;\r\n                let timeFactorUsed = answerTime / (this.state.question.timelimit * 1000);\r\n                score += Math.floor((score / timeFactorUsed) / 10);\r\n            }\r\n        }\r\n        let playerAnswer = {\r\n            answer: answer,\r\n            score: score,\r\n            answerTime: answerTime,\r\n            questionId: this.state.question.id,\r\n        }\r\n        this.props.saveAnswer(playerAnswer);\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        let answers = [];\r\n        if (this.props.game) {\r\n            answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n        }\r\n        if (this.state.hasAnswered) {\r\n            return (<div className=\"phase-container\">\r\n                You answered: {this.state.selectedAnswer}\r\n            </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <Grid container spacing={8}>\r\n                        {answers.map((answer, index) =>\r\n                            <Grid key={index} item xs={6}>\r\n                                <AnswerOption answer={answer} index={index} answerQuestion={this.answerQuestion} />\r\n                            </Grid>)}\r\n                        )}\r\n                    </Grid>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default PhaseAnswer;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h3\">Look at the screen.</Typography>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseResultQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n        this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n    }\r\n    getPlayerAnswerData() {\r\n        let answerData = {\r\n            totalScore: 0,\r\n            currentQuestionScore: 0,\r\n            newLeaderboardPosition: 1,\r\n            oldLeaderboardPosition: 1,\r\n            answerTime: 0,\r\n            hasAnswered: false,\r\n        };\r\n        let currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n        let currentPlayer = this.props.game.players[this.props.playerKey];\r\n        for (let j = 0; j < Object.keys(currentPlayer.answers).length; j++) {\r\n            let question = this.props.game.quiz.questions[j];\r\n            let answer = currentPlayer.answers[question.id];\r\n            if (answer) {\r\n                if (answer.questionId === currentQuestion.id) {\r\n                    answerData.hasAnswered = true;\r\n                    answerData.currentQuestionScore = answer.score;\r\n                    answerData.answerTime = answer.answerTime;\r\n                }\r\n                answerData.totalScore += answer.score;\r\n            }\r\n        }\r\n\r\n        let playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n            if (playerKeys[i] === currentPlayer.key) {\r\n                continue;\r\n            }\r\n            let player = this.props.game.players[playerKeys[i]];\r\n            let totalScore = 0;\r\n            let currentQuestionScore = 0;\r\n            for (let j = 0; j < Object.keys(player.answers).length; j++) {\r\n                let question = this.props.game.quiz.questions[j];\r\n                let answer = player.answers[question.id];\r\n                if (answer) {\r\n                    if (answer.questionId === currentQuestion.id) {\r\n                        currentQuestionScore = answer.score;\r\n                    }\r\n                    totalScore += answer.score;\r\n                }\r\n            }\r\n            if (totalScore > answerData.totalScore) {\r\n                answerData.newLeaderboardPosition++;\r\n            }\r\n            if (totalScore - currentQuestionScore > answerData.totalScore - answerData.currentQuestionScore) {\r\n                answerData.oldLeaderboardPosition++;\r\n            }\r\n        }\r\n\r\n        return answerData;\r\n    }\r\n    render() {\r\n        let playerData = this.getPlayerAnswerData();\r\n        if (playerData.hasAnswered) {\r\n\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        {playerData.currentQuestionScore > 0 && <Typography variant=\"h3\">Correct answer!</Typography>}\r\n                        {playerData.currentQuestionScore === 0 && <Typography variant=\"h3\">Wrong answer!</Typography>}\r\n\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography>Score:{playerData.totalScore}</Typography>\r\n                        <Typography>Time:{playerData.answerTime/1000} seconds</Typography>\r\n                        {playerData.oldLeaderboardPosition !== playerData.newLeaderboardPosition &&\r\n                            <div>\r\n                                <Typography>Old position:{playerData.oldLeaderboardPosition}</Typography>\r\n                                <Typography>New position:{playerData.newLeaderboardPosition}</Typography>\r\n                            </div>\r\n                        }\r\n                        {playerData.oldLeaderboardPosition === playerData.newLeaderboardPosition &&\r\n                            <Typography>Position:{playerData.newLeaderboardPosition}</Typography>\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                        <Typography>Look at the screen to se overall player results</Typography>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        <Typography variant=\"h3\">You did not answer the question</Typography>\r\n\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography>Score:{playerData.totalScore}</Typography>\r\n                        <Typography>Position:{playerData.newLeaderboardPosition}</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseResultQuestion;","import React, { Component } from 'react';\r\nimport { fire } from '../../../base';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n        this.saveAnswer = this.saveAnswer.bind(this);\r\n    }\r\n\r\n    saveAnswer(answer) {\r\n        let that = this;\r\n        let currentQuestionId = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id;\r\n        fire.database().ref('/games/' + that.props.game.key + '/players/' + this.props.playerKey + '/answers/' + currentQuestionId).set(answer, function (error) {\r\n            if (error) {\r\n                let snack = {\r\n                    variant: \"error\",\r\n                    message: \"Unexpected internal error\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n            else {\r\n                let snack = {\r\n                    variant: \"success\",\r\n                    message: \"Successfully updated player!\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let lastPhase = this.props.game.phase === \"final_result\" || this.props.game.phase === \"end\";\r\n        return (\r\n            <div className=\"play-container\">\r\n                {this.props.game.phase === \"connection\" && <PhaseConnection game={this.props.game} addPlayer={this.props.createPlayer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"starting\" && <PhaseStarting game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"awaiting_question\" && <PhaseAwaitingQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"show_question\" && <PhaseShowQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"answer\" && <PhaseAnswer game={this.props.game} saveAnswer={this.saveAnswer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"result_question\" && <PhaseResultQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n                {lastPhase  && <PhaseFinalResult game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                PlayEnd\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component } from 'react';\r\nimport { fire } from '../../base';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Quiz from '../quiz/play/Quiz';\r\nclass Play extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            game: {},\r\n            gameId: '',\r\n            playerKey: '',\r\n\r\n        };\r\n        this.createPlayer = this.createPlayer.bind(this);\r\n        this.fetchGame = this.fetchGame.bind(this);\r\n    }\r\n\r\n    fetchGame() {\r\n        let that = this;\r\n        fire.database().ref('games').orderByChild(\"gameId\").equalTo(that.state.gameId).once(\"value\", function (snapshot) {\r\n            if (snapshot.val()) {\r\n                let game;\r\n                snapshot.forEach(function (child) {\r\n                    game = child.val();\r\n                });\r\n                //får skapa en ny attribut, canPlayerJoin true/false om det begövs\r\n                if (game.phase === \"connection\") {\r\n                    let storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n                    if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n                        that.setState({ playerKey: storedPlayerKey });\r\n                    }\r\n\r\n                    that.initGameListiner(game.key);\r\n                    let snack = {\r\n                        variant: \"success\",\r\n                        message: \"Connected to game\"\r\n                    }\r\n                    that.props.showSnackbar(snack);\r\n                    that.props.toggleHeader(false);\r\n                } else if (game.phase === \"setup\") {\r\n                    let snack = {\r\n                        variant: \"error\",\r\n                        message: \"Game is not yet started\"\r\n                    }\r\n                    that.props.showSnackbar(snack);\r\n                } else {\r\n                    let storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n                    if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n                        that.setState({ playerKey: storedPlayerKey });\r\n                        that.initGameListiner(game.key);\r\n                        let snack = {\r\n                            variant: \"success\",\r\n                            message: \"Connected to game\"\r\n                        }\r\n                        that.props.showSnackbar(snack);\r\n                        that.props.toggleHeader(false);\r\n                    } else {\r\n                        let snack = {\r\n                            variant: \"error\",\r\n                            message: \"Game is in progress\"\r\n                        }\r\n                        that.props.showSnackbar(snack);\r\n                    }\r\n                }\r\n            } else {\r\n                let snack = {\r\n                    variant: \"info\",\r\n                    message: \"No game found\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n        });\r\n    }\r\n\r\n    initGameListiner(gameKey) {\r\n        var gameRef = fire.database().ref('games/' + gameKey);\r\n        let that = this;\r\n        gameRef.on('value', function (snapshot) {\r\n            let game = snapshot.val();\r\n            if (game) {\r\n                //kan blir problem med asynch setstate?\r\n                that.setState({\r\n                    game: game,\r\n                });\r\n            } else {\r\n                that.setState({\r\n                    game: '',\r\n                });\r\n            }\r\n        });\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    createPlayer(player) {\r\n        let playerRef = fire.database().ref('/games/' + this.state.game.key + '/players').push();\r\n        player.key = playerRef.key;\r\n        let that = this;\r\n        playerRef.set(player, function (error) {\r\n            if (error) {\r\n                let snack = {\r\n                    variant: \"error\",\r\n                    message: \"Unexpected internal error\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n            else {\r\n                that.setState({\r\n                    playerKey: player.key,\r\n                });\r\n                localStorage.setItem('RecentPlayerKey', player.key);\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.game.phase) {\r\n            return (\r\n                <div className=\"page-container play-page\">\r\n                    <Grid container spacing={24}>\r\n                        <form autoComplete=\"off\">\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Game ID\"\r\n                                    name=\"Game ID\"\r\n                                    value={this.state.gameId}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('gameId')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.fetchGame} variant=\"contained\">Join</Button>\r\n                        </form>\r\n                    </Grid>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"page-container play-page\">\r\n                    {this.state.game.gametype === \"quiz\" && <Quiz game={this.state.game} createPlayer={this.createPlayer} playerKey={this.state.playerKey} showSnackbar={this.props.showSnackbar} />}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Play;","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app-page home-page\">\r\n            HOME PAGE\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.dark,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing.unit,\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n    const { classes, className, message, onClose, variant, ...other } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={classNames(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    className={classes.close}\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n    message: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nclass CustomizedSnackbars extends React.Component {\r\n    handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.props.hideSnackbar();\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.props.snack.open}\r\n                    autoHideDuration={6000}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    <MySnackbarContentWrapper\r\n                        onClose={this.handleClose}\r\n                        variant={this.props.snack.variant}\r\n                        message={this.props.snack.message}\r\n                    />\r\n                </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CustomizedSnackbars;","import React, { Component } from 'react';\nimport './App.scss';\nimport { fire } from './base';\nimport Header from './components/common/Header';\nimport Create from './components/pages/Create';\nimport Host from './components/pages/Host';\nimport Play from './components/pages/Play';\nimport Home from './components/pages/Home';\nimport CustomizedSnackbars from './components/common/CustomizedSnackbars';\n\nimport {\n  HashRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snack: '',\n      showHeader: true,\n    };\n    this.showSnackbar = this.showSnackbar.bind(this);\n    this.hideSnackbar = this.hideSnackbar.bind(this);\n    this.toggleHeader = this.toggleHeader.bind(this);\n\n  }\n  hideSnackbar() {\n    let snack = this.state.snack;\n    snack.open = false;\n    this.setState({\n      snack: snack,\n    });\n  }\n  showSnackbar(snack) {\n    snack.open = true;\n    this.setState({\n      snack: snack,\n    });\n  }\n  toggleHeader(value) {\n    this.setState({ showHeader: value });\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {this.state.showHeader && <Header />}\n          <div id=\"content\">\n            <Route exact path=\"/play\" render={() => <Play showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/host\" render={() => <Host showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/create\" render={() => <Create showSnackbar={this.showSnackbar} />} />\n            <Route exact path=\"/\" render={() => <Home />} />\n          </div>\n          {this.state.snack && <CustomizedSnackbars snack={this.state.snack} hideSnackbar={this.hideSnackbar} />}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}