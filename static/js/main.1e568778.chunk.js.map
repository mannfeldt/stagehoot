{"version":3,"sources":["components/minigame/golf/audio/golfwood.wav","components/minigame/golf/audio/golfwood2.wav","components/minigame/golf/audio/golfwood3.wav","components/minigame/golf/audio/golfiron.wav","components/minigame/golf/audio/golfiron2.wav","components/minigame/golf/audio/golfiron3.wav","components/minigame/golf/audio/countdown.wav","components/minigame/golf/audio/golfclap.wav","components/minigame/golf/audio/golfputt.wav","components/minigame/golf/audio/golfscore.wav","components/minigame/golf/img/driverIcon.svg","components/minigame/golf/img/ironIcon.svg","components/minigame/golf/img/putterIcon.svg","components/minigame/golf/img/golfbag.svg","components/minigame/golf/img/fingerprint.svg","components/common/CountdownAnimation.scss","base.js","components/common/Header.js","components/quiz/create/Question.js","components/common/utils/appUtil.js","components/minigame/snake/Snake.js","components/quiz/create/GenerateQuizForm.js","components/quiz/create/QuestionForm.js","components/quiz/create/CreateQuiz.js","components/minigame/create/CreateTetris.js","components/minigame/create/CreateGolf.js","components/minigame/create/CreateSnake.js","components/minigame/create/CreateSpotify.js","components/minigame/create/CreateMinigame.js","components/pages/Create.js","components/quiz/host/PhaseSetup.js","components/quiz/host/PhaseConnection.js","components/common/CountdownAnimation.js","components/quiz/host/PhaseStarting.js","components/quiz/host/PhaseAwaitingQuestion.js","components/quiz/host/PhaseShowQuestion.js","components/quiz/AnswerOption.js","components/common/Timer.js","components/quiz/host/AnswerCounter.js","components/quiz/host/PhaseAnswer.js","components/quiz/Podium.js","components/quiz/host/PhaseFinalResult.js","components/quiz/AnswerChart.js","components/quiz/Leaderboard.js","components/quiz/host/PhaseResultQuestion.js","components/quiz/host/PhaseEnd.js","components/quiz/host/Quiz.js","components/minigame/host/PhaseSetup.js","components/minigame/host/PhaseConnection.js","components/minigame/host/PhaseStarting.js","components/common/utils/minigameUtil.js","components/minigame/host/PhaseFinalResult.js","components/minigame/tetris/Tetris.js","components/minigame/host/PhaseEnd.js","components/minigame/snake/SnakeStarting.js","components/minigame/golf/GolfConstants.js","components/minigame/golf/GolfUtil.js","components/minigame/golf/Golf.js","components/minigame/golf/GolfStarting.js","components/minigame/snake/SnakeSetup.js","components/minigame/golf/GolfSetup.js","components/minigame/spotify/SpotifyConstants.js","components/minigame/spotify/host/SpotifySetup.js","components/minigame/spotify/host/SpotifyConnection.js","components/minigame/spotify/host/SpotifyStarting.js","components/minigame/spotify/host/SpotifyResultQuestion.js","components/minigame/spotify/SpotifyUtil.js","components/minigame/spotify/host/Spotify.js","components/minigame/host/Minigame.js","components/pages/Host.js","components/quiz/play/PhaseConnection.js","components/quiz/play/PhaseStarting.js","components/quiz/play/PhaseAwaitingQuestion.js","components/quiz/play/PhaseShowQuestion.js","components/quiz/play/PhaseAnswer.js","components/quiz/play/PhaseFinalResult.js","components/quiz/play/PhaseResultQuestion.js","components/quiz/play/Quiz.js","components/quiz/play/PhaseEnd.js","components/minigame/golf/GolfController.js","components/minigame/play/PhaseConnection.js","components/minigame/play/PhaseStarting.js","components/minigame/play/PhaseFinalResult.js","components/minigame/snake/SnakeController.js","components/minigame/tetris/TetrisController.js","components/minigame/spotify/SpotifyPlaylistSelector.js","components/minigame/spotify/play/SpotifyConnection.js","components/minigame/spotify/play/SpotifyController.js","components/minigame/spotify/play/SpotifyResultQuestion.js","components/minigame/play/Minigame.js","components/pages/Play.js","components/pages/Home.js","components/common/CustomizedSnackbars.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","cyanColor","redColor","purpleColor","greenColor","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","titleText","options","react_default","a","createElement","id","AppBar_default","position","Toolbar_default","className","Link","to","Component","Question","expanded","deleteQuestion","bind","assertThisInitialized","question","classes","Card_default","card","CardHeader_default","action","IconButton_default","onClick","DeleteOutlined_default","title","subheader","timelimit","CardContent_default","Typography_default","variant","align","List_default","correctAnswers","map","answer","index","ListItem_default","key","ListItemText_default","primary","wrongAnswers","withStyles","theme","maxWidth","calculateDefaultTimeLimit","aType","Math","floor","join","length","parseDOM","s","DOMParser","parseFromString","concat","body","textContent","parseDOMArray","arr","result","i","push","ctx","canvas","GenerateQuizForm","handleChange","name","event","setState","defineProperty","target","value","handleChangeSelect","nrOfQuestions","category","difficulty","generateQuestions","_this$state","_this$props","addQuestions","showSnackbar","url","fetch","then","response","json","generated","response_code","questions","results","generatedQuestion","correct_answer","incorrect_answers","qType","type","snack","message","_this$state2","Grid_default","container","item","xs","md","FormControl_default","fullWidth","TextField_default","label","margin","onChange","InputLabel_default","htmlFor","Select_default","inputProps","MenuItem_default","Button_default","QuestionForm","handleTrueFalse","correctAnswer","wrongAnswerOne","wrongAnswerTwo","wrongAnswerThree","sendQuestion","toggleGenerateQuestion","addQuestion","q","isTimelimit","disabled","create_GenerateQuizForm","required","component","FormLabel_default","RadioGroup_default","aria-label","FormControlLabel_default","control","Radio_default","CreateQuiz","handleChangeBool","checked","gametype","gamemode","timescore","gamePass","createQuiz","max","apply","toConsumableArray","o","qs","e","indexOf","splice","_this$state3","password","tile","quiz","_this2","_this$state4","spacing","index_es","autoComplete","FormGroup_default","Switch_default","create_QuestionForm","create_Question","transitionDelay","CreateTetris","validateGame","createGame","minigame","CreateGolf","holes","scoremode","speedmode","opponentCollision","CreateSnake","racetarget","eatOpponents","wallCollision","CreateSpotify","CreateMinigame","setGameType","create_CreateSnake","create_CreateTetris","create_CreateGolf","create_CreateSpotify","Create","gameId","g","game","possible","charAt","random","generateGameId","created","Date","now","status","phase","that","gameRef","database","ref","set","error","errorText","localStorage","setItem","create_CreateQuiz","create_CreateMinigame","PhaseSetup","surveyPlayers","answerStreak","nameGenerator","remoteMode","useTeams","randomizeQuestionOrder","autoPlayQuestions","startGame","createTeamGame","createClassicGame","teamMode","currentQuestion","gameFunc","update","PhaseConnection","nextPhase","players","values","player","paragraph","CountdownAnimation","speed","viewBox","d","PureComponent","PhaseStarting","counter","startCounter","setInterval","clearInterval","components_common_CountdownAnimation","PhaseAwaitingQuestion","PhaseShowQuestion","phaseTime","setTimeout","answers","shuffle","array","temp","answerStyles","icon","Cake_default","color","ExtensionOutlined_default","FavoriteBorder_default","StarBorder_default","AnswerOption","design","answerQuestion","Paper_default","playAnswer","style","backgroundColor","paper","root","flexGrow","paddingTop","unit","paddingBottom","textAlign","palette","text","secondary","height","width","float","fontSize","marginLeft","fontWeight","Timer","startValue","currentCount","completed","CircularProgress_default","circle","colorSecondary","thickness","size","marginBottom","AnswerCounter","LinearProgress_default","bar","PhaseAnswer","started","isTimelimited","playerKeys","keys","answersCollected","answerCollectedPercentage","common_Timer","ceil","host_AnswerCounter","quiz_AnswerOption","colors","Podium","getChartData","getChartOptions","getChartHeight","chartData","labels","datasets","data","borderWidth","rawPlayerData","playerScoreData","score","j","sort","b","maxIndex","padding","maintainAspectRatio","showTooltips","responsiveAnimationDuration","animation","easing","duration","onProgress","animationObject","onAnimationProgress","chart","textBaseline","font","stepratio","currentStep","numSteps","meta","getDatasetMeta","hidden","forEach","element","dataString","toString","fillStyle","tooltipPosition","fillText","x","y","_model","scales","yAxes","ticks","beginAtZero","display","xAxes","legend","tooltips","enabled","events","layout","left","right","top","bottom","maxHeight","es","getWinnerString","PhaseFinalResult","quiz_Podium","restart","quit","alert","AnswerChart","getAnswerData","answerData","topPlayer","playerKey","playerAnswers","nrOfAnswers","borderColor","beginPath","rect","_view","fill","img","Image","src","PUBLIC_PATH","ypos","drawImage","Leaderboard","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","leaderboardData","getLeaderboardData","startScoreCounter","getScoreCellWidth","newLeaderBoard","done","currentQuestionScore","totalScore","leaderboard","playerList","questionId","lastScore","scoreWidth","Table_default","table","TableBody_default","slice","TableRow_default","TableCell_default","getLeaderboardScore","TablePagination_default","count","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","whiteSpace","PhaseResultQuestion","nextQuestion","finalizeQuiz","isLastQuestion","quiz_AnswerChart","quiz_Leaderboard","end","PhaseEnd","Quiz","host_PhaseSetup","host_PhaseConnection","host_PhaseStarting","host_PhaseAwaitingQuestion","host_PhaseShowQuestion","host_PhaseAnswer","host_PhaseResultQuestion","host_PhaseFinalResult","host_PhaseEnd","multiplayerMode","gridSize","getRandomStartingPosTop","snakes","canvasWidth","snakesDown","filter","direction","existingValues","Set","getRandomStartingPos","getRandomStartingPosBottom","canvasSettings","xMax","getRandomStartingPosRight","yMax","getRandomStartingPosLeft","canvasHeight","round","some","v","detectSelfCollision","snake","detectWallCollision","snakeHead","leftCollison","topCollison","rightCollison","bottomCollison","context","Snake","togglePausGame","isPaused","overlay","window","innerHeight","innerWidth","nrOfFoods","gameTicker","winners","len","actions","moves","pos","minigameUtil","foods","amount","initialFoods","active","settings","border","respawntime","food","background","drawSnakes","generateFood","generateSnakes","resetCanvas","drawFood","detectCollisions","initControllerListener","generateFoods","isEndGame","renderOverlay","app","document","querySelector","getContext","snakeRef","on","snapshot","nextSnake","val","move","console","log","_this$props$game$mini","dead","alive","winner","reduce","prev","current","fillRect","nextSnakes","teleportSnakes","_loop","respawning","startPos","keyPress","currentDirection","movement","up","down","nextMove","shift","coordinate","unshift","collidedFood","find","f","pop","globalCompositeOperation","strokestyle","len2","bodyPos","strokeRect","_this$state5","currentSnake","opponentSnake","k","_this$state6","globalAlpha","headX","headY","snakeName","namePosition","yPos","role","tabIndex","onKeyDown","Tetris","SCREEN_WIDTH","SCREEN_HEIGHT","first","mousePos","particles","rockets","MAX_PARTICLES","loop","save","restore","existingRockets","render","distance","sqrt","pow","randomChance","vel","explode","existingParticles","exists","Particle","shrink","resistance","gravity","flick","alpha","fade","Rocket","explosionColor","launch","rocket","launchFrom","prototype","c","r","gradient","createRadialGradient","addColorStop","arc","PI","closePath","constructor","particle","angle","cos","sin","replayGame","getElementById","cheight","cWidth","winnerScore","marginTop","chunkify","nr","n","out","SNAKE_COLORS","SNAKE_NAMES","SnakeStarting","snakeGenerator","classic","createSnakes","team","createTeamSnakes","coop","createCoopSnakes","actionChunks","snakeId","controlActions","HOLE_HEIGHT","HOLE_CURVE_DEPTH","HOLE_WIDTH","BALL_RADIUS","BALL_RADIUS_CONTROLLER","GRASS_COLOR","SCORE_TERMS","CLUBS","loft","powerFactor","GROUND_COLORS","randInt","min","ballMaterial","p2","groundMaterial","holeMaterial","ballGroundContact","friction","restitution","ballHoleContact","relaxation","BALL_GROUP","GROUND_GROUP","createWorld","world","sleepMode","BODY_SLEEPING","addContactMaterial","newBall","ballShape","radius","collisionGroup","collisionMask","material","ballBody","mass","addShape","angularDamping","damping","sleepTimeLimit","sleepSpeedLimit","getDistanceYards","createAudio","file","snd","Audio","appendChild","getSwingData","club","acceleration","xFactor","YFactor","power","addHolePoints","level","points","Error","idxAfterHole","findIndex","point","hole","x1","x2","holePoints","pointsWithHole","objectSpread","createGround","beforeHole","afterHole","vertsBeforeHole","vertsHole","vertsAfterHole","verts","fromPolygon","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","shapes","Symbol","iterator","next","shape","err","return","createHoleSensor","sensorShape","sensor","sensorBody","getSegmentWidths","totalWidth","minWidth","widths","remainingWidth","calculateStrokeScore","strokes","parScore","3","4","5","abs","par","calculateTimeScore","scoretime","time","levelGen","test","spawn","segmentWidths","numSegments","spawnSegment","rnd","spawnX","spawnY","holeX","holeY","parSetting","flatRatio","holeSegment","minY","maxY","idx","segmentWidth","prevY","boundLow","boundHigh","sample","lastTime","Golf","soundEffects","wood","audio","util","golfwood1Audio","minpower","golfwood2Audio","golfwood3Audio","golfclap","golfclapAudio","iron","golfiron1Audio","golfiron2Audio","golfiron3Audio","putt","golfputtAudio","ballInHole","golfscoreAudio","countdown","countdownAudio","levelData","startTime","expTime","holeSensor","leaderId","matchEndTime","testacceleration","testClubIndex","testBallIndex","balls","nextLevelTimer","scorers","totalScores","currentlevelScores","init","ensurePlayersInBounds","swing","drawGround","drawLevelCompleteHud","drawPlayHud","renderFrame","animate","testSwing","syncPlayersObjectToFirebase","isLevelCompleted","distributeScore","isLoadNextLevel","loadNextLevel","saveGame","setEventHandlers","evt","_this2$state","_game","bodyA","bodyB","scored","currentTime","play","newExpTime","HURRY_UP_MS","scoreTime","scorer","newPlayerState","syncPlayersToFirebase","_this2$state2","stillBalls","velocity","playersToUpdateState","ballIndex","interpolatedPosition","ensuredBalls","ball","lastPos","stroke","lineWidth","strokeStyle","firstPoint","moveTo","lineTo","timeRemaining","term","clubtype","soundEffect","ballToHit","ballX","velocityWithDirection","_this$state7","_this3","_this$state8","groundBodies","addBody","createdPlayers","playerColors","h","tiny","tinycolor","fromRatio","toHexString","assign","syncToFirebase","requestAnimationFrame","_result","playersObj","_this$props2","_this$props3","levelColor","_this$props4","_this$state9","currentRoundScore","deltaTime","step","_this$props5","_this$state10","createdHoleSensor","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","playerUpdates","board","_this$state11","_scorers","completteScorers","currentScorers","currentScore","swingRef","currentPlayer","swingData","_this$state12","_this$state13","clearRect","drawBalls","_this$state14","GolfStarting","SnakeSetup","GolfSetup","CLIENT_ID","MISSING_ALBUM_COVER","MIN_SONGS_PLAYLIST","SpotifySetup","token","getItem","timestamp","redirectUri","location","origin","Headers","append","SpotifyConnection","avatar","alt","SpotifyStarting","SpotifyResultQuestion","tracks","t","track","isValidPlaylist","playlist","total","Spotify","spotifytoken","tokentimestamp","usedQuestions","songplaying","playQuestion","myHeaders","playerArray","maxQuestionsPerList","method","headers","items","added_at","split","preview_url","artists","album","images","playerName","questionTracks","volume","onended","ontimeupdate","host_SpotifyResultQuestion","Minigame","snake_SnakeSetup","minigame_host_PhaseConnection","snake_SnakeStarting","snake_Snake","minigame_host_PhaseFinalResult","minigame_host_PhaseEnd","minigame_host_PhaseSetup","minigame_host_PhaseStarting","tetris_Tetris","golf_GolfSetup","golf_GolfStarting","golf_Golf","host_SpotifySetup","host_SpotifyConnection","host_SpotifyStarting","host_Spotify","Host","updateGame","fetchGame","initGameListiner","restartGame","quitGame","endGame","gameupdate","toggleHeader","orderByChild","equalTo","once","child","gameKey","gameFunctions","host_Quiz","host_Minigame","authId","playerCreated","createPlayer","generateName","addPlayer","generatePlayer","adjectives","nouns","finalName","currentNames","playersInLobby","selectedAnswer","hasAnswered","answerTime","timeFactorUsed","playerAnswer","saveAnswer","panel","getPlayerAnswerData","answerDataList","playerData","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","PlayerQuestionResult","wrongAnswer","oldLeaderboardPosition","newLeaderboardPosition","opponent","currentQuestionId","lastPhase","play_PhaseConnection","play_PhaseStarting","updatePlayer","play_PhaseAwaitingQuestion","play_PhaseShowQuestion","play_PhaseAnswer","play_PhaseResultQuestion","play_PhaseFinalResult","SnakeController","handleAction","playerSnake","allControlActions","displayName","react","includes","ExpandLess_default","ChevronRight_default","ChevronLeft_default","opacity","TetrisController","GolfController","handleClick","anchorEl","currentTarget","handleClose","_this$setState","clubIcons","driverIcon","ironIcon","putterIcon","highestAcceleration","isSwinging","clubIndex","saveSwing","currentState","translate","addEventListener","preventDefault","stopPropagation","_that$state","_that$state2","_event$acceleration","z","xpower","zpower","nextProps","nextState","nextCurrentPlayer","onload","fingerprint","fingerprintIcon","prevSwing","newY","newX","drawSwing","drawStrokes","playerState","drawBall","drawDistance","drawScoreText","open","Boolean","choosenClub","clubwrapper","aria-owns","aria-haspopup","marginRight","golfbagIcon","Menu_default","onClose","menuitemicon","footer","dist_default","minValue","startColor","ringWidth","segments","needleTransitionDuration","needleTransition","textColor","needleColor","endColor","currentValueText","maxValue","header","alignItems","paddingRight","flexWrap","justifyContent","overflow","gridList","transform","titleBar","playlists","setSelection","slimPlaylists","pl","totalSongs","GridList_default","cellHeight","GridListTile_default","cols","rows","GridListTileBar_default","titlePosition","actionIcon","actionPosition","selectedPlaylist","spotifyUser","setPlaylist","display_name","SpotifyPlaylistSelector","SpotifyController","SpotifyResultQuestion_PlayerQuestionResult","minigame_play_PhaseConnection","minigame_play_PhaseStarting","snake_SnakeController","minigame_play_PhaseFinalResult","tetris_TetrisController","golf_GolfController","play_SpotifyConnection","play_SpotifyController","play_SpotifyResultQuestion","callback","Play","recentGameId","recentGame","joinGame","storedPlayerKey","playerRef","newPlayer","play_Quiz","play_Minigame","ListItemAvatar_default","Avatar_default","GolfCourse_default","VideogameAsset_default","ListItemSecondaryAction_default","Home","sm","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","green","dark","amber","iconVariant","other","objectWithoutProperties","Icon","SnackbarContent_default","aria-describedby","classNames","close","Close_default","CustomizedSnackbars","reason","hideSnackbar","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","React","App","showHeader","hash","substring","initial","parts","decodeURIComponent","access_token","HashRouter","common_Header","Route","exact","path","pages_Play","pages_Host","pages_Create","pages_Home","common_CustomizedSnackbars","ReactDOM","src_App_0"],"mappings":"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","file":"static/js/main.1e568778.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/golfwood.f1bbe86f.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfwood2.ca14b160.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfwood3.38090044.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfiron.6846921d.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfiron2.535d13e9.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfiron3.f554f315.wav\";","module.exports = __webpack_public_path__ + \"static/media/countdown.5c685d8c.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfclap.389fcba5.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfputt.464ec7d0.wav\";","module.exports = __webpack_public_path__ + \"static/media/golfscore.f6affd73.wav\";","module.exports = __webpack_public_path__ + \"static/media/driverIcon.664410f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/ironIcon.aff82a3f.svg\";","module.exports = __webpack_public_path__ + \"static/media/putterIcon.017c75cd.svg\";","module.exports = __webpack_public_path__ + \"static/media/golfbag.c7fbd966.svg\";","module.exports = __webpack_public_path__ + \"static/media/fingerprint.deabfcc6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cyanColor\":\"#66b1bb\",\"redColor\":\"#EF9A9A\",\"purpleColor\":\"#CE93D8\",\"greenColor\":\"#9db484\"};","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\n//PROD\r\nvar prodConfig = {\r\n  apiKey: \"AIzaSyB8vYoKiw2DlJycM5bqKKaU4vK_0n7HcsU\",\r\n  authDomain: \"stagehoot.firebaseapp.com\",\r\n  databaseURL: \"https://stagehoot.firebaseio.com\",\r\n  projectId: \"stagehoot\",\r\n  storageBucket: \"stagehoot.appspot.com\",\r\n  messagingSenderId: \"589747985768\"\r\n};\r\n\r\n//DEV\r\n\r\nconst fire = firebase.initializeApp(prodConfig);\r\n\r\nexport { fire }","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { fire } from '../../base';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let titleText = 'Stagehoot';\r\n    if (fire.options.projectId === 'ettkilomjol-dev') {\r\n      titleText = 'Ett Kilo Mjöl DEV';\r\n    }\r\n\r\n    return (\r\n      <div id=\"header\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar className=\"toolbar\">\r\n            <div className=\"appbar-container--left\">\r\n              <Link className=\"appbar-title text-big\" to=\"/\">\r\n                {titleText}\r\n              </Link>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\n\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        maxWidth: 400,\r\n    },\r\n});\r\nclass Question extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    }\r\n\r\n    deleteQuestion() {\r\n        this.props.deleteQuestion(this.props.question);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <Card className={classes.card}>\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton onClick={this.deleteQuestion}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={this.props.question.question}\r\n                    subheader={this.props.question.timelimit ? this.props.question.timelimit + ' seconds' : 'default timelimit'}\r\n                />\r\n                <CardContent>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Correct answers</Typography>\r\n                    <List>\r\n                        {this.props.question.correctAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Wrong answers</Typography>\r\n                    <List>\r\n                        {this.props.question.wrongAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                </CardContent>\r\n\r\n\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Question);","function generateGameId() {\r\n  let id = '';\r\n  const possible = 'ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789';\r\n\r\n  for (let i = 0; i < 6; i++) {\r\n    id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n\r\n  return id;\r\n}\r\nfunction calculateDefaultTimeLimit(question) {\r\n  if (question.aType === 'multiple' || question.aType === 'boolean') {\r\n    return 10 + Math.floor((question.correctAnswers.join().length + question.wrongAnswers.join().length) / 30);\r\n  } if (question.aType === 'free') {\r\n    return 20;\r\n  } if (question.aType === 'player') {\r\n    // answer blir 4-8 random utvalda till varje fråga\r\n    return 20;\r\n  }\r\n  return 20;\r\n}\r\nfunction parseDOM(s) {\r\n  const parser = new DOMParser();\r\n  const dom = parser.parseFromString(\r\n    `<!doctype html><body>${s}`,\r\n    'text/html',\r\n  );\r\n  const decodedString = dom.body.textContent;\r\n  return decodedString;\r\n}\r\n\r\nfunction parseDOMArray(arr) {\r\n  const result = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    result.push(parseDOM(arr[i]));\r\n  }\r\n  return result;\r\n}\r\nexport {\r\n  generateGameId,\r\n  calculateDefaultTimeLimit,\r\n  parseDOMArray,\r\n  parseDOM,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\nimport * as minigameUtil from '../../common/utils/minigameUtil';\r\n\r\nlet ctx;\r\nlet canvas;\r\nconst gridSize = 20;\r\n\r\nclass Snake extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // för att göra det mer smooth. så behöver jag typ dela upp ätandet så att det sker i flera tick? för just nu är ett tick storleken på food och allt annat\r\n    // lite delay när jag ökar speeden. är det olika delay för olika snakes? optimera senare.\r\n    const canvasHeight = Math.floor(window.innerHeight / gridSize) * gridSize;\r\n    const canvasWidth = Math.floor(window.innerWidth / gridSize) * gridSize;\r\n    const nrOfFoods = props.game.minigame.snakes.length * 2;\r\n\r\n    this.state = {\r\n      gameTicker: null,\r\n      ticks: 0,\r\n      winners: [],\r\n      snakes: minigameUtil.getSnakesInStartingPosition(props.game.minigame.snakes, { height: canvasHeight, width: canvasWidth }),\r\n      foods: minigameUtil.getInitialFoods(nrOfFoods),\r\n      settings: {\r\n        snake: {\r\n          size: gridSize,\r\n          speed: props.game.minigame.difficulty,\r\n          border: '#000',\r\n          respawntime: 3,\r\n        },\r\n        food: {\r\n          background: '#EC5E0B',\r\n          border: '#73AA24',\r\n        },\r\n        canvas: {\r\n          height: canvasHeight,\r\n          width: canvasWidth,\r\n          background: '#F5F5F5',\r\n          border: '#000',\r\n        },\r\n      },\r\n    };\r\n\r\n    this.drawSnakes = this.drawSnakes.bind(this);\r\n    this.generateFood = this.generateFood.bind(this);\r\n    this.generateSnakes = this.generateSnakes.bind(this);\r\n    this.resetCanvas = this.resetCanvas.bind(this);\r\n    this.drawFood = this.drawFood.bind(this);\r\n    this.detectCollisions = this.detectCollisions.bind(this);\r\n    this.initControllerListener = this.initControllerListener.bind(this);\r\n    this.generateFoods = this.generateFoods.bind(this);\r\n    this.isEndGame = this.isEndGame.bind(this);\r\n    this.togglePausGame = this.togglePausGame.bind(this);\r\n    this.renderOverlay = this.renderOverlay.bind(this);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const {\r\n      snakes, settings,\r\n    } = this.state;\r\n    const app = document.querySelector('#snakeboard');\r\n\r\n    canvas = app.querySelector('canvas');\r\n    ctx = canvas.getContext('2d');\r\n    this.resetCanvas();\r\n    this.generateSnakes();\r\n    this.generateFoods();\r\n    const that = this;\r\n    const gameTicker = setInterval(() => {\r\n      if (that.state.isPaused) {\r\n        if (that.state.overlay) {\r\n          return;\r\n        }\r\n        that.renderOverlay();\r\n        return;\r\n      }\r\n      if (that.state.winners.length === 0) {\r\n        that.resetCanvas();\r\n        that.generateSnakes();\r\n        that.generateFoods();\r\n        that.detectCollisions();\r\n        that.isEndGame();\r\n      } else {\r\n        that.nextPhase();\r\n      }\r\n    }, settings.snake.speed);\r\n\r\n    this.setState({ gameTicker });\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      this.initControllerListener(snake);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    // kan jag ha det här?\r\n\r\n    return false;\r\n  }\r\n\r\n  togglePausGame = () => {\r\n    // async!!\r\n    this.setState(state => ({\r\n      isPaused: !state.isPaused,\r\n      overlay: false,\r\n    }));\r\n  }\r\n\r\n  nextPhase() {\r\n    const {\r\n      gameTicker, snakes, winners, ticks,\r\n    } = this.state;\r\n    const { game, gameFunc } = this.props;\r\n    clearInterval(gameTicker);\r\n    game.minigame.snakes = snakes;\r\n    game.minigame.winners = winners;\r\n    game.minigame.ticks = ticks;\r\n    game.phase = 'final_result';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  initControllerListener(snake) {\r\n    const { game } = this.props;\r\n    const snakeRef = fire.database().ref(`/games/${game.key}/minigame/snakes/${snake.id}`);\r\n    const that = this;\r\n    snakeRef.on('value', (snapshot) => {\r\n      const nextSnake = snapshot.val();\r\n      if (nextSnake && !that.state.isPaused) {\r\n        that.setState((state) => {\r\n          const snakes = [...state.snakes];\r\n          // kolla så att detta är okej sätt, blir snakes index alltid rätt kopplat till snake.id? ska jag fixa ett riktigt ID för att vara säker? alltså ett pushid\r\n          if (nextSnake.move) {\r\n            snakes[snake.id].moves.push(nextSnake.move);\r\n          }\r\n          return {\r\n            snakes,\r\n          };\r\n        });\r\n      } else {\r\n        console.log('move error');\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  isEndGame() {\r\n    const { snakes } = this.state;\r\n    const { game: { minigame: { gamemode, racetarget } } } = this.props;\r\n\r\n    // if survavalmode continue game if more than 1 snake is alive\r\n    // kolla performance på denna filter funktion jämfört med loopen under\r\n    if (gamemode === 'survival' && snakes.filter(s => !s.dead).length > 1) {\r\n      return;\r\n      /*\r\n      const l = snakes.length;\r\n      let alive = 0;\r\n      for (let i = 0; i < l; i++) {\r\n        if (!snakes[i].dead) {\r\n          alive += 1;\r\n        }\r\n        if (alive > 1) {\r\n          return;\r\n        }\r\n      }\r\n      */\r\n    }\r\n    // if race continue game if no one has reached racetarget\r\n    if (gamemode === 'race' && !snakes.some(s => s.body.length >= racetarget)) {\r\n      return;\r\n    }\r\n\r\n    // its gameover, lets find the winner/winners\r\n    let winners = [];\r\n    if (gamemode === 'survival') {\r\n      const alive = snakes.filter(s => !s.dead);\r\n      if (alive.length === 1) {\r\n        winners = alive;\r\n      } else {\r\n        const winner = snakes.reduce((prev, current) => ((prev.score > current.score) ? prev : current));\r\n        winners.push(winner);\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      winners = snakes.filter(s => s.body.length >= racetarget);\r\n    }\r\n    this.setState(() => ({\r\n      winners,\r\n      isPaused: true,\r\n      overlay: false,\r\n    }));\r\n\r\n    /*\r\n\r\n    if (gamemode === 'survival') {\r\n      if (snakes.length === 1 && snakes[0].dead) {\r\n        winners.push(snakes[0]);\r\n      } else {\r\n        for (let i = 0; i < l; i++) {\r\n          if (!snakes[i].dead) {\r\n            winners.push(snakes[i]);\r\n          }\r\n          // should not be possible as she check for this first thing in this function\r\n          // if (winners.length > 1) {\r\n          //  return;\r\n          // }\r\n        }\r\n        // om det inte finns någon levande alla så betyder det att de sista tog samtidigt. då vinner den som är längst av alla\r\n        if (winners.length === 0) {\r\n          let winnerIndex = 0;\r\n          let highestScore = 0;\r\n          for (let i = 0; i < l; i++) {\r\n            if (snakes[i].score > highestScore) {\r\n              winnerIndex = i;\r\n              highestScore = snakes[i].score;\r\n            }\r\n          }\r\n          winners.push(snakes[winnerIndex]);\r\n        }\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      for (let i = 0; i < l; i++) {\r\n        if (snakes[i].body.length >= racetarget) {\r\n          winners.push(snakes[i]);\r\n        }\r\n      }\r\n    }\r\n    if (winners.length > 0) {\r\n      this.setState(() => ({\r\n        winners,\r\n        isPaused: true,\r\n        overlay: false,\r\n      }));\r\n    }\r\n    */\r\n  }\r\n\r\n  resetCanvas() {\r\n    const { settings } = this.state;\r\n    canvas.width = settings.canvas.width;\r\n    canvas.height = settings.canvas.height;\r\n\r\n    ctx.fillStyle = settings.canvas.background;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  generateSnakes() {\r\n    // i alla såna här dpelarspecifika metoder måste jag ta in vilken snake/player det gäller\r\n    const { snakes, foods, settings } = this.state;\r\n    const { game } = this.props;\r\n    const nextSnakes = [];\r\n    const teleportSnakes = !game.minigame.wallCollision;\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      // behöver jag göra en copy? spelar det någon roll?\r\n      const snake = snakes[i];\r\n      if (snake.respawning) {\r\n        if (Date.now() > snake.respawntime) {\r\n          snake.dead = false;\r\n          snake.respawning = false;\r\n        }\r\n        nextSnakes.push(snake);\r\n        continue;\r\n      } else if (snake.dead) {\r\n        if (game.minigame.gamemode === 'survival') {\r\n          snake.body = [];\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        } else if (game.minigame.gamemode === 'race') {\r\n          const xMax = settings.canvas.width - gridSize;\r\n          const yMax = settings.canvas.height - gridSize;\r\n          const startPos = minigameUtil.getRandomCanvasPositionMargin(yMax, xMax);\r\n          snake.body = [{\r\n            x: startPos.x,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - gridSize,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 2),\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 3),\r\n            y: startPos.y,\r\n          }];\r\n          snake.direction = 'right';\r\n          snake.respawning = true;\r\n          snake.respawntime = Date.now() + (settings.snake.respawntime * 1000);\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        }\r\n      }\r\n      // testa denna perfomance mot tidigare switch. ngåon skillnad? kan tänka mig att denna är lite långsammare då jag måste definera alla 4directions varje gång\r\n      const movement = {\r\n        up: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y === 0) ? canvas.height - gridSize : snake.body[0].y - gridSize,\r\n        },\r\n        down: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y >= canvas.height - gridSize) ? 0 : snake.body[0].y + gridSize,\r\n        },\r\n        right: {\r\n          x: teleportSnakes && (snake.body[0].x >= canvas.width - gridSize) ? 0 : snake.body[0].x + gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n        left: {\r\n          x: teleportSnakes && (snake.body[0].x === 0) ? canvas.width - gridSize : snake.body[0].x - gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n      };\r\n      const nextMove = snake.moves.shift();\r\n      if (!minigameUtil.isInvalidMove(nextMove, snake.direction)) {\r\n        snake.direction = nextMove;\r\n      }\r\n\r\n      // The snake moves by adding a piece to the beginning \"this.snake.unshift(coordinate)\" and removing the last piece \"this.snake.pop()\"\r\n      // Except when it eats the food in which case there is no need to remove a piece and the added piece will make it grow\r\n      const coordinate = movement[snake.direction];\r\n      snake.body.unshift(coordinate);\r\n\r\n      const collidedFood = foods.find(f => f.active && snake.body[0].x === f.x && snake.body[0].y === f.y);\r\n\r\n      if (collidedFood) {\r\n        snake.score += 10;\r\n        collidedFood.active = false;\r\n      } else {\r\n        snake.body.pop();\r\n      }\r\n      nextSnakes.push(snake);\r\n    }\r\n    this.setState(state => ({\r\n      snakes: nextSnakes,\r\n      foods,\r\n      ticks: state.ticks + 1,\r\n    }));\r\n    // kan det inte blir problem här? litar jag på att state.snakes hunnit updateras innan de ritas ut? ska jag inte skicka in det? drawSnakes(nextSNakes)\r\n    // och sen updaterar jag state efteråt?\r\n    this.drawSnakes(nextSnakes);\r\n  }\r\n\r\n  drawSnakes(nextSnakes) {\r\n    const { settings, ticks } = this.state;\r\n    ctx.globalCompositeOperation = 'multiply';\r\n    ctx.strokestyle = settings.snake.border;\r\n    for (let i = 0, len = nextSnakes.length; i < len; i++) {\r\n      const snake = nextSnakes[i];\r\n      if (snake.respawning && ticks % 2 === 0) {\r\n        ctx.fillStyle = settings.canvas.background;\r\n      } else {\r\n        ctx.fillStyle = snake.color;\r\n      }\r\n      // Draw each piece\r\n\r\n      // om två snakes är över varandra så finns en schysst style för det som han gick igenom på öredev. där färgerna från båda kan blandas till en ljusare eller mörkar.\r\n      for (let j = 0, len2 = snake.body.length; j < len2; j++) {\r\n        const bodyPos = snake.body[j];\r\n        ctx.fillRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n        ctx.strokeRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n      }\r\n\r\n\r\n      // this.game.direction = this.game.nextDirection;\r\n    }\r\n    /*\r\n        jag kör rakt av på direction, verkar fungera och snabbare response då? om jag vill ha tillbaka nextdirection så ta fram denna metod och sätt i snakeListenern att den ska sätta nextDirection\r\n        this.setState(function (state, props) {\r\n            let snakes = state.snakes;\r\n            for (let i = 0; i < snakes.length; i++) {\r\n                snakes[i].direction = snakes[i].nextDirection;\r\n            }\r\n            return {\r\n                snakes: snakes,\r\n            };\r\n        });\r\n        */\r\n  }\r\n\r\n  generateFoods() {\r\n    const { foods } = this.state;\r\n    // fungerar detta? const och ingen kopia? blir det updaterat? risk att allt blir object istället för arrays? cost [foods] = this.state?\r\n    // const nextFoods = [...foods ];\r\n    for (let i = 0, len = foods.length; i < len; i++) {\r\n      let food = foods[i];\r\n      if (!food.active) {\r\n        food = this.generateFood();\r\n      }\r\n      this.drawFood(food);\r\n      foods[i] = food;\r\n    }\r\n    this.setState(() => ({\r\n      foods,\r\n    }));\r\n  }\r\n\r\n  generateFood() {\r\n    const { snakes, settings } = this.state;\r\n\r\n    const xMax = settings.canvas.width - gridSize;\r\n    const yMax = settings.canvas.height - gridSize;\r\n\r\n    const x = Math.round((Math.random() * xMax) / gridSize) * gridSize;\r\n    const y = Math.round((Math.random() * yMax) / gridSize) * gridSize;\r\n    /*\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      const collision = snake.body.some(b => b.x === x && b.y === y);\r\n      if (collision) {\r\n        return this.generateFood();\r\n      }\r\n    }\r\n    */\r\n    // fungerar denna tro?\r\n    const collision = snakes.some(s => s.body.some(b => b.x === x && b.y === y));\r\n    if (collision) {\r\n      return this.generateFood();\r\n    }\r\n    return {\r\n      active: true,\r\n      x,\r\n      y,\r\n    };\r\n  }\r\n\r\n  drawFood(food) {\r\n    const { settings } = this.state;\r\n    // denna metod kallas lite väl många gånger?? ioptimera?\r\n    ctx.fillStyle = settings.food.background;\r\n    ctx.strokestyle = settings.food.border;\r\n\r\n    ctx.fillRect(food.x, food.y, gridSize, gridSize);\r\n    ctx.strokeRect(food.x, food.y, gridSize, gridSize);\r\n  }\r\n\r\n  detectCollisions() {\r\n    // bryt ut de olika detectcollision till purecfunctions? optiering viktigt\r\n    // ha olika modes för krock med motståndare\r\n    // 2. krock med motståndare så händer inget\r\n    // 3. krock med motståndare så äts motståndaren upp (head-on-head så dör båda)\r\n    // 4. korck med motståndare så dör man\r\n    // modes krock med vägg:\r\n    // 1. man dör\r\n    // 2. man kommer ut på andra sidan\r\n    // vad händer om man får en selfcollision sammtidigt som någon får en opponentcollision i den?\r\n    // mode dö:\r\n    // när man dör så får man återställs man till liten mask\r\n    // när man dör så är man död för alltid\r\n\r\n    // Self collison\r\n    // It's impossible for the first 3 pieces of the snake to self collide so the loop starts at 4\r\n\r\n    // fixa en bättre metod för alla snakes senare\r\n\r\n    // fundra och test som det här är den mest effektiva lösningen? eller om jag gör några checks i onödan?\r\n    // jag vill nog bara göra en gemensam setState call efter den här loopen. så alla ändringar för t.ex. handleDeath\r\n    let { snakes } = this.state;\r\n    const { game: { minigame } } = this.props;\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      if (snakes[i].dead) {\r\n        continue;\r\n      }\r\n      if (minigameUtil.detectSelfCollision(snakes[i])) {\r\n        // vilken av dessa fungerar?\r\n        snakes[i].dead = true;\r\n        // snakes[i].dead = true;\r\n\r\n        // this.handleDeath(snake);\r\n      }\r\n      if (minigame.wallCollision && minigameUtil.detectWallCollision(snakes[i].body[0], canvas.height, canvas.width)) {\r\n        snakes[i].dead = true;\r\n      }\r\n    }\r\n\r\n    if (minigame.opponentCollision) {\r\n      // här inne så ändrar jag om i snakes genom att döda dem som ska dödas och klyver om det ska klyvas osv. det som returneras ska vara korrekta snakes\r\n      snakes = minigameUtil.detectOpponentCollision(snakes, minigame.eatOpponents);\r\n    }\r\n    this.setState(() => ({\r\n      snakes,\r\n    }));\r\n  }\r\n\r\n  renderOverlay() {\r\n    const { ticks, snakes, winners } = this.state;\r\n    const { game } = this.props;\r\n    this.setState(() => ({\r\n      overlay: true,\r\n    }));\r\n    ctx.globalAlpha = 0.4;\r\n    ctx.textAlign = 'center';\r\n    ctx.font = '100px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    if (ticks === 1) {\r\n      ctx.fillText('Click to start', canvas.width / 2, canvas.height / 2);\r\n    } else if (winners.length > 0) {\r\n      ctx.fillText('Game over', canvas.width / 2, canvas.height / 2);\r\n    } else {\r\n      ctx.fillText('Paused', canvas.width / 2, canvas.height / 2);\r\n    }\r\n    ctx.globalAlpha = 1;\r\n    ctx.font = '20px roboto';\r\n\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const snake = snakes[i];\r\n      if (!snake.body[0]) {\r\n        continue;\r\n      }\r\n      let headX = Math.max(gridSize, snake.body[0].x);\r\n      let headY = Math.max(gridSize, snake.body[0].y);\r\n      if (headX >= canvas.width) {\r\n        headX = canvas.width - (gridSize * 2);\r\n      }\r\n      if (headY >= canvas.height) {\r\n        headY = canvas.height - (gridSize * 2);\r\n      }\r\n      const snakeName = snake.playerKeys.length === 1 ? game.players[snake.playerKeys[0]].name : snake.name;\r\n      ctx.fillStyle = snake.color;\r\n\r\n      const namePosition = {\r\n        right: { textAlign: 'center', yPos: headY - (gridSize / 5) },\r\n        left: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        up: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        down: { textAlign: 'start', yPos: headY + (gridSize * 2) },\r\n      };\r\n      ctx.textAlign = namePosition[snake.direction].textAlign;\r\n      ctx.fillText(snakeName, headX, namePosition[snake.direction].yPos);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\" id=\"snakeboard\" role=\"button\" tabIndex={0} onClick={this.togglePausGame} onKeyDown={this.togglePausGame}>\r\n        <canvas />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnake.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default Snake;\r\n","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport PropTypes from 'prop-types';\r\nimport { parseDOM, parseDOMArray } from '../../common/utils/appUtil';\r\n\r\n\r\nclass GenerateQuizForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nrOfQuestions: '10',\r\n      category: '0',\r\n      difficulty: '0',\r\n      aType: '0',\r\n\r\n    };\r\n    this.generateQuestions = this.generateQuestions.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  generateQuestions() {\r\n    const {\r\n      nrOfQuestions, category, difficulty, aType,\r\n    } = this.state;\r\n    const { addQuestions, showSnackbar } = this.props;\r\n    let url = 'https://opentdb.com/api.php?';\r\n    if (nrOfQuestions !== '0') {\r\n      url += `amount=${nrOfQuestions}`;\r\n    }\r\n    if (category !== '0') {\r\n      url += `&category=${category}`;\r\n    }\r\n    if (difficulty !== '0') {\r\n      url += `&difficulty=${difficulty}`;\r\n    }\r\n    if (aType !== '0') {\r\n      url += `&type=${aType}`;\r\n    }\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then((generated) => {\r\n        if (generated.response_code === 0) {\r\n          const questions = [];\r\n          for (let i = 0; i < generated.results.length; i++) {\r\n            const generatedQuestion = generated.results[i];\r\n            const question = {\r\n              question: parseDOM(generatedQuestion.question),\r\n              correctAnswers: [parseDOM(generatedQuestion.correct_answer)],\r\n              wrongAnswers: parseDOMArray(generatedQuestion.incorrect_answers),\r\n              qType: 'text',\r\n              aType: generatedQuestion.type,\r\n              category: generatedQuestion.category,\r\n              difficulty: generatedQuestion.difficulty,\r\n            };\r\n            questions.push(question);\r\n          }\r\n          addQuestions(questions);\r\n        } else {\r\n          const snack = {\r\n            variant: 'error',\r\n            message: `Could not generate questions( code: ${generated.response_code})`,\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      nrOfQuestions, category, difficulty, aType,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                label=\"Number of questions\"\r\n                name=\"nrOfQuestions\"\r\n                value={nrOfQuestions}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('nrOfQuestions')}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"category\">Category</InputLabel>\r\n              <Select\r\n                value={category || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"category\"\r\n                inputProps={{\r\n                  id: 'category',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any category</MenuItem>\r\n                <MenuItem value=\"9\">General Knowledge</MenuItem>\r\n                <MenuItem value=\"10\">Entertainment: Books</MenuItem>\r\n                <MenuItem value=\"11\">Entertainment: Film</MenuItem>\r\n                <MenuItem value=\"12\">Entertainment: Music</MenuItem>\r\n                <MenuItem value=\"13\">Entertainment: Musicals and Theatres</MenuItem>\r\n                <MenuItem value=\"14\">Entertainment: Television</MenuItem>\r\n                <MenuItem value=\"15\">Entertainment: Video Games</MenuItem>\r\n                <MenuItem value=\"16\">Entertainment: Board Games</MenuItem>\r\n                <MenuItem value=\"17\">Science and Nature</MenuItem>\r\n                <MenuItem value=\"18\">Science: Computers</MenuItem>\r\n                <MenuItem value=\"19\">Science: Mathematics</MenuItem>\r\n                <MenuItem value=\"20\">Mythology</MenuItem>\r\n                <MenuItem value=\"21\">Sports</MenuItem>\r\n                <MenuItem value=\"22\">Geography</MenuItem>\r\n                <MenuItem value=\"23\">History</MenuItem>\r\n                <MenuItem value=\"24\">Politics</MenuItem>\r\n                <MenuItem value=\"25\">Art</MenuItem>\r\n                <MenuItem value=\"26\">Celebrities</MenuItem>\r\n                <MenuItem value=\"27\">Animals</MenuItem>\r\n                <MenuItem value=\"28\">Vehicles</MenuItem>\r\n                <MenuItem value=\"29\">Entertainment: Comics</MenuItem>\r\n                <MenuItem value=\"30\">Science: Gadgets</MenuItem>\r\n                <MenuItem value=\"31\">Entertainment: Japanese Anime and Manga</MenuItem>\r\n                <MenuItem value=\"32\">Entertainment: Cartoon and Animations</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"difficulty\">Difficulty</InputLabel>\r\n              <Select\r\n                value={difficulty || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"difficulty\"\r\n                inputProps={{\r\n                  id: 'difficulty',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any difficulty</MenuItem>\r\n                <MenuItem value=\"easy\">Easy</MenuItem>\r\n                <MenuItem value=\"medium\">Medium</MenuItem>\r\n                <MenuItem value=\"hard\">Hard</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"aType\">Answer type</InputLabel>\r\n              <Select\r\n                value={aType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"aType\"\r\n                inputProps={{\r\n                  id: 'aType',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any type</MenuItem>\r\n                <MenuItem value=\"multiple\">Multiple choice</MenuItem>\r\n                <MenuItem value=\"boolean\">True/False</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n\r\n            <Button onClick={this.generateQuestions} variant=\"contained\">Generate</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGenerateQuizForm.propTypes = {\r\n  addQuestions: PropTypes.func.isRequired,\r\n  showSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default GenerateQuizForm;\r\n","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport PropTypes from 'prop-types';\r\nimport GenerateQuizForm from './GenerateQuizForm';\r\n\r\nclass QuestionForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: '',\r\n      correctAnswer: '',\r\n      wrongAnswerOne: '',\r\n      wrongAnswerTwo: '',\r\n      wrongAnswerThree: '',\r\n      timelimit: '10',\r\n      qType: 'text',\r\n      aType: 'multiple',\r\n      generateQuestions: true,\r\n\r\n    };\r\n    this.sendQuestion = this.sendQuestion.bind(this);\r\n    this.toggleGenerateQuestion = this.toggleGenerateQuestion.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleTrueFalse = (event) => {\r\n    const answer = event.target.value;\r\n    this.setState({\r\n      correctAnswer: answer,\r\n      wrongAnswerOne: answer === 'true' ? 'false' : 'true',\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  sendQuestion() {\r\n    const {\r\n      question, correctAnswer, wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree, timelimit, qType, aType,\r\n    } = this.state;\r\n    const { addQuestion } = this.props;\r\n    const q = {\r\n      question,\r\n      correctAnswers: [correctAnswer],\r\n      wrongAnswers: [wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree],\r\n      timelimit,\r\n      qType,\r\n      aType,\r\n    };\r\n    this.setState({\r\n      question: '',\r\n      correctAnswer: '',\r\n      wrongAnswerOne: '',\r\n      wrongAnswerTwo: '',\r\n      wrongAnswerThree: '',\r\n    });\r\n    addQuestion(q);\r\n  }\r\n\r\n  toggleGenerateQuestion() {\r\n    const { generateQuestions } = this.state;\r\n    this.setState({\r\n      generateQuestions: !generateQuestions,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      question, correctAnswer, wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree, timelimit, qType, aType, generateQuestions,\r\n    } = this.state;\r\n    const { addQuestions, showSnackbar, isTimelimit } = this.props;\r\n    if (generateQuestions) {\r\n      return (\r\n        <div>\r\n          <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Custom questions</Button>\r\n          <Button onClick={this.toggleGenerateQuestion} disabled variant=\"contained\">Auto generate questions</Button>\r\n          <GenerateQuizForm addQuestions={addQuestions} showSnackbar={showSnackbar} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Button onClick={this.toggleGenerateQuestion} disabled variant=\"contained\">Custom questions</Button>\r\n            <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Auto generate questions</Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <FormControl required fullWidth>\r\n              <InputLabel htmlFor=\"qtype-required\">Question type</InputLabel>\r\n              <Select\r\n                value={qType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"qType\"\r\n                inputProps={{\r\n                  id: 'qtype-required',\r\n                }}\r\n              >\r\n                <MenuItem value=\"text\">Text</MenuItem>\r\n                <MenuItem value=\"image\">Image</MenuItem>\r\n                <MenuItem value=\"video\">Video</MenuItem>\r\n\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <FormControl required fullWidth>\r\n              <InputLabel htmlFor=\"aType-required\">Answer type</InputLabel>\r\n              <Select\r\n                value={aType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"aType\"\r\n                inputProps={{\r\n                  id: 'aType-required',\r\n                }}\r\n              >\r\n                <MenuItem value=\"boolean\">True/false</MenuItem>\r\n                <MenuItem value=\"player\">Player</MenuItem>\r\n                <MenuItem value=\"multiple\">Mulitichoice</MenuItem>\r\n                <MenuItem value=\"free\">Free text</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                label=\"Question\"\r\n                name=\"question\"\r\n                value={question}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('question')}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          {aType === 'multiple'\r\n                        && (\r\n                        <Grid container>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Correct answer\"\r\n                                name=\"correctAnswer\"\r\n                                margin=\"normal\"\r\n                                value={correctAnswer}\r\n                                onChange={this.handleChange('correctAnswer')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerOne\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerOne}\r\n                                onChange={this.handleChange('wrongAnswerOne')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerTwo\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerTwo}\r\n                                onChange={this.handleChange('wrongAnswerTwo')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerThree\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerThree}\r\n                                onChange={this.handleChange('wrongAnswerThree')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </Grid>\r\n                        )\r\n                    }\r\n          {aType === 'boolean'\r\n                        && (\r\n                        <div>\r\n                          <Grid item xs={12}>\r\n\r\n                            <FormControl component=\"fieldset\">\r\n                              <FormLabel component=\"legend\">Answer</FormLabel>\r\n                              <RadioGroup\r\n                                aria-label=\"answer\"\r\n                                name=\"correctAnswer\"\r\n                                value={correctAnswer}\r\n                                onChange={this.handleTrueFalse}\r\n                              >\r\n                                <FormControlLabel value=\"true\" control={<Radio />} label=\"True\" />\r\n                                <FormControlLabel value=\"false\" control={<Radio />} label=\"False\" />\r\n                              </RadioGroup>\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </div>\r\n                        )\r\n                    }\r\n          {isTimelimit\r\n                        && (\r\n                        <Grid item xs={12}>\r\n\r\n                          <FormControl>\r\n                            <TextField\r\n                              label=\"Time limit\"\r\n                              name=\"timelimit\"\r\n                              type=\"number\"\r\n                              value={timelimit}\r\n                              margin=\"normal\"\r\n                              onChange={this.handleChange('timelimit')}\r\n                            />\r\n                          </FormControl>\r\n                        </Grid>\r\n                        )\r\n                    }\r\n          <Grid item xs={12}>\r\n            <Button onClick={this.sendQuestion} variant=\"contained\">Add question</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nQuestionForm.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  addQuestion: PropTypes.func.isRequired,\r\n  addQuestions: PropTypes.func.isRequired,\r\n  isTimelimit: PropTypes.bool.isRequired,\r\n};\r\nexport default QuestionForm;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Typography } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport PropTypes from 'prop-types';\r\nimport Question from './Question';\r\nimport QuestionForm from './QuestionForm';\r\nimport { calculateDefaultTimeLimit } from '../../common/utils/appUtil';\r\n\r\n\r\nclass CreateQuiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'quiz',\r\n      gamemode: 'normal',\r\n      timelimit: true,\r\n      timescore: false,\r\n      questions: [],\r\n      gamePass: '',\r\n    };\r\n    this.addQuestion = this.addQuestion.bind(this);\r\n    this.addQuestions = this.addQuestions.bind(this);\r\n    this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    this.createQuiz = this.createQuiz.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    addQuestion(q) {\r\n      const { questions, timelimit } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      const question = q;\r\n      if (questions.length === 0) {\r\n        question.id = 1;\r\n      } else {\r\n        // räknar ut ett id som det nuvarande högsta id+1. Kan då använda id både som unik identifierare och som index\r\n        question.id = Math.max(...questions.map(o => o.id)) + 1;\r\n      }\r\n      if (timelimit && !question.timelimit) {\r\n        question.timelimit = calculateDefaultTimeLimit(question);\r\n      }\r\n      questions.push(question);\r\n      this.setState({\r\n        questions,\r\n      });\r\n      const snack = {\r\n        variant: 'success',\r\n        message: 'Added question',\r\n      };\r\n      showSnackbar(snack);\r\n    }\r\n\r\n    addQuestions(qs) {\r\n      const { questions, timelimit } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      for (let i = 0; i < qs.length; i++) {\r\n        const question = qs[i];\r\n        if (questions.length === 0) {\r\n          question.id = 1;\r\n        } else {\r\n          question.id = Math.max(...questions.map(o => o.id)) + 1;\r\n        }\r\n        if (timelimit && !question.timelimit) {\r\n          question.timelimit = calculateDefaultTimeLimit(question);\r\n        }\r\n        questions.push(question);\r\n      }\r\n      this.setState({\r\n        questions,\r\n      });\r\n      const snack = {\r\n        variant: 'success',\r\n        message: 'Added questions',\r\n      };\r\n      showSnackbar(snack);\r\n    }\r\n\r\n    deleteQuestion(question) {\r\n      const { questions } = this.state;\r\n      const index = questions.map(e => e.id).indexOf(question.id);\r\n      questions.splice(index, 1);\r\n      this.setState({\r\n        questions,\r\n      });\r\n    }\r\n\r\n    createQuiz() {\r\n      const { createQuiz } = this.props;\r\n      const {\r\n        timelimit, gamePass, gametype, title, timescore, questions,\r\n      } = this.state;\r\n      const game = {\r\n        password: gamePass,\r\n        gametype,\r\n        tile: title,\r\n        quiz: {\r\n          gamemode: 'normal',\r\n          timelimit,\r\n          timescore,\r\n          questions,\r\n        },\r\n      };\r\n      createQuiz(game);\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        timelimit, gamePass, title, timescore, gamemode, questions,\r\n      } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={8}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h4\">New quiz</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <form autoComplete=\"off\">\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl required fullWidth>\r\n                    <InputLabel htmlFor=\"gametype-required\">Gamemode</InputLabel>\r\n                    <Select\r\n                      value={gamemode || ''}\r\n                      onChange={this.handleChangeSelect}\r\n                      name=\"gamemode\"\r\n                      inputProps={{\r\n                        id: 'gamemode-required',\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"normal\">Normal</MenuItem>\r\n                      <MenuItem value=\"wild\">Wild</MenuItem>\r\n\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Game options</FormLabel>\r\n                    <FormGroup>\r\n                      <FormControlLabel\r\n                        control={(\r\n                          <Switch\r\n                            checked={timelimit}\r\n                            onChange={this.handleChangeBool('timelimit')}\r\n                            value=\"timelimit\"\r\n                          />\r\n)}\r\n                        label=\"Time limited questions\"\r\n                      />\r\n                      <FormControlLabel\r\n                        control={(\r\n                          <Switch\r\n                            checked={timescore}\r\n                            onChange={this.handleChangeBool('timescore')}\r\n                            value=\"timescore\"\r\n                          />\r\n)}\r\n                        label=\"Time based score\"\r\n                      />\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl>\r\n                    <TextField\r\n                      label=\"Title\"\r\n                      name=\"title\"\r\n                      value={title}\r\n                      margin=\"normal\"\r\n                      onChange={this.handleChange('title')}\r\n                    />\r\n                  </FormControl>\r\n                  <FormControl>\r\n                    <TextField\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      name=\"gamePass\"\r\n                      margin=\"normal\"\r\n                      value={gamePass}\r\n                      onChange={this.handleChange('gamePass')}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Button onClick={this.createQuiz} variant=\"contained\">Create quiz</Button>\r\n                </Grid>\r\n              </form>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <QuestionForm addQuestions={this.addQuestions} addQuestion={this.addQuestion} isTimelimit={!!timelimit} showSnackbar={showSnackbar} />\r\n            </Grid>\r\n            <Grid container>\r\n              {questions.map((question, index) => (\r\n                <Grid item xs={12} md={6} key={question.id}>\r\n                  <Question question={question} transitionDelay={index} deleteQuestion={this.deleteQuestion} />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateQuiz.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  createQuiz: PropTypes.func.isRequired,\r\n};\r\nexport default CreateQuiz;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nclass CreateTetris extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'tetris',\r\n      gamemode: 'survival',\r\n      password: '',\r\n    };\r\n\r\n    this.validateGame = this.validateGame.bind(this);\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        password, title, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={8}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={4}>\r\n                <FormControl required>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"survival\">Survival</MenuItem>\r\n                    <MenuItem value=\"race\">Race</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateTetris.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateTetris;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass CreateGolf extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'golf',\r\n      holes: 18,\r\n      scoremode: 'strokes',\r\n      speedmode: true,\r\n      opponentCollision: false,\r\n      password: '',\r\n      gamemode: 'classic',\r\n      difficulty: '300',\r\n    };\r\n\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode, holes, scoremode, speedmode,\r\n        difficulty,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n        scoremode,\r\n        speedmode,\r\n        holes,\r\n        difficulty,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    /*\r\n    validateGame(game) {\r\n      // validera lösenord är tillräckligt starkt här\r\n      //eller direkt efter input om det finns någon smart lösning.\r\n      // kolla på gametype hur ha en secifik validering för varje type\r\n      return true;\r\n    }\r\n\r\n    clearForm() {\r\n\r\n    }\r\n*/\r\n    render() {\r\n      const {\r\n        password, title, gamemode,\r\n        holes, difficulty, scoremode, speedmode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={24}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\">New Golf game</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"classic\">Classic</MenuItem>\r\n                    <MenuItem value=\"wild\">Wild</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"scoremode-required\">Score mode</InputLabel>\r\n                  <Select\r\n                    value={scoremode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"scoremode\"\r\n                    inputProps={{\r\n                      id: 'scoremode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"strokes\">Strokes</MenuItem>\r\n                    <MenuItem value=\"time\">Time</MenuItem>\r\n                    <MenuItem value=\"compedetive\">Compedetive</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                  <Select\r\n                    value={difficulty || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"difficulty\"\r\n                    inputProps={{\r\n                      id: 'difficulty-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"500\">Easy</MenuItem>\r\n                    <MenuItem value=\"300\">Medium</MenuItem>\r\n                    <MenuItem value=\"100\">Hard</MenuItem>\r\n                    <MenuItem value=\"75\">Pro</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                {gamemode === 'classic'\r\n                                && (\r\n                                <FormControl>\r\n                                  <TextField\r\n                                    label=\"Holes to play\"\r\n                                    name=\"holes\"\r\n                                    type=\"number\"\r\n                                    value={holes}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('holes')}\r\n                                  />\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={speedmode}\r\n                        onChange={this.handleChangeBool('speedmode')}\r\n                        value=\"speedmode\"\r\n                      />\r\n                    )}\r\n                    label=\"Speed mode\"\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateGolf.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateGolf;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass CreateSnake extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'snake',\r\n      gamemode: 'survival',\r\n      racetarget: 20,\r\n      opponentCollision: false,\r\n      eatOpponents: false,\r\n      wallCollision: true,\r\n      password: '',\r\n      difficulty: '300',\r\n    };\r\n\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n        wallCollision,\r\n        eatOpponents,\r\n        opponentCollision,\r\n        racetarget,\r\n        difficulty,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    /*\r\n    validateGame(game) {\r\n      // validera lösenord är tillräckligt starkt här\r\n      //eller direkt efter input om det finns någon smart lösning.\r\n      // kolla på gametype hur ha en secifik validering för varje type\r\n      return true;\r\n    }\r\n\r\n    clearForm() {\r\n\r\n    }\r\n*/\r\n    render() {\r\n      const {\r\n        password, title, gamemode, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={24}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\">New Snake game</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"survival\">Survival</MenuItem>\r\n                    <MenuItem value=\"race\">Race</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                  <Select\r\n                    value={difficulty || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"difficulty\"\r\n                    inputProps={{\r\n                      id: 'difficulty-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"500\">Easy</MenuItem>\r\n                    <MenuItem value=\"300\">Medium</MenuItem>\r\n                    <MenuItem value=\"100\">Hard</MenuItem>\r\n                    <MenuItem value=\"75\">Pro</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                {gamemode === 'race'\r\n                                && (\r\n                                <FormControl>\r\n                                  <TextField\r\n                                    label=\"Snake length\"\r\n                                    name=\"racetarget\"\r\n                                    type=\"number\"\r\n                                    value={racetarget}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('racetarget')}\r\n                                  />\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={wallCollision}\r\n                        onChange={this.handleChangeBool('wallCollision')}\r\n                        value=\"wallCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Wall collisions\"\r\n                  />\r\n                </FormControl>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision}\r\n                        onChange={this.handleChangeBool('opponentCollision')}\r\n                        value=\"opponentCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Opponent collisions\"\r\n                  />\r\n                </FormControl>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision && eatOpponents}\r\n                        disabled={!opponentCollision}\r\n                        onChange={this.handleChangeBool('eatOpponents')}\r\n                        value=\"eatOpponents\"\r\n                      />\r\n                    )}\r\n                    label=\"Eat opponent on collision\"\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateSnake.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateSnake;\r\n","// https://glitch.com/edit/#!/spotify-implicit-grant?path=script.js:21:61\r\n// spotify API:\r\n// 1. varje spelar loggarin på spotify auth\r\n// 2. jag presenterar alla spellistor (börja med bara namnet på listan?)\r\n// 3. spelaren väljer ut en av spellistorna\r\n// 4. spellistans playlist_id sparas till firebase\r\n// 5. host.js läser upp varje spelres playlist_id och anrppar getPLaylist spotifyAPI (ska fungera även för privata spellistor?)\r\n// 6. host.js genererar automatiskt ett antal frågor och svar utfårn spellistorna\r\n// 7. ska kunna anropa spotify api för att spela upp en låt kopplad till en fråga\r\n\r\n// bonus: spara mer information om varje spelare. så som mest spelade låt, genre etc. vad som nu må finnas i spotify api som kan synkas till firebase utan att vara för mycket\r\n\r\n// att spela upp en sång kräver player SDK https://developer.spotify.com/documentation/web-playback-sdk/quick-start/\r\n// https://developer.spotify.com/documentation/web-playback-sdk/reference/#playing-a-spotify-uri\r\n// https://www.npmjs.com/package/react-spotify-player\r\n// kräver att hosten har spotify premium?\r\n// jag skulle kunna köra en egen \"player\" genom att köra pewview som är 30sekunder och sen har jag ju albumart\r\n\r\nimport React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n// const play = ({\r\n//   spotify_uri,\r\n//   playerInstance: {\r\n//     _options: {\r\n//       getOAuthToken,\r\n//       id,\r\n//     },\r\n//   },\r\n// }) => {\r\n//   getOAuthToken((access_token) => {\r\n//     fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {\r\n//       method: 'PUT',\r\n//       body: JSON.stringify({ uris: [spotify_uri] }),\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${access_token}`,\r\n//       },\r\n//     });\r\n//   });\r\n// };\r\n\r\n\r\n// TESTA ATT SPELA UPP EN LÅT FRÅN EN AV SPELLISTORNA. kolla på  https://developer.spotify.com/documentation/web-playback-sdk/reference/#playing-a-spotify-uri\r\n\r\n// $.ajax({\r\n//   url: 'https://api.spotify.com/v1/me/top/artists',\r\n//   type: 'GET',\r\n//   beforeSend(xhr) { xhr.setRequestHeader('Authorization', `Bearer ${_token}`); },\r\n//   success(data) {\r\n//     // Do something with the returned data\r\n//     data.items.map((artist) => {\r\n//       const item = $(`<li>${artist.name}</li>`);\r\n//       item.appendTo($('#top-artists'));\r\n//     });\r\n//   },\r\n// });\r\n\r\n\r\nclass CreateSpotify extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'spotify',\r\n      questions: 18,\r\n      password: '',\r\n      gamemode: 'classic',\r\n      difficulty: '300',\r\n    };\r\n    // const hash = window.location.hash\r\n    //   .substring(1)\r\n    //   .split('&')\r\n    //   .reduce((initial, item) => {\r\n    //     if (item) {\r\n    //       const parts = item.split('=');\r\n    //       initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    //     }\r\n    //     return initial;\r\n    //   }, {});\r\n    // window.location.hash = '';\r\n\r\n    // Set token\r\n    // spara token i localstorage.\r\n    // det är problem med hastag i redirect url. kommer tillbaka till startsidan när jag ber om ett token helt enkelt.\r\n    // kan leva med det och då spara det i localstorage. Men när dne löper ut och jag behöver ny så kommer jag skickas tillbaka till startisdan igen.\r\n    // Problematiskt om hosten också får samma problem? ett game kan bara vara 60min då?\r\n    // https://example.com/callback#access_token=NwAExz...BV3O2Tk&token_type=Bearer&expires_in=3600&state=123 därför används hashen.\r\n    // jag kan väl ha det tills vidare att man skcikas tillbaka efter inloggning...\r\n    // const _token2 = hash.access_token;\r\n    // i need to get new token if it has expired. i could use it for multiple games tho\r\n\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode, questions,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n        questions,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    /*\r\n    validateGame(game) {\r\n      // validera lösenord är tillräckligt starkt här\r\n      //eller direkt efter input om det finns någon smart lösning.\r\n      // kolla på gametype hur ha en secifik validering för varje type\r\n      return true;\r\n    }\r\n\r\n    clearForm() {\r\n\r\n    }\r\n*/\r\n    render() {\r\n      const {\r\n        password, title, gamemode,\r\n        questions, difficulty, scoremode, speedmode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={24}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\">New Spotify game</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"classic\">Classic</MenuItem>\r\n                    <MenuItem value=\"wild\">Wild</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                {gamemode === 'classic'\r\n                                && (\r\n                                <FormControl>\r\n                                  <TextField\r\n                                    label=\"questions to play\"\r\n                                    name=\"questions\"\r\n                                    type=\"number\"\r\n                                    value={questions}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('questions')}\r\n                                  />\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateSpotify.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateSpotify;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Typography, Card,\r\n} from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CreateTetris from './CreateTetris';\r\nimport CreateGolf from './CreateGolf';\r\nimport CreateSnake from './CreateSnake';\r\nimport CreateSpotify from './CreateSpotify';\r\n\r\nclass CreateMinigame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gametype: '',\r\n    };\r\n  }\r\n\r\n    setGameType = name => (event) => {\r\n      this.setState({ gametype: name });\r\n    };\r\n\r\n    render() {\r\n      const { createGame } = this.props;\r\n      const { gametype } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          {!gametype && (\r\n\r\n          <Grid container spacing={24}>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('snake')}>\r\n                <CardHeader title=\"Snake\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a classic game of snake or change the modes to fit your audience</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('tetris')}>\r\n                <CardHeader title=\"Tetris\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Game is not available yet</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('golf')}>\r\n                <CardHeader title=\"Golf\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a multiplayer golf simulation game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('spotify')}>\r\n                <CardHeader title=\"Spotify\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Get to know your friends Music taste</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          )}\r\n          {gametype === 'snake' && <CreateSnake createGame={createGame} />}\r\n          {gametype === 'tetris' && <CreateTetris createGame={createGame} />}\r\n          {gametype === 'golf' && <CreateGolf createGame={createGame} />}\r\n          {gametype === 'spotify' && <CreateSpotify createGame={createGame} />}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateMinigame.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateMinigame;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography, Card } from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport CreateQuiz from '../quiz/create/CreateQuiz';\r\nimport { fire } from '../../base';\r\nimport CreateMinigame from '../minigame/create/CreateMinigame';\r\nimport { generateGameId } from '../common/utils/appUtil';\r\n\r\nclass Create extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gametype: '',\r\n      gameId: '',\r\n    };\r\n    this.createGame = this.createGame.bind(this);\r\n    // this.validateGame = this.validateGame.bind(this);\r\n  }\r\n\r\n    setGameType = name => () => {\r\n      this.setState({ gametype: name });\r\n    };\r\n\r\n    createGame(g) {\r\n      const game = g;\r\n      game.gameId = generateGameId();\r\n      game.created = Date.now();\r\n      game.status = 'CREATED';\r\n      game.phase = 'setup';\r\n\r\n      const that = this;\r\n      // game push få ett id.\r\n      const gameRef = fire.database().ref('/games').push();\r\n      game.key = gameRef.key;\r\n      gameRef.set(game, (error) => {\r\n        if (error) {\r\n          that.setState({\r\n            errorText: `Error: ${error}`,\r\n          });\r\n          const snack = {\r\n            variant: 'error',\r\n            message: 'Unexpected internal error',\r\n          };\r\n          that.props.showSnackbar(snack);\r\n        } else {\r\n          const snack = {\r\n            variant: 'success',\r\n            message: 'Successfully created!',\r\n          };\r\n          that.props.showSnackbar(snack);\r\n          that.setState({\r\n            gameId: game.gameId,\r\n            gametype: 'done',\r\n          });\r\n          localStorage.setItem('RecentGameId', game.gameId);\r\n\r\n          // show gameid and password\r\n          // show button to start game / navigate to host\r\n        }\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { gametype, gameId } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          {!gametype && (\r\n          <Grid container spacing={24}>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('quiz')}>\r\n                <CardHeader title=\"Quiz\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create your own quiz or generate one fast and easy</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('minigame')}>\r\n                <CardHeader title=\"Mini Game\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a game to play just for fun or team building purposes</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('survey')}>\r\n                <CardHeader title=\"Survey\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Survey your audience</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('discussion')}>\r\n                <CardHeader title=\"Discussion\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a discussion on a sppecified topic</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          )}\r\n          {gametype === 'quiz' && <CreateQuiz createQuiz={this.createGame} showSnackbar={showSnackbar} />}\r\n          {gametype === 'minigame' && <CreateMinigame createGame={this.createGame} showSnackbar={showSnackbar} />}\r\n          {gametype === 'done'\r\n                    && (\r\n                    <div>\r\n                      <Typography variant=\"h2\">\r\n                        <span>Created game PIN: </span>\r\n                        {' '}\r\n                        <span className=\"dynamic-text\">{gameId}</span>\r\n                      </Typography>\r\n                      <Link to=\"/host\">Host game</Link>\r\n                    </div>\r\n                    )\r\n                }\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreate.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default Create;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Switch from '@material-ui/core/Switch';\r\nclass PhaseSetup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            surveyPlayers: false,\r\n            answerStreak: true,\r\n            nameGenerator: false,\r\n            remoteMode: false,\r\n            useTeams: false,\r\n            randomizeQuestionOrder: false,\r\n            autoPlayQuestions: false,\r\n\r\n        };\r\n        this.startGame = this.startGame.bind(this);\r\n        this.createTeamGame = this.createTeamGame.bind(this);\r\n        this.createClassicGame = this.createClassicGame.bind(this);\r\n\r\n\r\n    }\r\n    handleChangeBool = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    createTeamGame() {\r\n        this.startGame(true);\r\n    }\r\n    createClassicGame() {\r\n        this.startGame(false);\r\n    }\r\n    startGame(teamMode) {\r\n        let game = {};\r\n        let quiz = this.props.game.quiz;\r\n        quiz.surveyPlayers = this.state.surveyPlayers;\r\n        quiz.answerStreak = this.state.answerStreak;\r\n        quiz.nameGenerator = this.state.nameGenerator;\r\n        quiz.remoteMode = this.state.remoteMode;\r\n        quiz.useTeams = teamMode;\r\n        quiz.autoPlayQuestions = this.state.autoPlayQuestions;\r\n        quiz.randomizeQuestionOrder = this.state.randomizeQuestionOrder;\r\n        quiz.currentQuestion = 0;\r\n\r\n        game.quiz = quiz;\r\n        game.phase = \"connection\";\r\n        game.status = \"IN_PROGRESS\";\r\n        this.props.gameFunc.update(game);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h4\">Game Settings</Typography>\r\n                <Button onClick={this.createClassicGame} variant=\"contained\">Classic</Button>\r\n                <Button onClick={this.createTeamGame} variant=\"contained\">Team mode</Button>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.nameGenerator}\r\n                                    onChange={this.handleChangeBool('nameGenerator')}\r\n                                    value=\"nameGenerator\"\r\n                                />\r\n                            }\r\n                            label=\"Generate names for players\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.remoteMode}\r\n                                    onChange={this.handleChangeBool('remoteMode')}\r\n                                    value=\"remoteMode\"\r\n                                />\r\n                            }\r\n                            label=\"Remote playmode\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.answerStreak}\r\n                                    onChange={this.handleChangeBool('answerStreak')}\r\n                                    value=\"answerStreak\"\r\n                                />\r\n                            }\r\n                            label=\"Use answer scorestreak\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.surveyPlayers}\r\n                                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                                    value=\"surveyPlayers\"\r\n                                />\r\n                            }\r\n                            label=\"Survey players after game\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.randomizeQuestionOrder}\r\n                                    onChange={this.handleChangeBool('randomizeQuestionOrder')}\r\n                                    value=\"randomizeQuestionOrder\"\r\n                                />\r\n                            }\r\n                            label=\"Randomize question order\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.autoPlayQuestions}\r\n                                    onChange={this.handleChangeBool('autoPlayQuestions')}\r\n                                    value=\"autoPlayQuestions\"\r\n                                />\r\n                            }\r\n                            label=\"Auto play questions\"\r\n                        />\r\n\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseSetup;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  nextPhase() {\r\n    this.props.gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  // add function to kick player\r\n  render() {\r\n    let players = this.props.game.players;\r\n    if (!players) {\r\n      players = [];\r\n    } else {\r\n      players = Object.values(players);\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">\r\n            <span>Join game at: </span>\r\n            <span className=\"dynamic-text\">mannfeldt.github.io/stagehoot</span>\r\n\r\n          </Typography>\r\n          <Typography variant=\"h2\">\r\n            <span>Enter game PIN: </span>\r\n            <span className=\"dynamic-text\">{this.props.game.gameId}</span>\r\n\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">{this.props.game.title}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            {players.map((player, index) => (\r\n              <Grid key={index} item xs={3}>\r\n                <Typography paragraph variant=\"body1\" className=\"dynamic-text\">{player.name}</Typography>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PhaseConnection;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CountdownAnimation.scss';\r\n\r\nclass CountdownAnimation extends PureComponent {\r\n  // jag skulle kunna lägga en counter här som rendrerar null efter några sekunder\r\n  // så att är säkert att den inte hinner loopa\r\n  render() {\r\n    const { speed } = this.props;\r\n    if (speed === 'slow') {\r\n      return (\r\n        <div className=\"demo_slow\">\r\n          <div className=\"demo_slow__colored-blocks\">\r\n            <div className=\"demo_slow__colored-blocks-rotater\">\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n            </div>\r\n            <div className=\"demo_slow__colored-blocks-inner\" />\r\n            <div className=\"demo_slow__text\">Ready</div>\r\n          </div>\r\n          <div className=\"demo_slow__inner\">\r\n            <svg className=\"demo_slow__numbers\" viewBox=\"0 0 100 100\">\r\n              <defs>\r\n                <path className=\"demo_slow__num-path-1\" d=\"M40,28 55,22 55,78\" />\r\n                <path className=\"demo_slow__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\" />\r\n                <path className=\"demo_slow__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\" />\r\n                <path className=\"demo_slow__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\" />\r\n                <path className=\"demo_slow__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\" />\r\n              </defs>\r\n              <path\r\n                className=\"demo_slow__numbers-path\"\r\n                d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19\r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73\r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83\r\n          l0,-61 L40,28\"\r\n              />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"demo\">\r\n        <div className=\"demo__colored-blocks\">\r\n          <div className=\"demo__colored-blocks-rotater\">\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n          </div>\r\n          <div className=\"demo__colored-blocks-inner\" />\r\n          <div className=\"demo__text\">Ready</div>\r\n        </div>\r\n        <div className=\"demo__inner\">\r\n          <svg className=\"demo__numbers\" viewBox=\"0 0 100 100\">\r\n            <defs>\r\n              <path className=\"demo__num-path-1\" d=\"M40,28 55,22 55,78\" />\r\n              <path className=\"demo__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\" />\r\n              <path className=\"demo__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\" />\r\n              <path className=\"demo__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\" />\r\n              <path className=\"demo__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\" />\r\n            </defs>\r\n            <path\r\n              className=\"demo__numbers-path\"\r\n              d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19\r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73\r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83\r\n          l0,-61 L40,28\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nCountdownAnimation.propTypes = {\r\n  speed: PropTypes.string.isRequired,\r\n};\r\nexport default CountdownAnimation;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"awaiting_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h2\">Starting quiz</Typography>\r\n                <CountdownAnimation speed=\"slow\" />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"show_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n            <Typography variant=\"h2\">Loading next question</Typography>\r\n                <CountdownAnimation speed=\"slow\"/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: '',\r\n    };\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question });\r\n    const phaseTime = 3000 + (question.question.length * 20);\r\n    setTimeout(this.nextPhase, phaseTime);\r\n  }\r\n\r\n  nextPhase() {\r\n    let answers = [];\r\n    if (this.state.question.aType === 'multiple') {\r\n      answers = this.state.question.wrongAnswers.concat(this.state.question.correctAnswers);\r\n      answers = this.shuffle(answers);\r\n    } else if (this.state.question.aType === 'boolean') {\r\n      answers = ['True', 'False'];\r\n    }\r\n    if (answers.length) {\r\n      const game = {};\r\n      game.phase = 'answer';\r\n      game.quiz = this.props.game.quiz;\r\n      game.quiz.questions[game.quiz.currentQuestion].answers = answers;\r\n      this.props.gameFunc.update(game);\r\n    } else {\r\n      this.props.gameFunc.update({ phase: 'answer' });\r\n    }\r\n  }\r\n\r\n  shuffle(array) {\r\n    let counter = array.length;\r\n    while (counter > 0) {\r\n      const index = Math.floor(Math.random() * counter);\r\n      counter--;\r\n      const temp = array[counter];\r\n      array[counter] = array[index];\r\n      array[index] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <div className=\"phase-container\">\r\n              <div className=\"quiz-top-section\">\r\n                  <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n\r\n                </div>\r\n              <div className=\"quiz-middle-section\" />\r\n              <div className=\"quiz-bottom-section\" />\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseShowQuestion;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    paddingTop: theme.spacing.unit * 2,\r\n    paddingBottom: theme.spacing.unit * 2,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    height: '100%',\r\n  },\r\n  playAnswer: {\r\n    width: '50vw',\r\n    height: '100%',\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    float: 'left',\r\n    fontSize: '28',\r\n    color: 'white',\r\n    marginLeft: '10px',\r\n  },\r\n  answer: {\r\n    fontSize: 18,\r\n    fontWeight: 500,\r\n    color: 'white',\r\n  },\r\n});\r\n\r\nconst answerStyles = [{\r\n  icon: <CakeIcon />,\r\n  color: '#73c7d2',\r\n},\r\n{\r\n  icon: <ExtensionIcon />,\r\n  color: '#d78a8a',\r\n},\r\n{\r\n  icon: <FavoriteIcon />,\r\n  color: '#b984c2',\r\n},\r\n{\r\n  icon: <StarIcon />,\r\n  color: '#b1ca94',\r\n}];\r\n\r\nclass AnswerOption extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n    /*\r\n                        på play answer vill jag inte skriva texten utan bara ha rätt färg + symbol. play answer ska vara större. men det kanske jag kan fixa via cssklass i playanswer.\r\n                        på host answer har jag rätt färg symbol + text\r\n\r\n                        symboler icons: hjärta,stjärna,blomma (filter_vintage), berg, pusselbit(extension), cloud\r\n                        trekant, fyrkant, cirkel,\r\n                        1,2,3,4 (finns som icon)\r\n                        a,b,c,d (finns inte om icon)\r\n                        välj 4 coola färger, grön röd blå gul?\r\n                        tänk på att det kan vara två alternativ\r\n        */\r\n  }\r\n\r\n  render() {\r\n    const design = answerStyles[this.props.index];\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className=\"full-height\">\r\n        {this.props.answerQuestion && (\r\n        <Paper onClick={() => { this.props.answerQuestion(this.props.answer); }} className={classes.playAnswer} style={{ backgroundColor: design.color }}>\r\n          <div className=\"button-answer-icon\">{design.icon}</div>\r\n          {this.props.remoteMode && <div className={classes.answer}>{this.props.answer}</div>}\r\n        </Paper>\r\n        )\r\n                }\r\n        {!this.props.answerQuestion && (\r\n        <Paper className={classes.paper} style={{ backgroundColor: design.color }}>\r\n          <div className={classes.icon}>{design.icon}</div>\r\n          <div className={classes.answer}>{this.props.answer}</div>\r\n        </Paper>\r\n        )\r\n                }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerOption);\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  text: {\r\n    marginBottom: '-200px',\r\n    fontSize: '86px',\r\n    paddingTop: '160px',\r\n  },\r\n  circle: {\r\n    color: '#6JpDK4',\r\n\r\n  },\r\n});\r\nclass Timer extends PureComponent {\r\n  render() {\r\n    const {\r\n      classes, text, value, startValue,\r\n    } = this.props;\r\n    let currentCount = value === null ? startValue : value;\r\n    const start = startValue < 1 ? 0 : startValue;\r\n\r\n    if (currentCount < 0) {\r\n      currentCount = 0;\r\n    }\r\n    const completed = currentCount / start;\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <Typography variant=\"caption\" className={classes.text}>{text}</Typography>\r\n        <CircularProgress\r\n          className={classes.circle}\r\n          classes={{\r\n            colorSecondary: classes.circle,\r\n          }}\r\n          variant=\"static\"\r\n          value={completed * 100}\r\n          thickness={4}\r\n          size={300}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.number,\r\n  startValue: PropTypes.number,\r\n  classes: PropTypes.any,\r\n};\r\nexport default withStyles(styles)(Timer);\r\n","import React, { Component } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    bar: {\r\n        color: '#32386D'\r\n    }\r\n});\r\nclass AnswerCounter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">Answers collected</Typography>\r\n                <LinearProgress className={classes.bar} variant=\"determinate\" value={this.props.value} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerCounter);","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\nimport Timer from '../../common/Timer';\r\nimport AnswerCounter from './AnswerCounter';\r\n\r\nclass PhaseAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: null,\r\n      timelimit: 0,\r\n      started: false,\r\n      isTimelimited: true,\r\n      question: {\r\n        question: '',\r\n        answers: [],\r\n      },\r\n    };\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const that = this;\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question, isTimelimited: this.props.game.quiz.timelimit, timelimit: question.timelimit * 10 });\r\n    if (this.props.game.quiz.timelimit) {\r\n      const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n      let counter = question.timelimit * 10;\r\n      const i = setInterval(() => {\r\n        let answersCollected = 0;\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n          if (that.props.game.players[playerKeys[i]].answers && that.props.game.players[playerKeys[i]].answers[question.id]) {\r\n            answersCollected++;\r\n          }\r\n        }\r\n        counter--;\r\n        that.setState({ counter, started: true });\r\n        if (counter <= -5 || answersCollected === playerKeys.length) {\r\n          that.nextPhase();\r\n          clearInterval(i);\r\n        }\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  nextPhase() {\r\n    this.props.gameFunc.update({ phase: 'result_question' });\r\n  }\r\n\r\n  render() {\r\n    let answers = [];\r\n    if (this.props.game) {\r\n      answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n    }\r\n    let answersCollected = 0;\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      if (this.props.game.players[playerKeys[i]].answers && this.props.game.players[playerKeys[i]].answers[this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id]) {\r\n        answersCollected++;\r\n      }\r\n    }\r\n    const answerCollectedPercentage = (answersCollected / playerKeys.length) * 100;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          {!this.state.isTimelimited && <Button onClick={this.nextPhase}>Next</Button>}\r\n          {this.state.isTimelimited && <Timer startValue={this.state.timelimit} value={this.state.counter} text={Math.ceil(this.state.counter / 10)} />\r\n                    }\r\n          <div className=\"quiz-answercounter-container\">\r\n            <AnswerCounter value={answerCollectedPercentage} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n\r\n          <Grid container className=\"align-bottom\">\r\n            {answers.map((answer, index) => (\r\n              <Grid key={index} item xs={6}>\r\n                <AnswerOption answer={answer} index={index} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseAnswer;\r\n","import React, { Component } from 'react';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst colors = ['#80DEEA', '#EF9A9A', '#CE93D8', '#C5E1A5'];\r\nconst MAX_PLAYERS = 20;\r\nconst PLAYER_BAR_HEIGHT_INCREMENT = 30;\r\nconst MAX_HEIGHT_PODIUM = 740;\r\nclass Podium extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getChartData = this.getChartData.bind(this);\r\n    this.getChartOptions = this.getChartOptions.bind(this);\r\n    this.getChartHeight = this.getChartHeight.bind(this);\r\n  }\r\n\r\n  getChartData() {\r\n    const chartData = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        label: 'podium',\r\n        backgroundColor: [],\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    const rawPlayerData = [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const playerScoreData = {};\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      let score = 0;\r\n      if (player.answers) {\r\n        for (let j = 0; j < Object.keys(player.answers).length; j++) {\r\n          const question = this.props.game.quiz.questions[j];\r\n          const answer = player.answers[question.id];\r\n          if (answer) {\r\n            score += answer.score;\r\n          }\r\n        }\r\n        playerScoreData.score = score;\r\n        playerScoreData.name = player.name;\r\n        rawPlayerData.push(playerScoreData);\r\n      }\r\n    }\r\n    rawPlayerData.sort((a, b) => b.score - a.score); // For ascending sort\r\n    const maxIndex = rawPlayerData.length > MAX_PLAYERS ? MAX_PLAYERS : rawPlayerData.length;\r\n    for (let i = 0; i < maxIndex; i++) {\r\n      chartData.labels.push(rawPlayerData[i].name);\r\n      chartData.datasets[0].data.push(rawPlayerData[i].score);\r\n      chartData.datasets[0].backgroundColor.push(colors[i % 4]);\r\n    }\r\n\r\n    return chartData;\r\n  }\r\n\r\n  getChartHeight() {\r\n    const chartData = this.getChartData();\r\n    let height = 70 + (chartData.labels.length * PLAYER_BAR_HEIGHT_INCREMENT);\r\n    if (height > MAX_HEIGHT_PODIUM) {\r\n      height = MAX_HEIGHT_PODIUM;\r\n    }\r\n    return height;\r\n  }\r\n\r\n  getChartOptions() {\r\n    const chartHeight = this.getChartHeight();\r\n    const padding = (MAX_HEIGHT_PODIUM - chartHeight) / 2;\r\n    const options = {\r\n      maintainAspectRatio: false,\r\n      showTooltips: false,\r\n      responsiveAnimationDuration: 1000,\r\n      animation: {\r\n        easing: 'easeInOutCubic',\r\n        duration: '2000',\r\n        onProgress(animation) {\r\n          animation.animationObject.onAnimationProgress = function () {\r\n            const ctx = this.chart.ctx;\r\n            const chart = this.chart;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'bottom';\r\n            ctx.font = '20px Roboto';\r\n\r\n            const stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n            const meta = chart.getDatasetMeta(0);\r\n            if (!meta.hidden) {\r\n              meta.data.forEach((element, index) => {\r\n                // Draw the text in black, with the specified font\r\n\r\n                // Just naively convert to string for now\r\n                const dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio).toString();\r\n                ctx.fillStyle = colors[index % 4];\r\n\r\n                const position = element.tooltipPosition();\r\n                ctx.fillText(dataString, position.x + 2 + (dataString.length * 6), position.y + (element._model.height / 2));\r\n              });\r\n            }\r\n          };\r\n        },\r\n      },\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n          display: true,\r\n          beginAtZero: true,\r\n        }],\r\n        xAxes: [{\r\n          display: true,\r\n          beginAtZero: true,\r\n        }],\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltips: {\r\n        enabled: false,\r\n      },\r\n      events: [],\r\n      layout: {\r\n        padding: {\r\n          left: 0,\r\n          right: 60,\r\n          top: padding,\r\n          bottom: padding,\r\n        },\r\n      },\r\n    };\r\n    return options;\r\n  }\r\n\r\n  getWinnerString() {\r\n    return 'Congratulations [name of player]! ';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ maxHeight: MAX_HEIGHT_PODIUM }}>\r\n        <HorizontalBar\r\n              data={this.getChartData}\r\n              height={MAX_HEIGHT_PODIUM}\r\n              options={this.getChartOptions()}\r\n            />\r\n        <Typography variant=\"subtitle1\">{this.getWinnerString()}</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Podium;\r\n","import React, { Component } from 'react';\r\nimport Podium from '../Podium';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h2\">Final score</Typography>\r\n\r\n                    <Podium game={this.props.game} />\r\n                </div>\r\n                <div className=\"align-bottom \">\r\n                    <div>\r\n\r\n                        <Button onClick={this.props.gameFunc.restart}>Replay quiz</Button>\r\n                        <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n                        <Button onClick={() => alert('show results')}>Show results</Button>\r\n                        <Button onClick={() => alert('start survey')}>Start survey</Button>\r\n                        <Button>\r\n                            <Link to={'/create'}>Host game</Link>\r\n                        </Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst PUBLIC_PATH = process.env.PUBLIC_URL;\r\n\r\nconst answerStyles = [{\r\n  icon: <CakeIcon />,\r\n  color: '#80DEEA',\r\n},\r\n{\r\n  icon: <ExtensionIcon />,\r\n  color: '#EF9A9A',\r\n},\r\n{\r\n  icon: <FavoriteIcon />,\r\n  color: '#CE93D8',\r\n},\r\n{\r\n  icon: <StarIcon />,\r\n  color: '#C5E1A5',\r\n}];\r\n\r\nclass AnswerChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getChartData = this.getChartData.bind(this);\r\n    this.getChartOptions = this.getChartOptions.bind(this);\r\n    this.getChartHeight = this.getChartHeight.bind(this);\r\n    this.getAnswerData = this.getAnswerData.bind(this);\r\n  }\r\n\r\n  getAnswerData() {\r\n    const answerData = {\r\n      data: [],\r\n      topPlayer: {\r\n        score: 0,\r\n        playerKey: '',\r\n      },\r\n      correctAnswers: [],\r\n    };\r\n    const playerAnswers = [];\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    const currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      if (!player.answers) {\r\n        continue;\r\n      }\r\n      const answer = player.answers[currentQuestion.id];\r\n      if (answer) {\r\n        playerAnswers.push(answer.answer);\r\n        if (answer.score > answerData.topPlayer.score) {\r\n          answerData.topPlayer.score = answer.score;\r\n          answerData.topPlayer.playerKey = player.key;\r\n        }\r\n      }\r\n    }\r\n    for (let j = 0; j < currentQuestion.answers.length; j++) {\r\n      let nrOfAnswers = 0;\r\n      for (let i = 0; i < playerAnswers.length; i++) {\r\n        if (currentQuestion.answers.indexOf(playerAnswers[i]) === j) {\r\n          nrOfAnswers++;\r\n        }\r\n      }\r\n      answerData.data.push(nrOfAnswers);\r\n\r\n      if (currentQuestion.correctAnswers.indexOf(currentQuestion.answers[j]) > -1) {\r\n        answerData.correctAnswers.push(j);\r\n      }\r\n    }\r\n\r\n    return answerData;\r\n  }\r\n\r\n  getChartData() {\r\n    const chartData = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        label: 'asdf',\r\n        backgroundColor: [],\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n    const data = this.getAnswerData();\r\n    chartData.datasets[0].borderColor = [];\r\n    chartData.datasets[0].data = data.data;\r\n    for (let i = 0; i < data.data.length; i++) {\r\n      chartData.labels.push('');\r\n      chartData.datasets[0].backgroundColor.push(answerStyles[i].color);\r\n    }\r\n    return chartData;\r\n  }\r\n\r\n  getChartHeight() {\r\n    const answerData = this.getAnswerData();\r\n    const topvalue = Math.max(...answerData.data);\r\n    const incrementHeightPerAnswer = 25;\r\n    const minHeight = 65;\r\n    const maxHeight = 300;\r\n    const height = minHeight + (topvalue * incrementHeightPerAnswer);\r\n    if (height > maxHeight) {\r\n      return maxHeight;\r\n    }\r\n    return height;\r\n  }\r\n\r\n  getChartOptions() {\r\n    const that = this;\r\n    const options = {\r\n      maintainAspectRatio: false,\r\n      showTooltips: false,\r\n      responsiveAnimationDuration: 1000,\r\n      animation: {\r\n        easing: 'easeInOutCubic',\r\n        duration: '2000',\r\n        onProgress (animation) {\r\n                    let answerData = that.getAnswerData();\r\n                    animation.animationObject.onAnimationProgress = function () {\r\n                        let ctx = this.chart.ctx;\r\n                        let chart = this.chart;\r\n                        ctx.textAlign = \"center\";\r\n                        ctx.fillStyle = \"black\";\r\n                        ctx.textBaseline = \"bottom\";\r\n                        ctx.font = \"24px Roboto\";\r\n\r\n                        let stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n\r\n                        let meta = chart.getDatasetMeta(0);\r\n                        if (!meta.hidden) {\r\n                            meta.data.forEach(function (element, index) {\r\n\r\n                                let dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio);\r\n\r\n                                let position = element.tooltipPosition();\r\n                                ctx.fillStyle = answerStyles[index].color;\r\n                                ctx.fillText(dataString, position.x, position.y - 2);\r\n                                ctx.beginPath();\r\n                                ctx.rect(position.x - element._view.width / 2, chart.height - 32, element._view.width, 22);\r\n                                ctx.fill();\r\n                                if (answerData.correctAnswers.indexOf(index) > -1) {\r\n\r\n                                    let img = new Image();\r\n                                    img.src = PUBLIC_PATH + \"/baseline-done_outline-24px.svg\";\r\n                                    img.height = 100;\r\n                                    img.width = 100;\r\n                                    let ypos = chart.height - 34;\r\n                                    //ta bort onlead wrapper för att göra det instant\r\n                                    ctx.drawImage(img, position.x - 12, ypos);\r\n                                }\r\n                            });\r\n                        }\r\n                        /*\r\n                                                for (let i = 0; i < answerData.data.length; i++) {\r\n                                                    let value = Math.floor(answerData.data[i] * stepratio);\r\n                                                    //om det inte är någon som svarar så blir meta[0] undefined första gången. går jag in på nytt på gamet som host så fungerar det\r\n                                                    //ha någon specifik hantering för om ingen har svarat alls\r\n                                                    var meta = this.chart.getDatasetMeta(0);\r\n                                                    let metadata = meta.data[i];\r\n                        \r\n                                                    ctx.fillStyle = answerStyles[i].color;\r\n                                                    ctx.fillText(value, metadata._view.x, metadata._view.y - 2);\r\n                                                    ctx.beginPath();\r\n                                                    ctx.rect(metadata._view.x - metadata._view.width / 2, this.chart.height - 32, metadata._view.width, 22);\r\n                                                    ctx.fill();\r\n                                                    if (answerData.correctAnswers.indexOf(i) > -1) {\r\n                        \r\n                                                        let img = new Image();\r\n                                                        img.src = \"/baseline-done_outline-24px.svg\";\r\n                                                        img.height = 100;\r\n                                                        img.width = 100;\r\n                                                        let ypos = this.chart.height - 34;\r\n                                                        //ta bort onlead wrapper för att göra det instant\r\n                                                        ctx.drawImage(img, metadata._view.x - 12, ypos);\r\n                        \r\n                                                    }\r\n                                                }\r\n                        \r\n                                                */\r\n                    }\r\n\r\n\r\n                },\r\n      },\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n          display: false,\r\n          beginAtZero: true,\r\n        }],\r\n        xAxes: [{\r\n          display: false,\r\n        }],\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltips: {\r\n        enabled: false,\r\n      },\r\n      events: [],\r\n      layout: {\r\n        padding: {\r\n          left: 0,\r\n          right: 0,\r\n          top: 25,\r\n          bottom: 40,\r\n        },\r\n      },\r\n    };\r\n    return options;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <Bar\r\ndata={this.getChartData}\r\nheight={this.getChartHeight()}\r\n              options={this.getChartOptions()}\r\n            />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnswerChart;\r\n","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Table from '@material-ui/core/Table';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  table: {\r\n    maxWidth: 700,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n});\r\n\r\nclass Leaderboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      leaderboardData: this.getLeaderboardData(),\r\n      page: 0,\r\n      rowsPerPage: 10,\r\n    };\r\n    this.startScoreCounter = this.startScoreCounter.bind(this);\r\n    this.getScoreCellWidth = this.getScoreCellWidth.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(this.startScoreCounter, 2000);\r\n  }\r\n\r\n  startScoreCounter() {\r\n    const that = this;\r\n    const i = setInterval(() => {\r\n      const newLeaderBoard = that.state.leaderboardData;\r\n      let done = true;\r\n      for (let i = 0; i < newLeaderBoard.players.length; i++) {\r\n        const player = newLeaderBoard.players[i];\r\n        if (player.currentQuestionScore > 0) {\r\n          done = false;\r\n          player.currentQuestionScore--;\r\n          player.totalScore++;\r\n        }\r\n      }\r\n      newLeaderBoard.players.sort((a, b) => ((b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0));\r\n      that.setState({ leaderboard: newLeaderBoard });\r\n      if (done) {\r\n        clearInterval(i);\r\n      }\r\n    }, 10);\r\n  }\r\n\r\n  getLeaderboardData() {\r\n    const leaderboard = {\r\n      players: [],\r\n    };\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n\r\n    const currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    const playerList = [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const playerScoreData = {};\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      let score = 0;\r\n      if (player.answers) {\r\n        for (let j = 0; j < this.props.game.quiz.questions.length; j++) {\r\n          const question = this.props.game.quiz.questions[j];\r\n          const answer = player.answers[question.id];\r\n          if (answer) {\r\n            if (answer.questionId === currentQuestion.id) {\r\n              playerScoreData.currentQuestionScore = answer.score;\r\n              playerScoreData.lastScore = answer.score;\r\n            } else {\r\n              score += answer.score;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      playerScoreData.totalScore = score;\r\n      playerScoreData.name = player.name;\r\n      playerScoreData.key = player.key;\r\n      playerList.push(playerScoreData);\r\n    }\r\n\r\n    playerList.sort((a, b) => ((b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0));\r\n    leaderboard.players = playerList;\r\n    return leaderboard;\r\n  }\r\n\r\n  getLeaderboardScore(player) {\r\n    if (player.currentQuestionScore === 0) {\r\n      return `${player.totalScore} (+${player.lastScore})`;\r\n    }\r\n    return `${player.totalScore}           `;\r\n    // return player.totalScore + \" (+\" + player.currentQuestionScore + \")\";\r\n  }\r\n\r\n  getScoreCellWidth() {\r\n    let length = 0;\r\n    const leaderboardData = this.getLeaderboardData();\r\n    for (let i = 0; i < leaderboardData.players.length; i++) {\r\n      const player = leaderboardData.players[i];\r\n      const scoreWidth = `${player.totalScore} (+${player.lastScore})`;\r\n      if (scoreWidth.length > length) {\r\n        length = scoreWidth.length;\r\n      }\r\n    }\r\n\r\n\r\n    return (length * 6) + 65;\r\n  }\r\n\r\n    handleChangePage = (event, page) => {\r\n      this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n      this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n    render() {\r\n      const { classes } = this.props;\r\n      const { leaderboardData, rowsPerPage, page } = this.state;\r\n      return (\r\n        <div className={classes.root}>\r\n          <Table className={classes.table}>\r\n            <TableBody>\r\n              {leaderboardData.players.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((player, index) => (\r\n                <TableRow key={player.key}>\r\n                  <TableCell padding=\"dense\">{index + 1}</TableCell>\r\n                  <TableCell>{player.name}</TableCell>\r\n                  <TableCell style={{ width: this.getScoreCellWidth() }}>{this.getLeaderboardScore(player)}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          {leaderboardData.players.length > 10 && (\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={leaderboardData.players.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            backIconButtonProps={{\r\n              'aria-label': 'Previous Page',\r\n            }}\r\n            nextIconButtonProps={{\r\n              'aria-label': 'Next Page',\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n          />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Leaderboard);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport AnswerOption from '../AnswerOption';\r\nimport AnswerChart from '../AnswerChart';\r\nimport Leaderboard from '../Leaderboard';\r\n\r\n\r\nclass PhaseResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.nextQuestion = this.nextQuestion.bind(this);\r\n    this.finalizeQuiz = this.finalizeQuiz.bind(this);\r\n  }\r\n\r\n  nextQuestion() {\r\n    const game = {};\r\n    game.quiz = this.props.game.quiz;\r\n    game.quiz.currentQuestion = game.quiz.currentQuestion + 1;\r\n    game.phase = 'awaiting_question';\r\n    this.props.gameFunc.update(game);\r\n  }\r\n\r\n  finalizeQuiz() {\r\n    this.props.gameFunc.update({ phase: 'final_result' });\r\n  }\r\n\r\n  render() {\r\n    let answers = [];\r\n    let currentQuestion = '';\r\n    if (this.props.game) {\r\n      currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n      answers = currentQuestion.answers;\r\n    }\r\n    const nextQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion + 1];\r\n    const isLastQuestion = typeof nextQuestion === 'undefined';\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h6\" style={{ float: 'right' }}>{`Game PIN:${this.props.game.gameId} `}</Typography>\r\n          <Typography variant=\"h5\">{currentQuestion.question}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            <Grid item md={6} xs={12}>\r\n              <div className=\"quiz-answer-chart\">\r\n                <AnswerChart game={this.props.game} />\r\n              </div>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <div>\r\n                <Leaderboard game={this.props.game} />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n          <div>\r\n            {isLastQuestion && <Button onClick={this.finalizeQuiz}>Finalize result</Button>}\r\n            {!isLastQuestion && <Button onClick={this.nextQuestion}>Next question</Button>}\r\n            <Button onClick={this.props.gameFunc.restart}>Restart quiz</Button>\r\n            <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n            <Button onClick={this.props.gameFunc.end}>End quiz</Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Grid className=\"align-bottom\" container>\r\n            {answers.map((answer, index) => (\r\n              <Grid key={index} item xs={6}>\r\n                <AnswerOption answer={answer} index={index} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseResultQuestion;\r\n","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                HostEnd\r\n                toggleHeader()\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component } from 'react';\r\nimport PhaseSetup from './PhaseSetup';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\n\r\nclass Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"host-container\">\r\n        {this.props.game.phase === 'setup' && <PhaseSetup game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'connection' && <PhaseConnection game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'starting' && <PhaseStarting game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'awaiting_question' && <PhaseAwaitingQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'show_question' && <PhaseShowQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'answer' && <PhaseAnswer game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'result_question' && <PhaseResultQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'final_result' && <PhaseFinalResult game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'end' && <PhaseEnd game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass PhaseSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      racetarget: props.game.minigame.racetarget,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      eatOpponents: props.game.minigame.eatOpponents,\r\n      wallCollision: props.game.minigame.wallCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        wallCollision,\r\n        opponentCollision,\r\n        eatOpponents,\r\n        racetarget,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"survival\">Survival</MenuItem>\r\n                  <MenuItem value=\"race\">Race</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'race'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Snake length\"\r\n                                name=\"racetarget\"\r\n                                type=\"number\"\r\n                                value={racetarget}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('racetarget')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={wallCollision}\r\n                      onChange={this.handleChangeBool('wallCollision')}\r\n                      value=\"wallCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Wall collisions\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision && eatOpponents}\r\n                      disabled={!opponentCollision}\r\n                      onChange={this.handleChangeBool('eatOpponents')}\r\n                      value=\"eatOpponents\"\r\n                    />\r\n                )}\r\n                  label=\"Eat opponent on collision\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nPhaseSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseSetup;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  nextPhase() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    let { players } = game;\r\n    if (!players) {\r\n      players = [];\r\n    } else {\r\n      players = Object.values(players);\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">\r\n            <span>Join game with Game PIN: </span>\r\n            <span className=\"dynamic-text\">{game.gameId}</span>\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">{game.title}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            {players.map(player => (\r\n              <Grid key={player.key} item xs={3}>\r\n                <Typography paragraph variant=\"body1\" className=\"dynamic-text\">{player.name}</Typography>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseConnection;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n    this.startCounter();\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    const counter = 5;\r\n    const i = setInterval(() => {\r\n      that.setState(state => ({\r\n        counter: state.counter + 1,\r\n      }));\r\n\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'gameplay' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseStarting;\r\n","const gridSize = 20;\r\nfunction isInvalidMove(keyPress, currentDirection) {\r\n  if (!keyPress) {\r\n    return true;\r\n  }\r\n  const invalidMovment = {\r\n    left: 'right', right: 'left', up: 'down', down: 'up',\r\n  };\r\n  return invalidMovment[keyPress] === currentDirection;\r\n}\r\nfunction getInitialFoods(amount) {\r\n  const initialFoods = [];\r\n  for (let i = 0; i < amount; i++) {\r\n    const food = {\r\n      active: false,\r\n    };\r\n    initialFoods.push(food);\r\n  }\r\n  return initialFoods;\r\n}\r\n// vissa snakes lyckas inte äta foods? är det en bugg med konstiga synkningar mot state när det är så många?\r\n// det verkar inte heller fungera med positioneringen indexof. Ormarna hamnar ibland precis brevid varandra.\r\nfunction getSnakesInStartingPosition(snakes, canvasSettings) {\r\n  for (let i = 0, len = snakes.length; i < len; i++) {\r\n    const snake = snakes[i];\r\n    snake.direction = snake.actions[i % 4];\r\n    snake.moves = [];\r\n    let pos;\r\n    switch (snake.direction) {\r\n      case 'right':\r\n        pos = getRandomStartingPosLeft(snakes, canvasSettings.height);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - gridSize,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - (gridSize * 2),\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - (gridSize * 3),\r\n          y: pos.y,\r\n        }];\r\n        break;\r\n      case 'left':\r\n        pos = getRandomStartingPosRight(snakes, canvasSettings);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + gridSize,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + (gridSize * 2),\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + (gridSize * 3),\r\n          y: pos.y,\r\n        }];\r\n        break;\r\n      case 'up':\r\n        pos = getRandomStartingPosBottom(snakes, canvasSettings);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + gridSize,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + (gridSize * 2),\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + (gridSize * 3),\r\n        }];\r\n        break;\r\n      case 'down':\r\n        pos = getRandomStartingPosTop(snakes, canvasSettings.width);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - gridSize,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - (gridSize * 2),\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - (gridSize * 3),\r\n        }];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return snakes;\r\n}\r\n\r\nfunction getRandomStartingPosTop(snakes, canvasWidth) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'down' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].x))];\r\n\r\n  const margin = gridSize * 8;\r\n  const xMax = canvasWidth - (margin * 2);\r\n  const y = gridSize * 2;\r\n  const x = getRandomStartingPos(xMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosBottom(snakes, canvasSettings) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'up' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].x))];\r\n\r\n  const margin = gridSize * 8;\r\n  const xMax = canvasSettings.width - (margin * 2);\r\n  const y = canvasSettings.height - (gridSize * 3);\r\n  const x = getRandomStartingPos(xMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosRight(snakes, canvasSettings) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'left' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].y))];\r\n\r\n  const margin = gridSize * 8;\r\n  const yMax = canvasSettings.height - (margin * 2);\r\n  const x = canvasSettings.width - (gridSize * 3);\r\n  const y = getRandomStartingPos(yMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosLeft(snakes, canvasHeight) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'right' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].y))];\r\n\r\n  const margin = gridSize * 8;\r\n  const yMax = canvasHeight - (margin * 2);\r\n  const x = gridSize * 2;\r\n  const y = getRandomStartingPos(yMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPos(max, margin, existingValues) {\r\n  const value = Math.round((Math.random() * max) / gridSize) * gridSize + margin;\r\n  const posTaken = existingValues.some(v => v === value || v === value - gridSize || v === value + gridSize);\r\n\r\n  if (posTaken) {\r\n    return getRandomStartingPos(max, margin, existingValues, gridSize);\r\n  }\r\n  return value;\r\n}\r\nfunction getRandomCanvasPositionMargin(yMax, xMax) {\r\n  const x = Math.round((Math.random() * (xMax - (gridSize * 14))) / gridSize) * gridSize + (gridSize * 4);\r\n  const y = Math.round((Math.random() * (yMax - (gridSize * 2))) / gridSize) * gridSize + (gridSize * 2);\r\n  return { x, y };\r\n}\r\n// denna function är inte så lätt, kan troligen förenklas\r\nfunction detectOpponentCollision(snakes, eatOpponents) {\r\n  for (let i = 0, len = snakes.length; i < len; i++) {\r\n    if (snakes[i].dead) {\r\n      // om den redan är död så fortsätt. t.ex. en headon så kör jag båda två till dead direkt.\r\n      continue;\r\n    }\r\n    const currentSnake = snakes[i];\r\n    for (let j = 0; j < len; j++) {\r\n      // om opponents är död så ska man inte kunna krocka med den. döda snakes har ju fortfarande coordinater. alt är att ta bort coordinaterna\r\n      if (j === i || snakes[j].dead) {\r\n        continue;\r\n      }\r\n      const opponentSnake = snakes[j];\r\n      // lägga till en function där om man äter body[1] så där opponent?\r\n      for (let k = 0, len2 = opponentSnake.body.length; k < len2; k++) {\r\n        const collision = opponentSnake.body[k].x === currentSnake.body[0].x && opponentSnake.body[k].y === currentSnake.body[0].y;\r\n        if (collision) {\r\n          if (k === 0) {\r\n            currentSnake.dead = true;\r\n            opponentSnake.dead = true;\r\n            // collision head>head\r\n          } else if (eatOpponents) {\r\n            // snakes\r\n            if (k === 1) {\r\n              opponentSnake.dead = true;\r\n            } else {\r\n              opponentSnake.body.length = k;\r\n              len2 = k;\r\n\r\n              // snakes[j].body.length = k;\r\n            }\r\n            // kan jag använda opponentSnakeBody istället för snakes[j].body\r\n            // opponentSnakeBody.length = k;?\r\n          } else {\r\n            currentSnake.dead = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return snakes;\r\n}\r\n\r\nfunction detectSelfCollision(snake) {\r\n  const { body } = snake;\r\n  if (body.length < 5) {\r\n    return false;\r\n  }\r\n  // denna är nog inte lika snabb som for loopen?\r\n  const collision = body.slice(4).some(b => b.x === body[0].x && b.y === body[0].y);\r\n  return collision;\r\n  /*\r\n    for (let i = 4, len = body.length; i < len; i++) {\r\n      const selfCollison = body[i].x === body[0].x && body[i].y === body[0].y;\r\n      if (selfCollison) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n    */\r\n}\r\n\r\nfunction detectWallCollision(snakeHead, maxHeight, maxWidth) {\r\n  const leftCollison = snakeHead.x < 0;\r\n  const topCollison = snakeHead.y < 0;\r\n  const rightCollison = snakeHead.x > maxWidth - gridSize;\r\n  const bottomCollison = snakeHead.y > maxHeight - gridSize;\r\n  return leftCollison || topCollison || rightCollison || bottomCollison;\r\n}\r\n/*\r\n  util functions that i can move to snakeUtil.js\r\n  */\r\nexport {\r\n  detectOpponentCollision,\r\n  getRandomCanvasPositionMargin,\r\n  getSnakesInStartingPosition,\r\n  getInitialFoods,\r\n  detectWallCollision,\r\n  detectSelfCollision,\r\n  getRandomStartingPosLeft,\r\n  getRandomStartingPosRight,\r\n  getRandomStartingPosBottom,\r\n  getRandomStartingPosTop,\r\n  isInvalidMove,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nlet canvas;\r\nlet context;\r\nlet SCREEN_WIDTH = window.innerWidth;\r\nlet SCREEN_HEIGHT = window.innerHeight;\r\nlet first = true;\r\nconst mousePos = {\r\n  x: 400,\r\n  y: 300,\r\n};\r\nlet particles = [];\r\nlet rockets = [];\r\nconst MAX_PARTICLES = 400;\r\nconst colorCode = 0;\r\nconst img = new Image();\r\nimg.src = 'http://www.golfworldtravel.se/wp-content/uploads/2013/12/Arabella-Sheraton-Golf-4.jpg';\r\n\r\n\r\nfunction loop() {\r\n  // update screen size\r\n  if (SCREEN_WIDTH != window.innerWidth) {\r\n    canvas.width = SCREEN_WIDTH = window.innerWidth;\r\n  }\r\n  if (SCREEN_HEIGHT != window.innerHeight) {\r\n    canvas.height = SCREEN_HEIGHT = window.innerHeight;\r\n  }\r\n\r\n  context.save();\r\n  if (first) {\r\n    first = false;\r\n    context.globalAlpha = 1;\r\n  } else {\r\n    context.globalAlpha = 0.2;\r\n  }\r\n  context.drawImage(img, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n  context.restore();\r\n\r\n\r\n  // clear canvas\r\n  // context.fillStyle = \"rgba(0, 0, 0, 0.05)\";\r\n  // context.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n\r\n  const existingRockets = [];\r\n\r\n  for (let i = 0; i < rockets.length; i++) {\r\n    // update and render\r\n    rockets[i].update();\r\n    rockets[i].render(context);\r\n\r\n    // calculate distance with Pythagoras\r\n    const distance = Math.sqrt(Math.pow(mousePos.x - rockets[i].pos.x, 2) + Math.pow(mousePos.y - rockets[i].pos.y, 2));\r\n\r\n    // random chance of 1% if rockets is above the middle\r\n    const randomChance = rockets[i].pos.y < (SCREEN_HEIGHT * 2 / 3) ? (Math.random() * 100 <= 1) : false;\r\n\r\n    /* Explosion rules\r\n           - 80% of screen\r\n          - going down\r\n          - close to the mouse\r\n          - 1% chance of random explosion\r\n      */\r\n    if (rockets[i].pos.y < SCREEN_HEIGHT / 5 || rockets[i].vel.y >= 0 || distance < 50 || randomChance) {\r\n      rockets[i].explode();\r\n    } else {\r\n      existingRockets.push(rockets[i]);\r\n    }\r\n  }\r\n\r\n  rockets = existingRockets;\r\n\r\n  const existingParticles = [];\r\n\r\n  for (let i = 0; i < particles.length; i++) {\r\n    particles[i].update();\r\n\r\n    // render and save particles that can be rendered\r\n    if (particles[i].exists()) {\r\n      particles[i].render(context);\r\n      existingParticles.push(particles[i]);\r\n    }\r\n  }\r\n\r\n  // update array with existing particles - old particles should be garbage collected\r\n  particles = existingParticles;\r\n\r\n  while (particles.length > MAX_PARTICLES) {\r\n    particles.shift();\r\n  }\r\n}\r\n\r\nfunction Particle(pos) {\r\n  this.pos = {\r\n    x: pos ? pos.x : 0,\r\n    y: pos ? pos.y : 0,\r\n  };\r\n  this.vel = {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n  this.shrink = 0.97;\r\n  this.size = 2;\r\n\r\n  this.resistance = 1;\r\n  this.gravity = 0;\r\n\r\n  this.flick = false;\r\n\r\n  this.alpha = 1;\r\n  this.fade = 0;\r\n  this.color = 0;\r\n}\r\n\r\nParticle.prototype.update = function () {\r\n  // apply resistance\r\n  this.vel.x *= this.resistance;\r\n  this.vel.y *= this.resistance;\r\n\r\n  // gravity down\r\n  this.vel.y += this.gravity;\r\n\r\n  // update position based on speed\r\n  this.pos.x += this.vel.x;\r\n  this.pos.y += this.vel.y;\r\n\r\n  // shrink\r\n  this.size *= this.shrink;\r\n\r\n  // fade out\r\n  this.alpha -= this.fade;\r\n};\r\n\r\nParticle.prototype.render = function (c) {\r\n  if (!this.exists()) {\r\n    return;\r\n  }\r\n\r\n  c.save();\r\n\r\n  c.globalCompositeOperation = 'lighter';\r\n\r\n  const x = this.pos.x;\r\n\r\n\r\n  const y = this.pos.y;\r\n\r\n\r\n  const r = this.size / 2;\r\n\r\n  const gradient = c.createRadialGradient(x, y, 0.1, x, y, r);\r\n  gradient.addColorStop(0.1, `rgba(255,255,255,${this.alpha})`);\r\n  gradient.addColorStop(0.8, `hsla(${this.color}, 100%, 50%, ${this.alpha})`);\r\n  gradient.addColorStop(1, `hsla(${this.color}, 100%, 50%, 0.1)`);\r\n\r\n  c.fillStyle = gradient;\r\n\r\n  c.beginPath();\r\n  c.arc(this.pos.x, this.pos.y, this.flick ? Math.random() * this.size : this.size, 0, Math.PI * 2, true);\r\n  c.closePath();\r\n  c.fill();\r\n\r\n  c.restore();\r\n};\r\n\r\nParticle.prototype.exists = function () {\r\n  return this.alpha >= 0.1 && this.size >= 1;\r\n};\r\n\r\nfunction Rocket(x) {\r\n  Particle.apply(this, [{\r\n    x,\r\n    y: SCREEN_HEIGHT,\r\n  }]);\r\n\r\n  this.explosionColor = 0;\r\n}\r\n\r\nRocket.prototype = new Particle();\r\nRocket.prototype.constructor = Rocket;\r\n\r\nRocket.prototype.explode = function () {\r\n  const count = Math.random() * 10 + 80;\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const particle = new Particle(this.pos);\r\n    const angle = Math.random() * Math.PI * 2;\r\n\r\n    // emulate 3D effect by using cosine and put more particles in the middle\r\n    const speed = Math.cos(Math.random() * Math.PI / 2) * 15;\r\n\r\n    particle.vel.x = Math.cos(angle) * speed;\r\n    particle.vel.y = Math.sin(angle) * speed;\r\n\r\n    particle.size = 10;\r\n\r\n    particle.gravity = 0.2;\r\n    particle.resistance = 0.92;\r\n    particle.shrink = Math.random() * 0.05 + 0.93;\r\n\r\n    particle.flick = true;\r\n    particle.color = this.explosionColor;\r\n\r\n    particles.push(particle);\r\n  }\r\n};\r\n\r\nRocket.prototype.render = function (c) {\r\n  if (!this.exists()) {\r\n    return;\r\n  }\r\n\r\n  c.save();\r\n\r\n  c.globalCompositeOperation = 'lighter';\r\n\r\n  const x = this.pos.x;\r\n\r\n\r\n  const y = this.pos.y;\r\n\r\n\r\n  const r = this.size / 2;\r\n\r\n  const gradient = c.createRadialGradient(x, y, 0.1, x, y, r);\r\n  gradient.addColorStop(0.1, `rgba(255, 255, 255 ,${this.alpha})`);\r\n  gradient.addColorStop(1, `rgba(0, 0, 0, ${this.alpha})`);\r\n\r\n  c.fillStyle = gradient;\r\n\r\n  c.beginPath();\r\n  c.arc(this.pos.x, this.pos.y, this.flick ? Math.random() * this.size / 2 + this.size / 2 : this.size, 0, Math.PI * 2, true);\r\n  c.closePath();\r\n  c.fill();\r\n\r\n  c.restore();\r\n};\r\nfunction launch() {\r\n  launchFrom(mousePos.x);\r\n}\r\nfunction launchFrom(x) {\r\n  if (rockets.length < 10) {\r\n    const rocket = new Rocket(x);\r\n    rocket.explosionColor = Math.floor(Math.random() * 360 / 10) * 10;\r\n    rocket.vel.y = Math.random() * -3 - 4;\r\n    rocket.vel.x = Math.random() * 6 - 3;\r\n    rocket.size = 8;\r\n    rocket.shrink = 0.999;\r\n    rocket.gravity = 0.01;\r\n    rockets.push(rocket);\r\n  }\r\n}\r\nclass PhaseFinalResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.replayGame = this.replayGame.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    canvas = document.getElementById('fireworkscanvas');\r\n    context = canvas.getContext('2d');\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    setInterval(launch, 800);\r\n    setInterval(loop, 1000 / 50);\r\n  }\r\n\r\n  replayGame() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  /*\r\nskriv ut vinnaren och hur lång tid gamet tog\r\n(använd minigame.ticks och minigame.difficulty för att räkna ut sekunder)\r\nminigame.winners inner håller vinnare/vinnarna.\r\nkan vara så att winners inte finns om det snakes.length === 1\r\n men då är ju den \"vinnaren\". typ i coop singelplayer\r\npodium\r\n  */\r\n  render() {\r\n    const { gameFunc, game } = this.props;\r\n    const cheight = canvas ? canvas.height : window.innerHeight;\r\n    const cWidth = canvas ? canvas.width : window.innerWidth;\r\n\r\n    const winner = game.players[game.minigame.leaderboard[0].playerKey];\r\n    const winnerScore = game.minigame.leaderboard[0].totalScore;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <canvas id=\"fireworkscanvas\" />\r\n        <div style={{\r\n          position: 'absolute', top: 0, marginTop: cheight / 2, marginLeft: cWidth / 2,\r\n        }}\r\n        >\r\n          <Typography variant=\"h2\" style={{ color: 'white' }}>{`${winner.name} vinner med ${winnerScore} poäng`}</Typography>\r\n        </div>\r\n        <div style={{ position: 'absolute', top: 0, marginTop: cheight }}>\r\n          <div>\r\n            <Button onClick={this.replayGame}>Replay game</Button>\r\n            <Button onClick={gameFunc.restart}>Re-host game</Button>\r\n            <Button onClick={gameFunc.quit}>Quit game</Button>\r\n            <Button onClick={() => alert('show results')}>Show results</Button>\r\n            <Button onClick={() => alert('start survey')}>Start survey</Button>\r\n            <Button>\r\n              <Link to=\"/create\">Create new game</Link>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseFinalResult.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseFinalResult;\r\n","import React, { Component } from 'react';\r\n\r\nclass Tetris extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                tetris.js\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tetris;","import React, { PureComponent } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseEnd extends PureComponent {\r\n  render() {\r\n    const { game } = this.props;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography>{`hur seer detta ut konstigt med dollarsign?HostEnd toggleheader()${game.title}`}</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseEnd.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseEnd;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nfunction chunkify(a, nr) {\r\n  let n = nr;\r\n  if (n < 2) { return [a]; }\r\n  const len = a.length;\r\n  const out = [];\r\n  let i = 0;\r\n  let size;\r\n  if (len % n === 0) {\r\n    size = Math.floor(len / n);\r\n    while (i < len) {\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  } else {\r\n    while (i < len) {\r\n      size = Math.ceil((len - i) / n);\r\n      n -= 1;\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  }\r\n  return out;\r\n}\r\nfunction createSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const snakes = [];\r\n  // mocka flera spelare genom att loopa på x och sen byt player.key till playerKeys[0]\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      actions: ['up', 'down', 'right', 'left'],\r\n      score: 0,\r\n      color: SNAKE_COLORS[i % SNAKE_COLORS.length],\r\n      name: SNAKE_NAMES[i % SNAKE_NAMES.length],\r\n      // start positioner ska randomas helt, inklusive direction, varanan ska starta nereifrån upp, uppifrån ner, höger till vänster, vänster till göger..\r\n      // fyra olika random metoder och y måste vara unikt för de som kör horizontelt och x måste vara unikt för som kör vertikalt, kanske även ett mellanrum mellan varje snake\r\n      id: i,\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\n\r\nfunction createTeamSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 100;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const nrOfSnakes = playerKeys;\r\n  // coop snakes här vil jag kunna hitta ultimata updelningen. man ska kunna vara 2 eller 4 per orm. om det är ojämnt antal får man vara en 3a.\r\n  // chunkify tar in playerkeys och en siffra på hur många snakes det ska vara och delar upp dem men då behöver jag veta hur många snakes jag vill ha?\r\n  // kanske får göra en helt egen chunkify? behöver veta hur mågna snakes jag vill ha och sen kanske det löser sig självt i loopen\r\n\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      direction: 'right',\r\n      id: i,\r\n      score: 0,\r\n      body: [{\r\n        x: startingX,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - gridSize,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 2),\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 3),\r\n        y: startingY,\r\n      }],\r\n\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\nfunction createCoopSnakes(players) {\r\n  // alla players kontrollerar samma snake. antingen med en knapp var, eller så har alla alla knappar?\r\n  // kanske en spelare får bara 1 klick? samarbetesövning.\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 90;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const snake = {\r\n    playerKeys,\r\n    direction: 'right',\r\n    actions: ['up', 'down', 'right', 'left'],\r\n    score: 0,\r\n    color: SNAKE_COLORS[Math.floor(Math.random() * SNAKE_COLORS.length)],\r\n    name: SNAKE_NAMES[Math.floor(Math.random() * SNAKE_NAMES.length)],\r\n    id: 0,\r\n    body: [{\r\n      x: startingX,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - gridSize,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 2),\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 3),\r\n      y: startingY,\r\n    }],\r\n  };\r\n  snakes.push(snake);\r\n  return snakes;\r\n}\r\nconst SNAKE_COLORS = ['#F44336',\r\n  '#9C27B0',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FFEB3B',\r\n  '#FF9800',\r\n  '#607D8B',\r\n  '#795548',\r\n  '#E91E63',\r\n  '#3F51B5',\r\n  '#673AB7',\r\n  '#00BCD4',\r\n  '#03A9F4',\r\n  '#8BC34A',\r\n  '#CDDC39',\r\n  '#009688',\r\n  '#FFC107',\r\n  '#FF5722',\r\n];\r\nconst SNAKE_NAMES = ['Stan',\r\n  'Jane',\r\n  'Sara',\r\n  'Dan',\r\n  'Lisa',\r\n  'Joe',\r\n  'Rose',\r\n  'Ray',\r\n  'Lyra',\r\n  'Sam',\r\n  'Lucy',\r\n  'Ben',\r\n  'Noa',\r\n  'Mark',\r\n  'Eve',\r\n  'Ned',\r\n  'Ann',\r\n  'Todd'];\r\nconst gridSize = 20;\r\nclass SnakeStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startCounter();\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    let counter = 5;\r\n    const i = setInterval(() => {\r\n      counter -= 1;\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n    let snakes = [];\r\n    const snakeGenerator = {\r\n      classic: createSnakes(game.players),\r\n      team: createTeamSnakes(game.players),\r\n      coop: createCoopSnakes(game.players),\r\n    };\r\n    snakes = snakeGenerator[game.minigame.multiplayerMode];\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const actionChunks = chunkify(snakes[i].actions, snakes[i].playerKeys.length);\r\n      for (let j = 0; j < snakes[i].playerKeys.length; j++) {\r\n        const player = game.players[snakes[i].playerKeys[j]];\r\n        player.snakeId = snakes[i].id;\r\n        player.controlActions = actionChunks[j];\r\n      }\r\n    }\r\n\r\n    game.minigame.snakes = snakes;\r\n    game.phase = 'gameplay';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnakeStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeStarting;\r\n","export const WIDTH = 500;\r\nexport const HEIGHT = 250;\r\n\r\nexport const HOLE_HEIGHT = 10;\r\nexport const HOLE_CURVE_DEPTH = 7;\r\nexport const HOLE_WIDTH = 10;\r\nexport const BALL_RADIUS = 3;\r\nexport const BALL_RADIUS_CONTROLLER = 12;\r\n\r\nexport const MIN_POWER = 10;\r\nexport const MAX_POWER = 150;\r\nexport const SWING_STEP = 75;\r\n\r\nexport const TIMER_MS = 45 * 1000;\r\nexport const OVER_TIMER_MS = 7 * 1000;\r\nexport const HURRY_UP_MS = 15 * 1000;\r\nexport const IDLE_KICK_MS = 60 * 1000;\r\nexport const MATCH_LENGTH_MS = 5 * 60 * 1000;\r\nexport const MATCH_OVER_MS = 10 * 1000;\r\n\r\nexport const AIR_COLOR = '#2f2f2f';\r\nexport const GRASS_COLOR = 'green';\r\nexport const ROUGH_COLOR = 'green';\r\nexport const FAIRWAY_COLOR = 'green';\r\nexport const GREEN_COLOR = 'green';\r\nexport const BUNKER_COLOR = 'green';\r\nexport const WATER_COLOR = 'blue';\r\nexport const PENALTY_STROKES = 12;\r\n\r\n\r\nexport const PHYSICS_SPEED_FACTOR = 3;\r\n\r\nexport const SCORE_TERMS = [\r\n  {\r\n    name: 'Albatross', score: -3,\r\n  }, {\r\n    name: 'Eagle', score: -2,\r\n  },\r\n  {\r\n    name: 'Birdie', score: -1,\r\n  },\r\n  {\r\n    name: 'Par', score: 0,\r\n  },\r\n  {\r\n    name: 'Bogey', score: 1,\r\n  },\r\n  {\r\n    name: 'Double bogey', score: 2,\r\n  },\r\n  {\r\n    name: 'Triple bogey', score: 3,\r\n  },\r\n  {\r\n    name: 'Quadruple bogey', score: 4,\r\n  },\r\n];\r\n\r\nexport const CLUBS = [\r\n  {\r\n    name: 'Wood', type: 'wood', id: 0, loft: 22, powerFactor: 3.8, max: 800,\r\n  },\r\n  {\r\n    name: 'Hybrid', type: 'iron', id: 1, loft: 26, powerFactor: 3.6, max: 800,\r\n  },\r\n  {\r\n    name: '3 Iron', type: 'iron', id: 2, loft: 31, powerFactor: 3.2, max: 700,\r\n  },\r\n  {\r\n    name: '4 Iron', type: 'iron', id: 3, loft: 34, powerFactor: 3.15, max: 700,\r\n  },\r\n  {\r\n    name: '5 Iron', type: 'iron', id: 4, loft: 37, powerFactor: 3.1, max: 700,\r\n  },\r\n  {\r\n    name: '6 Iron', type: 'iron', id: 5, loft: 40, powerFactor: 3.05, max: 700,\r\n  },\r\n  {\r\n    name: '7 Iron', type: 'iron', id: 6, loft: 43, powerFactor: 3, max: 700,\r\n  },\r\n  {\r\n    name: '8 Iron', type: 'iron', id: 7, loft: 46, powerFactor: 2.95, max: 700,\r\n  },\r\n  {\r\n    name: '9 Iron', type: 'iron', id: 8, loft: 49, powerFactor: 2.9, max: 700,\r\n  },\r\n  {\r\n    name: 'Wedge', type: 'iron', id: 9, loft: 62, powerFactor: 2.75, max: 700,\r\n  },\r\n  {\r\n    name: 'Chipper', type: 'iron', id: 10, loft: 78, powerFactor: 2.6, max: 700,\r\n  },\r\n  {\r\n    name: 'Putter', type: 'putt', id: 11, loft: 1, powerFactor: 1.6, max: 400,\r\n  },\r\n];\r\n\r\nexport const GROUND_COLORS = [\r\n  'orange',\r\n  'brown',\r\n  'gray',\r\n];\r\n","import { sample } from 'lodash';\r\nimport tinycolor from 'tinycolor2';\r\nimport * as p2 from 'p2';\r\nimport {\r\n  HOLE_HEIGHT,\r\n  HOLE_CURVE_DEPTH,\r\n  HOLE_WIDTH,\r\n  GROUND_COLORS,\r\n  BALL_RADIUS,\r\n  CLUBS,\r\n  SCORE_TERMS,\r\n} from './GolfConstants';\r\n\r\n/* get an int between min and max inclusive */\r\nfunction randInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction shuffle(a) {\r\n  for (let i = a.length; i; i -= 1) {\r\n    const j = Math.floor(Math.random() * i);\r\n    const x = a[i - 1];\r\n    a[i - 1] = a[j];\r\n    a[j] = x;\r\n  }\r\n}\r\n\r\nconst ballMaterial = new p2.Material();\r\n\r\nconst groundMaterial = new p2.Material();\r\n\r\nconst holeMaterial = new p2.Material();\r\n\r\nconst ballGroundContact = new p2.ContactMaterial(ballMaterial, groundMaterial, {\r\n  friction: 1,\r\n  restitution: 0.5,\r\n});\r\n\r\nconst ballHoleContact = new p2.ContactMaterial(ballMaterial, holeMaterial, {\r\n  friction: 0.1,\r\n  restitution: 0,\r\n  relaxation: 8,\r\n});\r\n\r\nconst BALL_GROUP = Math.pow(2, 1);\r\nconst GROUND_GROUP = Math.pow(2, 2);\r\n\r\nexport function createWorld() {\r\n  const world = new p2.World({\r\n    gravity: [0, 60],\r\n  });\r\n\r\n  world.sleepMode = p2.World.BODY_SLEEPING;\r\n\r\n  world.addContactMaterial(ballGroundContact);\r\n  world.addContactMaterial(ballHoleContact);\r\n\r\n  return world;\r\n}\r\n\r\nexport function isInvalidSwing(swingData) {\r\n  // validerar att swingen måste ha minst x antal datapunkter, vilket säkerställer att det inte var en kort snärt bara.\r\n  if (swingData.length < 10) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n/*\r\n * Resets the ball position to level spawn if ball fell off world.\r\n */\r\n\r\nfunction newBall(position) {\r\n  const ballShape = new p2.Circle({\r\n    radius: BALL_RADIUS,\r\n    collisionGroup: BALL_GROUP,\r\n    collisionMask: GROUND_GROUP,\r\n  });\r\n\r\n  ballShape.material = ballMaterial;\r\n\r\n  const ballBody = new p2.Body({\r\n    mass: 1,\r\n    position,\r\n  });\r\n  ballBody.addShape(ballShape);\r\n\r\n  ballBody.angularDamping = 0.8;\r\n  ballBody.damping = 0.18;\r\n  ballBody.sleepTimeLimit = 1;\r\n  ballBody.sleepSpeedLimit = 2;\r\n\r\n  return ballBody;\r\n}\r\n// spawn: I.List<number>\r\nexport function createBall(spawn) {\r\n  return newBall([\r\n    spawn[0],\r\n    spawn[1] - BALL_RADIUS,\r\n  ]);\r\n}\r\nexport function getDistanceYards(a, b) {\r\n  if (a > b) {\r\n    return Math.floor((a - b) / 4);\r\n  }\r\n  return Math.floor((b - a) / 4);\r\n}\r\nexport function identifyClubType(velocity) {\r\n  const yRatio = velocity.y / (velocity.x + velocity.y);\r\n  const loft = yRatio * 90;\r\n  if (loft < 5) return 'putt';\r\n  const firstIron = CLUBS.find(x => x.type === 'iron');\r\n  if (loft < firstIron.loft - 1) {\r\n    return 'wood';\r\n  }\r\n  return 'iron';\r\n}\r\nexport function createBallFromInitial(position, velocity) {\r\n  const ball = newBall(position);\r\n  ball.velocity = velocity.slice(); // clone\r\n  return ball;\r\n}\r\nexport function createAudio(file) {\r\n  const snd = new Audio();\r\n  const src = document.createElement('source');\r\n  src.type = 'audio/mpeg';\r\n  src.src = file;\r\n  snd.appendChild(src);\r\n  return snd;\r\n}\r\nexport function getSwingData(club, acceleration) {\r\n  const xFactor = (90 - club.loft) / 90;\r\n  const YFactor = club.loft / 90;\r\n  const power = acceleration;\r\n  const swing = {\r\n    x: Math.min(Math.ceil(power * xFactor * club.powerFactor), club.max),\r\n    y: Math.min(Math.ceil(power * YFactor * club.powerFactor), club.max),\r\n  };\r\n  return swing;\r\n}\r\n\r\nexport function getScoreName(strokes, par) {\r\n  if (strokes === 1) return 'Hole in one!';\r\n  const score = strokes - par;\r\n  const term = SCORE_TERMS.find(x => x.score === score);\r\n  if (term) return term.name;\r\n  return `${score} over par`;\r\n}\r\nexport function validateSwingMovement(acceleration, clubIndex) {\r\n  // i teorin så finns det två olika godkända swingar. höger och vänster. sen även putt.\r\n  // z positiv = nedswing.\r\n  // x positiv = vänsterswing, negativ = högerswing\r\n\r\n  // använd golcbluban för att välja 3 olika valideringar. putter, iron, wood\r\n  // försök få till en ratio där värdena är giltiga: vid wood så är det precis när uppswingen börjar\r\n  // för putter så är det när z är väldigt liten +5 - -5 kanske. eller relativt till x\r\n  // för iron så är det när z är positiv, x och z är kanske lika i värden\r\n\r\n  // y får aldrig vara högre än någon av x eller z.\r\n\r\n  // regler: abs(x) måste vara större än z i alla swingar\r\n\r\n  // z får inte vara mycket negativ . max -2 eller så för\r\n  const xpower = Math.abs(acceleration.x);\r\n  const ypower = Math.abs(acceleration.y);\r\n  const zpower = Math.abs(acceleration.z);\r\n\r\n  if (ypower > xpower && ypower > zpower) return false;\r\n\r\n  const club = CLUBS[clubIndex];\r\n  switch (club.type) {\r\n    case 'wood':\r\n    // z måste vara negativ och den får inte vara mer än 50% av xpower\r\n      return xpower > zpower;\r\n    case 'iron':\r\n      if (acceleration.z < 0) return false;\r\n      const angleRatio = xpower / zpower;\r\n      return angleRatio > 0.5 && angleRatio < 5;\r\n    case 'putt':\r\n      return xpower / 2 > zpower;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return true;\r\n}\r\nexport function addHolePoints(level) {\r\n  const { width } = level;\r\n\r\n  // points has to start with x=0 and end with x=WIDTH\r\n  if (level.points[0][0] !== 0) {\r\n    throw new Error('invalid points: first x !== 0');\r\n  }\r\n  if (level.points[level.points.length - 1][0] !== width) {\r\n    throw new Error(`invalid points: last x !== WIDTH (${width})`);\r\n  }\r\n\r\n  // insert hole\r\n  // get the first point after the hole...\r\n  const idxAfterHole = level.points.findIndex(point => point[0] > level.hole[0]);\r\n  // const idxAfterHole = level.points.findIndex(point => point.get(0) > level.hole.get(0));\r\n\r\n  const x1 = level.hole[0] - HOLE_WIDTH / 2;\r\n  const x2 = level.hole[0] + HOLE_WIDTH / 2;\r\n\r\n  if (x1 <= level.points[idxAfterHole - 1][0]) {\r\n    throw new Error('invalid points: hole x1 cannot be <= the previous x');\r\n  }\r\n\r\n  if (x2 >= level.points[idxAfterHole][0]) {\r\n    throw new Error('invalid points: hole x2 cannot be >= the previous x');\r\n  }\r\n\r\n  // ...then insert hole between points\r\n  const holePoints = [\r\n    [level.hole[0] - HOLE_WIDTH / 2, level.hole[1]],\r\n    [level.hole[0] - HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0], level.hole[1] + HOLE_HEIGHT],\r\n    [level.hole[0] + HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0] + HOLE_WIDTH / 2, level.hole[1]],\r\n  ];\r\n\r\n  const pointsWithHole = level.points\r\n    .slice(0, idxAfterHole)\r\n    .concat(holePoints)\r\n    .concat(level.points.slice(idxAfterHole));\r\n  const levelWithHolePoints = { ...level, points: pointsWithHole };\r\n  return levelWithHolePoints;\r\n}\r\n\r\nexport function createGround(level) {\r\n  const { height, width } = level;\r\n  // This used to create a single ground shape.\r\n  // Now it creates 3 because this mysteriously fixes a bug where the ground after the hole wasn't\r\n  // working correctly? man I don't even know\r\n  const beforeHole = level.points.filter(point => point[0] < level.hole[0]);\r\n  const afterHole = level.points.filter(point => point[0] > level.hole[0]);\r\n\r\n  const vertsBeforeHole = beforeHole.concat([\r\n    [beforeHole[beforeHole.length - 1][0], height],\r\n    [0, height],\r\n  ]);\r\n\r\n  // Creates this shape:\r\n  // |\\/|\r\n  // |  |\r\n  // |  |\r\n  // |__|\r\n  const vertsHole = [\r\n    [level.hole[0] - HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0], level.hole[1] + HOLE_HEIGHT],\r\n    [level.hole[0] + HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0] + HOLE_WIDTH / 2, height],\r\n    [level.hole[0] - HOLE_WIDTH / 2, height],\r\n  ];\r\n\r\n  const vertsAfterHole = afterHole.concat([\r\n    [width, height],\r\n    [afterHole[0][0], height],\r\n  ]);\r\n\r\n  const grounds = [vertsBeforeHole, vertsHole, vertsAfterHole].map((verts) => {\r\n    const body = new p2.Body({\r\n      mass: 0,\r\n    });\r\n\r\n    body.fromPolygon(verts);\r\n\r\n    for (const shape of body.shapes) {\r\n      if (verts === vertsHole) {\r\n        shape.material = holeMaterial;\r\n      } else {\r\n        shape.material = groundMaterial;\r\n      }\r\n\r\n      shape.collisionGroup = GROUND_GROUP;\r\n      shape.collisionMask = BALL_GROUP;\r\n    }\r\n\r\n    return body;\r\n  });\r\n\r\n  return grounds;\r\n}\r\n// pos: I.List<number>\r\nexport function createHoleSensor(pos) {\r\n  const sensorShape = new p2.Box({\r\n    width: HOLE_WIDTH,\r\n    height: HOLE_HEIGHT,\r\n  });\r\n\r\n  sensorShape.sensor = true;\r\n  sensorShape.collisionGroup = GROUND_GROUP;\r\n  sensorShape.collisionMask = BALL_GROUP;\r\n\r\n  // Sensor is purposely built halfway into the ground so top edge collisions are avoided\r\n  const sensorBody = new p2.Body({\r\n    position: [\r\n      pos[0],\r\n      pos[1] + (Math.ceil(HOLE_HEIGHT * 1.4)),\r\n    ],\r\n  });\r\n  sensorBody.damping = 0;\r\n  sensorBody.addShape(sensorShape);\r\n\r\n  return sensorBody;\r\n}\r\n\r\nexport function getSegmentWidths(totalWidth, minWidth) {\r\n  const widths = [];\r\n  let remainingWidth = totalWidth;\r\n\r\n  while (remainingWidth > 0) {\r\n    let maxWidth = 50;\r\n\r\n    if (remainingWidth < maxWidth) {\r\n      maxWidth = remainingWidth;\r\n    }\r\n\r\n    let width = randInt(minWidth, maxWidth);\r\n\r\n    // if this segment would leave us with < minWidth remaining width, just make this segment the\r\n    // entire remaining width\r\n    if (remainingWidth - width < minWidth) {\r\n      width = remainingWidth;\r\n    }\r\n\r\n    widths.push(width);\r\n    remainingWidth -= width;\r\n  }\r\n\r\n  // shuffle widths so it's not biased towards having smaller segments at the end\r\n  shuffle(widths);\r\n\r\n  return widths;\r\n}\r\nexport function calculateStrokeScore(strokes, level) {\r\n  const parScore = {\r\n    3: strokes === 1 ? 25 : 25 - (strokes * 2),\r\n    4: strokes === 1 ? 25 : 25 - (strokes * 2),\r\n    5: strokes === 1 ? 25 : 25 - (strokes * 2),\r\n  };\r\n  return Math.abs(Math.round(parScore[level.par]));\r\n}\r\nexport function calculateTimeScore(scoretime, level) {\r\n  return Math.round((((level.time / 1000) * 1.5) - scoretime) / 10);\r\n}\r\nexport function getPlayerColors(len) {\r\n  const goldenRatio = 0.618033988749895;\r\n  const colors = [];\r\n  const s = 0.5;\r\n  const v = 0.95;\r\n  let h = Math.random();\r\n  for (let i = 0; i < len; i++) {\r\n    h += goldenRatio;\r\n    h %= 1;\r\n    const tiny = tinycolor.fromRatio({ h, s, v });\r\n    colors.push(tiny.toHexString());\r\n  }\r\n\r\n  return colors;\r\n}\r\n// lägg till olika material de två segementerna närmast hålet ska vara green, där färgen är anoorlunda och friktionen mindre\r\n// vattenhinder? blått och räknas likt outOfBounds? fast sätt tillbaka till senaste pos, spara alltid senaste pos använd även för outofbounds?\r\n// bunker: hög friktion, ingen studs = damping?\r\n// bunker och vatten kan bara finnas på plant eller i en viaduct, ta nåra av de spetsiga hålen/viaducterna och gör till vatten eller bunker\r\n// bunker och vatten kan påverka par? kan öka paret ett snäpp om det är mycket bunker/vatten\r\n// rough och fairway är samma? tillsvidare\r\nexport function levelGen(width, height, test) {\r\n  if (test) {\r\n    const testLevel = {\r\n      points: [\r\n        [0, 400],\r\n        [width, 400],\r\n      ],\r\n      hole: [width / 1.5, 400],\r\n      spawn: [100, 400],\r\n      color: 'brown',\r\n      par: 4,\r\n      height,\r\n      time: 20 * 1000,\r\n      width,\r\n    };\r\n    return testLevel;\r\n  }\r\n\r\n  const segmentWidths = getSegmentWidths(width, 12);\r\n  const numSegments = segmentWidths.length;\r\n\r\n  const spawnSegment = randInt(2, 4);\r\n  let par;\r\n  if (width > 1000) {\r\n    const rnd = randInt(1, 18);\r\n    if (rnd > 8) {\r\n      par = 4;\r\n    } else if (rnd > 4) {\r\n      par = 5;\r\n    } else {\r\n      par = 3;\r\n    }\r\n  } else {\r\n    par = 5;\r\n  }\r\n\r\n  const parSetting = {\r\n    hole: {\r\n      5: numSegments - randInt(2, Math.floor(numSegments / 4)),\r\n      4: numSegments - randInt(Math.floor(numSegments / 4), Math.floor(numSegments / 2.5)),\r\n      3: numSegments - randInt(Math.floor(numSegments / 2.5), Math.floor(numSegments / 2)),\r\n    },\r\n    time: {\r\n      5: 100 * 1000,\r\n      4: 80 * 1000,\r\n      3: 60 * 1000,\r\n    },\r\n    flatRatio: {\r\n      5: 40,\r\n      4: 30,\r\n      3: 20,\r\n    },\r\n  };\r\n\r\n  const holeSegment = parSetting.hole[par];\r\n\r\n  const time = parSetting.time[par];\r\n\r\n  const points = [];\r\n  let spawnX;\r\n  let spawnY;\r\n  let holeX;\r\n  let holeY;\r\n\r\n  const minY = Math.floor(height * 0.4);\r\n  const maxY = minY + Math.min(400, height * 0.5);\r\n\r\n  for (let idx = 0; idx <= numSegments; idx++) {\r\n    const segmentWidth = segmentWidths[idx - 1];\r\n\r\n    let x; let\r\n      y;\r\n\r\n    if (idx === 0) {\r\n      x = 0;\r\n    } else {\r\n      x = points[idx - 1][0] + segmentWidth;\r\n    }\r\n\r\n    if (x > width) {\r\n      x = width;\r\n    }\r\n\r\n    if (idx === 0) {\r\n      y = randInt(height - 150, height - 20);\r\n    } else {\r\n      const prevY = points[idx - 1][1];\r\n\r\n      // special-case flat section\r\n      if (randInt(1, parSetting.flatRatio[par]) > 10) {\r\n        y = prevY;\r\n      } else {\r\n        let boundLow = prevY - 40;\r\n        let boundHigh = prevY + 40;\r\n\r\n        // clamp high/low bounds so that if they go out of screen bounds, the bounds shift to\r\n        // contain the same range but clamped\r\n        if (boundLow < minY) {\r\n          boundHigh -= (boundLow - minY);\r\n          boundLow = minY;\r\n        }\r\n\r\n        if (boundHigh > maxY) {\r\n          boundLow -= (boundHigh - maxY);\r\n          boundHigh = maxY;\r\n        }\r\n\r\n        y = randInt(boundLow, boundHigh);\r\n      }\r\n    }\r\n\r\n    if (idx === spawnSegment) {\r\n      spawnX = x - Math.round(segmentWidth / 2);\r\n      y = points[idx - 1][1];\r\n      spawnY = y;\r\n    }\r\n\r\n    if (idx === holeSegment) {\r\n      holeX = x - Math.round(segmentWidth / 2);\r\n      y = points[idx - 1][1];\r\n      holeY = y;\r\n    }\r\n\r\n    points.push([x, y]);\r\n  }\r\n\r\n  const color = sample(GROUND_COLORS);\r\n\r\n  const hole = [holeX, holeY];\r\n  const spawn = [spawnX, spawnY];\r\n\r\n  const level = {\r\n    points,\r\n    hole,\r\n    spawn,\r\n    color,\r\n    par,\r\n    time,\r\n    height,\r\n    width,\r\n  };\r\n\r\n  return level;\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as p2 from 'p2';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { fire } from '../../../base';\r\nimport golfwood1Audio from './audio/golfwood.wav';\r\nimport golfwood2Audio from './audio/golfwood2.wav';\r\nimport golfwood3Audio from './audio/golfwood3.wav';\r\nimport golfiron1Audio from './audio/golfiron.wav';\r\nimport golfiron2Audio from './audio/golfiron2.wav';\r\nimport golfiron3Audio from './audio/golfiron3.wav';\r\n\r\nimport countdownAudio from './audio/countdown.wav';\r\nimport golfclapAudio from './audio/golfclap.wav';\r\nimport golfputtAudio from './audio/golfputt.wav';\r\nimport golfscoreAudio from './audio/golfscore.wav';\r\n\r\n\r\n// http://jsfiddle.net/AceJJ/1748/ fireworks\r\nimport * as util from './GolfUtil';\r\nimport {\r\n  HURRY_UP_MS,\r\n  GRASS_COLOR,\r\n  MATCH_OVER_MS,\r\n  BALL_RADIUS,\r\n  PENALTY_STROKES,\r\n  CLUBS,\r\n} from './GolfConstants';\r\n\r\nlet ctx;\r\nlet canvas;\r\nconst fixedTimeStep = 1 / 60; // seconds\r\nconst maxSubSteps = 10; // Max sub steps to catch up with the wall clock\r\nlet lastTime;\r\n// jag behöver lyssna på nya slag från firebase: [power, angle, ballstatus: moving]\r\n// jag behöver updatera firebase varje gång en boll är redo för att slås(distans kvar, ballstatus: [awaitingSwing, moving, inhole, outOfPlay )\r\n\r\n// kolla på exempelspelen på p2. https://github.com/schteppe/p2.js/blob/master/examples/canvas/character.html\r\n// använda samma koncept av en init funktion och en animation. precis som med snake, inte massa olika komponenter osv.\r\n// ha en drawBall/drawballs drawGround/drawlevel som gör ctx.rectfill osv likt p2 exempel.\r\n// använd p2s eventhandlers? för att se om en boll är i hålet.\r\n// och sen då synkningarna mot firebase med bara den väsentliga infomrationen som både host och play behöver. SwingData, bollstatus, distans, osv.\r\n// Försök att inte använda utilMetoderna utan börja med att utveckla egna metoder med inspiration från manygolf bara.\r\n\r\n// 1. init() skapar ett game, world, balls, osv. kopplar bollar till playerkeys. updaterar players med ballsId (precis som snakes).\r\n// initierar lyssnare för varje boll kopplat till player/swing etc i firebase, likt snake\r\n// skapa eventhandlers i p2. Som kollar om någon boll är i hålet, om någon boll är out of bounds?\r\n// 2. skapa en animation-loop och metoder för att rita ut alla komponenter: boll, ground, hole, level, world ....\r\n// skapa winConditions. alltså när alla bollar har status: inhole så är det klart.\r\n// 3. lägg till golfController där man lyssnar på balls[playerkey] likt snake. och när bollen har status WAITING_SWING så kan man svinga med mobilen och data synkas till firebase\r\n// och läses in i host som sätter en veolocify på ball.body\r\nfunction drawBall(x, y, fill, stroke, playerState) {\r\n  // ball border width\r\n  ctx.lineWidth = 1;\r\n\r\n  // if (playerState && playerState === PlayerState.leftRound) {\r\n  //   // make fill translucent\r\n  //   ctx.fillStyle = tinycolor(fill).setAlpha(0.5).toRgbString();\r\n  //   ctx.strokeStyle = tinycolor(stroke).setAlpha(0.5).toRgbString();\r\n  // } else {\r\n  //   ctx.fillStyle = fill;\r\n  //   ctx.strokeStyle = stroke;\r\n  // }\r\n  ctx.fillStyle = fill;\r\n  ctx.strokeStyle = stroke;\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n  ctx.closePath();\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS - ctx.lineWidth / 2, 0, 2 * Math.PI);\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n}\r\n\r\nclass Golf extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // för att göra det mer smooth. så behöver jag typ dela upp ätandet så att det sker i flera tick? för just nu är ett tick storleken på food och allt annat\r\n    // lite delay när jag ökar speeden. är det olika delay för olika snakes? optimera senare.\r\n    const canvasHeight = Math.floor(window.innerHeight - 160);\r\n    const canvasWidth = Math.floor(window.innerWidth);\r\n\r\n    // ta in olika ljud för olika styrkor på alla här. då kan de också bli så att detspelar över varandra.\r\n    // https://freesound.org/search/?q=golf&g=1&f=type%3A%22wav%22+tag%3A%22golf%22&page=3#sound\r\n    const soundEffects = {\r\n      wood: [\r\n        {\r\n          audio: util.createAudio(golfwood1Audio),\r\n          minpower: 400,\r\n        },\r\n        {\r\n          audio: util.createAudio(golfwood2Audio),\r\n          minpower: 300,\r\n        },\r\n        {\r\n          audio: util.createAudio(golfwood3Audio),\r\n          minpower: 200,\r\n        },\r\n      ],\r\n      golfclap: {\r\n        audio: util.createAudio(golfclapAudio),\r\n      },\r\n      iron: [\r\n        {\r\n          audio: util.createAudio(golfiron1Audio),\r\n          minpower: 350,\r\n        },\r\n        {\r\n          audio: util.createAudio(golfiron2Audio),\r\n          minpower: 250,\r\n        },\r\n        {\r\n          audio: util.createAudio(golfiron3Audio),\r\n          minpower: 150,\r\n        },\r\n      ],\r\n      putt: [\r\n        {\r\n          audio: util.createAudio(golfputtAudio),\r\n          minpower: 8,\r\n        },\r\n      ],\r\n      ballInHole: {\r\n        audio: util.createAudio(golfscoreAudio),\r\n      },\r\n      countdown: {\r\n        audio: util.createAudio(countdownAudio),\r\n      },\r\n    };\r\n    this.state = {\r\n      levelData: null,\r\n      world: null,\r\n      level: null,\r\n      startTime: null,\r\n      expTime: null,\r\n      holeSensor: null,\r\n      time: 0,\r\n      canvasHeight,\r\n      canvasWidth,\r\n      leaderId: null,\r\n      matchEndTime: null,\r\n      testacceleration: 195,\r\n      testClubIndex: 2,\r\n      testBallIndex: 0,\r\n      balls: null,\r\n      nextLevelTimer: null,\r\n      scorers: [],\r\n      totalScores: [],\r\n      currentlevelScores: [],\r\n      leaderboard: [],\r\n      soundEffects,\r\n    };\r\n    // golf\r\n    this.init = this.init.bind(this);\r\n    this.ensurePlayersInBounds = this.ensurePlayersInBounds.bind(this);\r\n    this.swing = this.swing.bind(this);\r\n    this.drawGround = this.drawGround.bind(this);\r\n    this.drawLevelCompleteHud = this.drawLevelCompleteHud.bind(this);\r\n    this.drawPlayHud = this.drawPlayHud.bind(this);\r\n    this.renderFrame = this.renderFrame.bind(this);\r\n    this.animate = this.animate.bind(this);\r\n    this.testSwing = this.testSwing.bind(this);\r\n    this.syncPlayersObjectToFirebase = this.syncPlayersObjectToFirebase.bind(this);\r\n    this.initControllerListener = this.initControllerListener.bind(this);\r\n    this.isLevelCompleted = this.isLevelCompleted.bind(this);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n    this.distributeScore = this.distributeScore.bind(this);\r\n    this.isLoadNextLevel = this.isLoadNextLevel.bind(this);\r\n    this.loadNextLevel = this.loadNextLevel.bind(this);\r\n    this.saveGame = this.saveGame.bind(this);\r\n    this.setEventHandlers = this.setEventHandlers.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.init();\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    // kan jag ha det här?\r\n\r\n    return true;\r\n  }\r\n\r\n  setEventHandlers(world) {\r\n    world.on('beginContact', (evt) => {\r\n      const {\r\n        balls, holeSensor, startTime, expTime, scorers, soundEffects, level,\r\n      } = this.state;\r\n      const { game: _game } = this.props;\r\n      const players = Object.values(_game.players);\r\n      if (evt.bodyA !== holeSensor && evt.bodyB !== holeSensor) return;\r\n      const ballBody = evt.bodyA === holeSensor ? evt.bodyB : evt.bodyA;\r\n      if (ballBody.scored) return;\r\n      const { playerKey } = ballBody;\r\n      soundEffects.ballInHole.audio.currentTime = 0;\r\n      soundEffects.ballInHole.audio.play();\r\n\r\n      // alert(`${this.props.game.players[playerKey].name} scored!`);\r\n      // update players state with whatever. and uppdate firebase\r\n      ballBody.scored = true;\r\n      let newExpTime = expTime;\r\n      if (_game.minigame.speedmode && expTime > Date.now() + (HURRY_UP_MS * 2)) {\r\n        newExpTime = expTime - HURRY_UP_MS;\r\n      }\r\n\r\n      const scoreTime = Math.floor((Date.now() - startTime) / 1000);\r\n      const scorer = {\r\n        playerKey,\r\n        time: scoreTime,\r\n        strokes: ballBody.strokes,\r\n        hole: _game.minigame.round,\r\n        par: level.par,\r\n      };\r\n      scorers.push(scorer);\r\n      this.setState(() => ({\r\n        balls,\r\n        expTime: newExpTime,\r\n        scorers,\r\n      }));\r\n\r\n      const newPlayerState = players.map(p => (p.key === playerKey ? { ...p, state: 'SCORED', scoreTime } : p));\r\n      this.syncPlayersToFirebase(newPlayerState);\r\n    });\r\n\r\n    world.on('postStep', (evt) => {\r\n      // createHoleSensor body\r\n      const { balls, level } = this.state;\r\n      const { game: _game } = this.props;\r\n      const players = Object.values(_game.players);\r\n      const stillBalls = balls.filter(x => x.velocity[0] === 0 && x.velocity[1] === 0);\r\n      if (stillBalls.length === 0) {\r\n        return;\r\n      }\r\n      const playersToUpdateState = players.filter(x => x.state === 'MOVING' && stillBalls.some(b => x.key === b.playerKey));\r\n      if (playersToUpdateState.length === 0) {\r\n        return;\r\n      }\r\n      const newPlayerState = players.map((player, index) => {\r\n        if (playersToUpdateState.some(x => x.key === player.key)) {\r\n          return { ...player, state: 'STILL', distance: util.getDistanceYards(level.hole[0], balls[player.ballIndex].interpolatedPosition[0]) };\r\n        }\r\n        return player;\r\n      });\r\n      this.syncPlayersToFirebase(newPlayerState);\r\n\r\n      //      this.setState(state => newPlayerState);\r\n      // update players state with whatever. and uppdate firebase\r\n    });\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  ensurePlayersInBounds() {\r\n    const { balls, canvasWidth, level } = this.state;\r\n    const ensuredBalls = balls.map((ball) => {\r\n      const result = ball;\r\n      if (ball.interpolatedPosition[0] < 0 || ball.interpolatedPosition[0] > canvasWidth) {\r\n        result.position = [ball.lastPos[0], ball.lastPos[1] - 20];\r\n        result.velocity = [0, 0];\r\n      }\r\n      return result;\r\n    });\r\n\r\n    this.setState(() => ({\r\n      balls: ensuredBalls,\r\n    }));\r\n    // goooo\r\n    // 7. någon snygg clubpicker.\r\n\r\n    // 10. lägg till options om att kunna studs i väggar och tak?\r\n\r\n    // par kan baseras på hur hålet ligger till \"hur stora höjdskillnaderna är runt om hålet\r\n\r\n    // ersätt bakgrundsbilden med målnen med en bild som innehåller lite instruktioner\r\n    // kan vara olika bilder beroende på state. bilden skrivs om vid touchstart, touchend, och vid rerender. kanske kan ta bort den från touchstart och end då de ändå updaterar satate och därmed rerender\r\n    // något med fingerprint på som ändras till en golfswing-icon när isSwinging är true.\r\n    // är ingenting medan bollen är moving?\r\n\r\n    // 8. backspinn?\r\n\r\n    // fixa public games...lista under /play där man kan se games som är i connectphase?in_progress? man ska också kunna se vilka games man själv är med i?\r\n    // jag hämtar alltså ut alla games som är status in_progress eller \"setup\". alla visas i en lista.\r\n    // och en extra lista om det finns games som man säljv är med i av alla ovan. baserat på ens playerkey.\r\n\r\n    // kalibereringsfunktion? för att lösa problemet med olika känsliga mobiler?\r\n    // man håller ner tummen och svingar flera gånger, det högsta värdet man kommer upp i används för att kaliberera extra power.\r\n    // standard värdet på en bra mobil är att man max kan slå 150 (75m/s). om man kalibrerar och får till t.ex. 100 som högsta värde så\r\n    // sätter jag 100 + 10% = 110 som nya hösta värdet. det är ett hårt maxvärde så man inte kan fuska med kalibreringen och kalbirera lågt för att sen slå\r\n    // mycket hårdare. så om jag kalibrerar till 100 så blir maxpower 110. powerfaktorn blir 160/110=1.36 så resultatet av kalibreringen blir:\r\n    // en extra powerfactor på 1.36. en maxgräns på vi set hightestacceleration på 150 används alltid\r\n\r\n    // power faktorns uträkning blir: MAXPOWER/(heighestcalibration*1.1)\r\n\r\n    // 11. ny game modes???\r\n\r\n    // 9. rita ut en hålflaga?\r\n  }\r\n\r\n  drawBalls() {\r\n    const { balls } = this.state;\r\n    const { game } = this.props;\r\n    const players = Object.values(game.players);\r\n\r\n    const len = players.length;\r\n    for (let i = 0; i < len; i++) {\r\n      const player = players[i];\r\n      const pos = balls[player.ballIndex].interpolatedPosition;\r\n      drawBall(pos[0], pos[1], player.color, 'gray', player.state);\r\n    }\r\n\r\n\r\n    // players.forEach((player) => {\r\n    //   // Don't render ghost for the current player\r\n    //   // if (player.id === state.id && !debugRender) {\r\n    //   //   return;\r\n    //   // }\r\n\r\n    //   const pos = player.ball.interpolatedPosition;\r\n    //   drawBall(pos[0], pos[1], player.color, 'black', player.state);\r\n\r\n    //   // if (state.match.leaderId === player.id) {\r\n    //   //   drawCrown(ctx, pos[0], pos[1]);\r\n    //   // }\r\n    // });\r\n  }\r\n\r\n  // långting är off med drawground. antingen i den eller i levelgen eller någon annan util metod.\r\n  // blev så när jag bytte constans.height och width till state här som är baserat på window\r\n  drawGround() {\r\n    const { level, canvasHeight, canvasWidth } = this.state;\r\n    const { points } = level;\r\n\r\n\r\n    ctx.fillStyle = level.color;\r\n    const groundLineWidth = 3;\r\n    ctx.lineWidth = groundLineWidth;\r\n\r\n    ctx.beginPath();\r\n    const firstPoint = points[0];\r\n    ctx.moveTo(firstPoint[0], firstPoint[1]);\r\n\r\n    points.slice(1).forEach((point) => {\r\n      ctx.lineTo(point[0], point[1]);\r\n    });\r\n\r\n    // draw a complete shape so fill works\r\n    // add padding so the outline stroke doesn't show up\r\n\r\n    ctx.lineTo(canvasWidth + groundLineWidth, points[points.length - 1][1]);\r\n    ctx.lineTo(canvasWidth + groundLineWidth, canvasHeight + groundLineWidth);\r\n    ctx.lineTo(-groundLineWidth, canvasHeight + groundLineWidth);\r\n    ctx.lineTo(-groundLineWidth, points[0][1]);\r\n\r\n    ctx.strokeStyle = GRASS_COLOR;\r\n    ctx.stroke();\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n\r\n  drawLevelCompleteHud() {\r\n    const {\r\n      nextLevelTimer, level, canvasHeight, canvasWidth, leaderboard,\r\n    } = this.state;\r\n    const { game } = this.props;\r\n    ctx.font = '24px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillText('Level completed!', 15, 24);\r\n    ctx.font = '20px roboto';\r\n    ctx.textAlign = 'right';\r\n    ctx.fillText(`pin: ${game.gameId}`, canvasWidth - 20, 24);\r\n    ctx.textAlign = 'left';\r\n\r\n\r\n    const timeRemaining = Math.floor((nextLevelTimer - Date.now()) / 1000);\r\n    ctx.fillText(timeRemaining, canvasWidth / 2, 24);\r\n    for (let i = 0; i < leaderboard.length; i++) {\r\n      const data = leaderboard[i];\r\n      ctx.fillText(`${game.players[data.playerKey].name}: ${data.totalScore} poäng`, canvasWidth / 2, 60 + (30 * i));\r\n    }\r\n  }\r\n\r\n  drawPlayHud() {\r\n    const {\r\n      expTime, level, canvasHeight, canvasWidth, soundEffects, scorers,\r\n    } = this.state;\r\n    const { game } = this.props;\r\n    ctx.font = '24px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillText(`Hole ${game.minigame.round} Par ${level.par}`, 15, 24);\r\n    ctx.font = '20px roboto';\r\n    ctx.textAlign = 'right';\r\n    ctx.fillText(`pin: ${game.gameId}`, canvasWidth - 30, 24);\r\n    ctx.textAlign = 'left';\r\n\r\n    const timeRemaining = Math.floor((expTime - Date.now()) / 1000);\r\n    if (timeRemaining === 10) {\r\n      soundEffects.countdown.audio.play();\r\n    }\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(timeRemaining, canvasWidth / 2, 24);\r\n    ctx.textAlign = 'left';\r\n    const scoredTextHeight = 40;\r\n    scorers.filter(x => x.hole === game.minigame.round)\r\n      .slice(0, 3)\r\n      .forEach((s, index) => ctx.fillText(`${game.players[s.playerKey].name} gjorde ${util.getScoreName(s.strokes, s.par)} efter ${s.time} sekunder`, canvasWidth / 2, scoredTextHeight * (1 + index)));\r\n\r\n    // Object.values(game.players).filter(x => x.state === 'SCORED')\r\n    //   .sort((a, b) => a.scoreTime > b.scoreTime)\r\n    //   .slice(0, 3)\r\n    //   .forEach((p, index) => ctx.fillText(`${p.name} gick i hål med XXX slag på ${p.scoreTime} sekunder`, canvasWidth / 2, scoredTextHeight * (1 + index)));\r\n    // // funkar typ men försvinner snabbt... ska stanna kvar tills ny kommer och petar ner den. upp till 3 samtida som visas. en per rad.\r\n\r\n    // lägg till info om vilken hål det här är. hål x? kolla på game.round? vilket par är det?\r\n    // tid kvar?\r\n  }\r\n\r\n  testSwing() {\r\n    const { testacceleration, testClubIndex, testBallIndex } = this.state;\r\n    const club = CLUBS[testClubIndex];\r\n    const swing = util.getSwingData(club, testacceleration);\r\n    this.swing(swing, testBallIndex, true);\r\n  }\r\n\r\n  swing(velocity, ballIndex, test) {\r\n    const { balls, holeSensor, soundEffects } = this.state;\r\n    const { game: { players } } = this.props;\r\n    const clubtype = util.identifyClubType(velocity);\r\n    const power = velocity.x + velocity.y;\r\n    const soundEffect = soundEffects[clubtype].find(x => power > x.minpower);\r\n    // ljudet borde styras mer av var på banan jag slår. spawn så är det en ren smäll. utanför spawn så är det lite mer \"gräsljud\"?\r\n    // iron och wood blir samma. wood ska jag inte kunna välja utanför spawn?\r\n    if (soundEffect) {\r\n      soundEffect.audio.currentTime = 0;\r\n      soundEffect.audio.play();\r\n    }\r\n\r\n    const ballToHit = balls.find(b => b.ballIndex === ballIndex);\r\n    players[ballToHit.playerKey].state = 'MOVING';\r\n\r\n    const holeX = holeSensor.interpolatedPosition[0];\r\n    const ballX = ballToHit.interpolatedPosition[0];\r\n    const velocityWithDirection = { ...velocity, y: -velocity.y };\r\n    // bollen är förbi hålet\r\n    if (ballX > holeX) {\r\n      velocityWithDirection.x = -velocityWithDirection.x;\r\n    }\r\n    this.syncPlayersObjectToFirebase(players);\r\n    ballToHit.velocity[0] = velocityWithDirection.x;\r\n    ballToHit.velocity[1] = velocityWithDirection.y;\r\n    ballToHit.strokes += 1;\r\n    ballToHit.lastPos = [...ballToHit.position];\r\n    this.setState(() => ({ balls }));\r\n  }\r\n\r\n  createLevel() {\r\n    const { canvasHeight, canvasWidth } = this.state;\r\n    const { game } = this.props;\r\n  }\r\n\r\n  init() {\r\n    const { game } = this.props;\r\n    const { canvasHeight, canvasWidth } = this.state;\r\n    canvas = document.getElementById('golfcanvas');\r\n    ctx = canvas.getContext('2d');\r\n    ctx.lineWidth = 5;\r\n\r\n    const level = util.addHolePoints(util.levelGen(canvasWidth, canvasHeight, false));\r\n    const world = util.createWorld();\r\n\r\n    //\r\n    const groundBodies = util.createGround(level);\r\n    const holeSensor = util.createHoleSensor(level.hole);\r\n\r\n    for (const body of groundBodies) {\r\n      world.addBody(body);\r\n    }\r\n\r\n    world.addBody(holeSensor);\r\n\r\n    const playerKeys = Object.keys(game.players);\r\n    const len = playerKeys.length;\r\n    const createdPlayers = [];\r\n    const balls = [];\r\n    const playerColors = util.getPlayerColors(len);\r\n    for (let i = 0; i < len; i++) {\r\n      const ball = util.createBall(level.spawn);\r\n      // hur håller jag koll på vilken boll som är vilken spelare?\r\n      ball.playerKey = playerKeys[i];\r\n      ball.ballIndex = i;\r\n      ball.scored = false;\r\n      ball.strokes = 0;\r\n      ball.lastPos = [...ball.position];\r\n      world.addBody(ball);\r\n      const player = Object.assign({\r\n        ballIndex: i,\r\n        key: playerKeys[i],\r\n        color: playerColors[i],\r\n        state: 'STILL',\r\n        distance: util.getDistanceYards(level.hole[0], level.spawn[0]),\r\n        score: 0,\r\n      }, game.players[playerKeys[i]]);\r\n      balls.push(ball);\r\n      createdPlayers.push(player);\r\n    }\r\n    //\r\n\r\n    this.setState(() => ({\r\n      world,\r\n      level,\r\n      balls,\r\n      holeSensor,\r\n      startTime: Date.now(),\r\n      expTime: Date.now() + level.time,\r\n    }));\r\n\r\n    createdPlayers.forEach(player => this.initControllerListener(player));\r\n    // event ball in hole\r\n    this.setEventHandlers(world);\r\n\r\n    this.syncToFirebase(createdPlayers, level);\r\n    requestAnimationFrame(this.animate);\r\n  }\r\n\r\n\r\n  syncPlayersToFirebase(players) {\r\n    const { game, gameFunc } = this.props;\r\n    game.players = players.reduce((_result, player) => {\r\n      const result = _result;\r\n      result[player.key] = player;\r\n      return result;\r\n    }, game.players);\r\n    this.saveGame(game);\r\n  }\r\n\r\n  syncPlayersObjectToFirebase(playersObj) {\r\n    const { game, gameFunc } = this.props;\r\n    game.players = playersObj;\r\n\r\n    this.saveGame(game);\r\n  }\r\n\r\n  syncToFirebase(players, level) {\r\n    const { game, gameFunc } = this.props;\r\n\r\n    game.players = players.reduce((_result, player) => {\r\n      const result = _result;\r\n      result[player.key] = player;\r\n      return result;\r\n    }, game.players);\r\n    game.status = 'IN_PROGRESS';\r\n    game.minigame.levelColor = level.color;\r\n    game.minigame.round = 1;\r\n    this.saveGame(game);\r\n  }\r\n\r\n  saveGame(game) {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n    const { soundEffects, leaderboard } = this.state;\r\n    if (`${game.minigame.round}` === game.minigame.holes) {\r\n      game.minigame.leaderboard = leaderboard.map(x => ({\r\n        ...x,\r\n        currentRoundScore: null,\r\n      }));\r\n      game.phase = 'final_result';\r\n    } else {\r\n      soundEffects.golfclap.audio.play();\r\n      game.phase = 'level_completed';\r\n      this.setState(() => ({\r\n        nextLevelTimer: Date.now() + MATCH_OVER_MS,\r\n      }));\r\n    }\r\n    this.saveGame(game);\r\n  }\r\n\r\n  animate(time) {\r\n    const { world } = this.state;\r\n    const { game: { phase } } = this.props;\r\n    requestAnimationFrame(this.animate);\r\n\r\n    const deltaTime = lastTime ? (time - lastTime) / 400 : 0;\r\n\r\n    // Move bodies forward in time\r\n\r\n    world.step(fixedTimeStep, deltaTime, maxSubSteps);\r\n    lastTime = time;\r\n\r\n    if (phase === 'gameplay') {\r\n      this.ensurePlayersInBounds();\r\n      this.renderFrame();\r\n      this.drawPlayHud();\r\n      if (this.isLevelCompleted()) {\r\n        this.distributeScore();\r\n        this.nextPhase();\r\n      }\r\n    } else if (phase === 'level_completed') {\r\n      this.renderFrame();\r\n      this.drawLevelCompleteHud();\r\n      if (this.isLoadNextLevel()) {\r\n        this.loadNextLevel();\r\n      }\r\n    }\r\n\r\n    // ska poäng bara ges för placering inbördes? eller poäng för slagen? båda? tröstpoäng om man inte klarar banan\r\n\r\n    // struktuerar om. ha phase switchcondition runt mera saker. för är vi i pausscreen kanske det är onödigt att köra esnureplayersisinbounds etc\r\n    // sätt phase till leaderboard,\r\n    // giveoutpoints\r\n    // showleaderboard (automaticly goes to next level after 10 sec, setState(nextLevelTimer = date.now() + 10sekunder))\r\n    //\r\n    // gör en else eller annan if efter här som kollar om phase==='leaderboard' && nextLevelTimer har gått ut.\r\n    // om det är sant så ska nästa level laddas. använd npgon variant av init. loadNextLevel();\r\n  }\r\n\r\n  loadNextLevel() {\r\n    const { game, gameFunc } = this.props;\r\n    const {\r\n      balls, canvasHeight, canvasWidth,\r\n    } = this.state;\r\n    // börja med att testa att bara updatera states bodies med nya värden. annars kanske jag måste köra remove body på world. eller world.clear();\r\n    // frågan är om events.on är kvar?\r\n\r\n    const level = util.addHolePoints(util.levelGen(canvasWidth, canvasHeight, false));\r\n    const world = util.createWorld();\r\n    //\r\n    const groundBodies = util.createGround(level);\r\n    const createdHoleSensor = util.createHoleSensor(level.hole);\r\n\r\n    for (const body of groundBodies) {\r\n      world.addBody(body);\r\n    }\r\n\r\n    world.addBody(createdHoleSensor);\r\n\r\n    balls.forEach((ball) => {\r\n      ball.position = [\r\n        level.spawn[0],\r\n        level.spawn[1] - BALL_RADIUS,\r\n      ];\r\n      ball.velocity = [0, 0];\r\n      ball.scored = false;\r\n      ball.strokes = 0;\r\n      ball.lastPos = [...ball.position];\r\n      world.addBody(ball);\r\n    });\r\n    this.setEventHandlers(world);\r\n\r\n    // skapa ny level, och world?\r\n\r\n    // sätt alla players state till STILL, nollställ swing och distance\r\n\r\n    // sätt alla bollars pos till level.spawn.\r\n    const playerUpdates = Object.values(game.players).map(p => ({\r\n      ...p,\r\n      state: 'STILL',\r\n      distance: util.getDistanceYards(level.hole[0], level.spawn[0]),\r\n    }))\r\n      .reduce((_result, player) => {\r\n        const result = _result;\r\n        result[player.key] = player;\r\n        return result;\r\n      }, game.players);\r\n    // säkertställ att ingen swing råkas göras när jag återställer play.swing obj.\r\n    // updatera state\r\n    this.setState(() => ({\r\n      world,\r\n      level,\r\n      balls,\r\n      holeSensor: createdHoleSensor,\r\n      startTime: Date.now(),\r\n      expTime: Date.now() + level.time,\r\n    }));\r\n\r\n    game.phase = 'gameplay';\r\n    game.players = playerUpdates;\r\n    game.minigame.round += 1;\r\n    this.saveGame(game);\r\n  }\r\n\r\n  distributeScore() {\r\n    // finns alltid risk att firebase tar tid på sig att skriva och läsa och då hinner jag inte få upp score?\r\n    // kanske behöver ha viss information i state här ändå.\r\n    const { game } = this.props;\r\n    const { scorers: _scorers, leaderboard, level } = this.state;\r\n    // lägg till poängräkning för olika scoremodes: strokes, time, placement\r\n    // allt ska översättas till score, inte rakt av strokes. hole in one === 100, andra slag är 80 - (strokes*5)\r\n    // time: level.time - scoretime (hole in one still bonus 10p?)\r\n    // position: position är något annat än scoremode? för måste fortfarande avgöra om det är time eller strokes som gäller\r\n    // eller så är det ntal slag och vid lika så är det tiden\r\n    // kolla hur manygolf gör det. 50,40,35,30,25,20,15,10,5,1....1\r\n    //\r\n    const completteScorers = [..._scorers];\r\n\r\n    const players = Object.values(game.players);\r\n    // give default penalty scores to players who didnt score on this round\r\n    const currentScorers = _scorers.filter(x => x.hole === game.minigame.round);\r\n    if (!currentScorers || currentScorers.length < players.length) {\r\n      players.forEach((player) => {\r\n        if (!currentScorers || !currentScorers.some(x => x.playerKey === player.key)) {\r\n          const scorer = {\r\n            playerKey: player.key,\r\n            par: level.par,\r\n            strokes: PENALTY_STROKES,\r\n            time: (level.time * 1.5) / 1000,\r\n            hole: game.minigame.round,\r\n          };\r\n          completteScorers.push(scorer);\r\n        }\r\n      });\r\n    }\r\n\r\n    let board;\r\n    switch (game.minigame.scoremode) {\r\n      case 'strokes':\r\n\r\n        board = players.map((player) => {\r\n          const totalScore = completteScorers.filter(x => x.playerKey === player.key);\r\n          const currentScore = totalScore.find(x => x.hole === game.minigame.round);\r\n          const playerScore = {\r\n            currentRoundScore: util.calculateStrokeScore(currentScore.strokes, level),\r\n            totalScore: totalScore.reduce((r, s) => r + util.calculateStrokeScore(s.strokes, level), 0),\r\n            playerKey: player.key,\r\n          };\r\n          return playerScore;\r\n        }).sort((a, b) => b.totalScore - a.totalScore);\r\n        break;\r\n      case 'time':\r\n        board = players.map((player) => {\r\n          const totalScore = completteScorers.filter(x => x.playerKey === player.key);\r\n          const currentScore = totalScore.find(x => x.hole === game.minigame.round);\r\n          const playerScore = {\r\n            currentRoundScore: util.calculateTimeScore(currentScore.time, level),\r\n            totalScore: totalScore.reduce((r, s) => r + util.calculateTimeScore(s.time, level), 0),\r\n            playerKey: player.key,\r\n          };\r\n          return playerScore;\r\n        })\r\n          .sort((a, b) => b.totalScore - a.totalScore);\r\n        break;\r\n      case 'compedetive':\r\n      // fixa till. rälkna ut poäng genom strokes och level.par\r\n      // sätt ett max antal slag till 10, hämta från constants\r\n      // fixa namn på alla scored i constans? -2 = eagle +2 = double boogie etc +5 vad heter det?\r\n      // använd namnen vid drawPlayHud\r\n        board = players.map((player) => {\r\n          const totalScore = completteScorers.filter(x => x.playerKey === player.key);\r\n          const currentScore = totalScore.find(x => x.hole === game.minigame.round);\r\n          const playerScore = {\r\n            currentRoundScore: currentScore.strokes - currentScore.par,\r\n            totalScore: totalScore.reduce((r, s) => r + (s.strokes - currentScore.par), 0),\r\n            playerKey: player.key,\r\n          };\r\n          return playerScore;\r\n        }).sort((a, b) => a.totalScore - b.totalScore);\r\n        break;\r\n      case 'position':\r\n        // läg till för positon likt manygolf. strokes och sen time avgör vilken position som ges\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState(() => ({\r\n      leaderboard: board,\r\n      scorers: completteScorers,\r\n    }));\r\n  }\r\n\r\n\r\n  initControllerListener(player) {\r\n    const { game } = this.props;\r\n    const { balls } = this.state;\r\n    const swingRef = fire.database().ref(`/games/${game.key}/players/${player.key}/swing`);\r\n    const that = this;\r\n    swingRef.on('value', (snapshot) => {\r\n      const { game: _game } = that.props;\r\n      const currentPlayer = _game.players[player.key];\r\n      const swingData = snapshot.val();\r\n      if (swingData) {\r\n        that.swing(swingData, currentPlayer.ballIndex);\r\n      } else {\r\n        console.log('move error');\r\n      }\r\n    });\r\n  }\r\n\r\n  isLoadNextLevel() {\r\n    const { nextLevelTimer } = this.state;\r\n    const now = Date.now();\r\n    if (now > nextLevelTimer) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isLevelCompleted() {\r\n    const { expTime, balls } = this.state;\r\n    const now = Date.now();\r\n    if (now > expTime) {\r\n      return true;\r\n    }\r\n    if (!balls.some(x => !x.scored)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  renderFrame() {\r\n    const { canvasHeight, canvasWidth } = this.state;\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n    // Transform the canvas\r\n    // Note that we need to flip the y axis since Canvas pixel coordinates\r\n    // goes from top to bottom, while physics does the opposite.\r\n    ctx.save();\r\n\r\n    this.drawGround();\r\n    this.drawBalls();\r\n  }\r\n\r\n  // informationen mellan varje bana är i en annan phase? en annan komponent?\r\n  render() {\r\n    const {\r\n      canvasHeight, canvasWidth, testClubIndex, testacceleration, testBallIndex, balls,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"phase-container\" id=\"golfboard\">\r\n        <canvas id=\"golfcanvas\" height={canvasHeight} width={canvasWidth} />\r\n        <button type=\"button\" onClick={this.testSwing}>swing</button>\r\n        <FormControl>\r\n          <InputLabel htmlFor=\"clubc-required\">Club</InputLabel>\r\n          <Select\r\n            value={testClubIndex || 0}\r\n            onChange={this.handleChangeSelect}\r\n            name=\"testClubIndex\"\r\n            inputProps={{\r\n              id: 'club-required',\r\n            }}\r\n          >\r\n            {CLUBS.map((c, index) => (\r\n              <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>\r\n            ))}\r\n\r\n          </Select>\r\n        </FormControl>\r\n        <TextField\r\n          label=\"Acceleration\"\r\n          name=\"testacceleration\"\r\n          type=\"number\"\r\n          value={testacceleration}\r\n          margin=\"normal\"\r\n          onChange={this.handleChange('testacceleration')}\r\n        />\r\n        { balls && (\r\n        <FormControl>\r\n          <InputLabel htmlFor=\"ball-required\">Ball</InputLabel>\r\n          <Select\r\n            value={testBallIndex || 0}\r\n            onChange={this.handleChangeSelect}\r\n            name=\"testBallIndex\"\r\n            inputProps={{\r\n              id: 'ball-required',\r\n            }}\r\n          >\r\n            {balls.map((b, index) => (\r\n              <MenuItem key={b.ballIndex} value={b.ballIndex}>{b.ballIndex}</MenuItem>\r\n            ))}\r\n\r\n          </Select>\r\n        </FormControl>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolf.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default Golf;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass GolfStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startCounter();\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    let counter = 5;\r\n    const i = setInterval(() => {\r\n      counter -= 1;\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n\r\n    game.phase = 'gameplay';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  // skapa bara en klassic mode med en \"boll\" per spelare\r\n\r\n  // i golf.js så sno kod för att kunna skapa en golfbana med fysik osv.\r\n  // skapa firebase lyssnare till varje boll? likt snake kanske. men granska den lösningen dåden inte var så jättebra\r\n  // skapa en enkel golfcontroller som kan göra en swing, få ett powervärde och skicka värdet till firebaase och in i snake.js som slår till bollen utifrån värdet\r\n  // börja med en standard klubba/vinkel, i golfController ska man sen kunna ändra klubba innan varje slag.\r\n  // putter, wedge, iron 8, iron 6, driver är standard?\r\n  // övriga klubbtyper kan man köpa för ingame currency som man vinner efter varje hål?\r\n  // eller som kan kan köpa till sin \"profil\" kräver att jag börjar med inloggning till stagehoot. krävs också för att få till handikapp.\r\n  // kanske bara för golf man behöver logga in? eller har valet att kunna logga in med fördelen att spara progress etc?\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolfStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default GolfStarting;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass SnakeSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      racetarget: props.game.minigame.racetarget,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      eatOpponents: props.game.minigame.eatOpponents,\r\n      wallCollision: props.game.minigame.wallCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        wallCollision,\r\n        opponentCollision,\r\n        eatOpponents,\r\n        racetarget,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"survival\">Survival</MenuItem>\r\n                  <MenuItem value=\"race\">Race</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'race'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Snake length\"\r\n                                name=\"racetarget\"\r\n                                type=\"number\"\r\n                                value={racetarget}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('racetarget')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={wallCollision}\r\n                      onChange={this.handleChangeBool('wallCollision')}\r\n                      value=\"wallCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Wall collisions\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision && eatOpponents}\r\n                      disabled={!opponentCollision}\r\n                      onChange={this.handleChangeBool('eatOpponents')}\r\n                      value=\"eatOpponents\"\r\n                    />\r\n                )}\r\n                  label=\"Eat opponent on collision\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nSnakeSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeSetup;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass GolfSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      holes: props.game.minigame.holes,\r\n      scoremode: props.game.minigame.scoremode,\r\n      speedmode: props.game.minigame.speedmode,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator,\r\n        holes, difficulty, gamemode, scoremode, speedmode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        speedmode,\r\n        multiplayerMode,\r\n        holes,\r\n        difficulty,\r\n        gamemode,\r\n        scoremode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator,\r\n        holes, difficulty, gamemode, scoremode, speedmode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"classic\">Classic</MenuItem>\r\n                  <MenuItem value=\"wild\">Wild</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'classic'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"holes to play\"\r\n                                name=\"holes\"\r\n                                type=\"number\"\r\n                                value={holes}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('holes')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"scoremode-required\">Score mode</InputLabel>\r\n                <Select\r\n                  value={scoremode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"scoremode\"\r\n                  inputProps={{\r\n                    id: 'scoremode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"strokes\">Strokes</MenuItem>\r\n                  <MenuItem value=\"time\">Time</MenuItem>\r\n                  <MenuItem value=\"compedetive\">Compedetive</MenuItem>\r\n\r\n\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={speedmode}\r\n                      onChange={this.handleChangeBool('speedmode')}\r\n                      value=\"speedmode\"\r\n                    />\r\n                )}\r\n                  label=\"Speed mode\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nGolfSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default GolfSetup;\r\n","export const AUTH_EXPIRE_MS = 30 * 60 * 1000;\r\nexport const CLIENT_ID = 'cac8bf9ba7b34b3a8f727eecdef1a2a8';\r\nexport const MISSING_ALBUM_COVER = 'https://spotify.i.lithium.com/t5/image/serverpage/image-id/25294i2836BD1C1A31BDF2/';\r\nexport const MIN_SONGS_PLAYLIST = 10;\r\nexport const SONG_VOLUME_FADE_TIME = 3;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport {\r\n  AUTH_EXPIRE_MS,\r\n  CLIENT_ID,\r\n} from '../SpotifyConstants';\r\n\r\nclass SpotifySetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      questions: 16,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const token = localStorage.getItem('spotifytoken');\r\n    const timestamp = localStorage.getItem('spotifytoken_timestamp');\r\n\r\n    // If there is no token, redirect to Spotify authorization. kolla om token gått ut också\r\n    // jag kan sätta redirect till någon anna route och lösa det så att när man kommer dit så går den direkt och kollar i firebase och connectar än till rätt game?\r\n\r\n    if (!token || Date.now() - timestamp > AUTH_EXPIRE_MS) {\r\n      const authEndpoint = 'https://accounts.spotify.com/authorize';\r\n      // Replace with your app's client ID, redirect URI and desired scopes\r\n      const redirectUri = window.location.origin;\r\n      const scopes = [\r\n        'user-top-read',\r\n      ];\r\n      window.location = `${authEndpoint}?client_id=${CLIENT_ID}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\r\n    }\r\n    const myHeaders = new Headers();\r\n    myHeaders.append('Authorization', `Bearer ${token}`);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator,\r\n        questions, difficulty, gamemode, scoremode, speedmode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        gamemode,\r\n        questions,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        nameGenerator,\r\n        gamemode,\r\n        questions,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"classic\">Classic</MenuItem>\r\n                  <MenuItem value=\"wild\">Wild</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl>\r\n                <TextField\r\n                  label=\"Questions to play\"\r\n                  name=\"questions\"\r\n                  type=\"number\"\r\n                  value={questions}\r\n                  margin=\"normal\"\r\n                  onChange={this.handleChange('questions')}\r\n                />\r\n              </FormControl>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nSpotifySetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default SpotifySetup;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass SpotifyConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  nextPhase() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    let { players } = game;\r\n    if (!players) {\r\n      players = [];\r\n    } else {\r\n      players = Object.values(players);\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">\r\n            <span>Join game with Game PIN: </span>\r\n            <span className=\"dynamic-text\">{game.gameId}</span>\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">{game.title}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            {players.map(player => (\r\n              <Grid key={player.key} item xs={3}>\r\n                {player.avatar && <img src={player.avatar} alt={player.name} /> }\r\n                <Typography paragraph variant=\"body1\" className=\"dynamic-text\">{player.name}</Typography>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSpotifyConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default SpotifyConnection;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../../common/CountdownAnimation';\r\n\r\nclass SpotifyStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startCounter();\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    let counter = 5;\r\n    const i = setInterval(() => {\r\n      counter -= 1;\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n    // Generera frågor och svar. viktigt att göra detta i ett svep. vill inte behöva använda spotify api under spelets gång för att riskera att token har expirat\r\n    // ALT 1\r\n    // alla frågor och svar genereras här och sparas till firebase\r\n    // då kan jag läsa upp frågorna en i taget likt speltypen quiz och gå till resultQuestion componenten\r\n    // ALT 2\r\n    // Alla frågor genereras i spotify.js utan att sparas till firebase\r\n    // då måste resultquiz componenten vara en child-component till spotify.js.\r\n    // spotify.js visas både i phase gameplay och level_complete då och om det är level_complete så renderars childcomponent resultquiz\r\n\r\n    game.phase = 'gameplay';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSpotifyStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default SpotifyStarting;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\n// import AnswerOption from '../AnswerOption';\r\n// import AnswerChart from '../AnswerChart';\r\n// import Leaderboard from '../Leaderboard';\r\n\r\n\r\nclass SpotifyResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.nextQuestion = this.nextQuestion.bind(this);\r\n    this.finalizeQuiz = this.finalizeQuiz.bind(this);\r\n  }\r\n\r\n  nextQuestion() {\r\n    const game = {};\r\n    game.phase = 'gameplay';\r\n    this.props.nextQuestion();\r\n    // skulle kunna spara currenquestion +1 här. och sen använda det vid play.js för att matcha svar mot fråga.\r\n    this.props.gameFunc.update(game);\r\n  }\r\n\r\n  finalizeQuiz() {\r\n    this.props.gameFunc.update({ phase: 'final_result' });\r\n  }\r\n\r\n  render() {\r\n    const isLastQuestion = false;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h6\" style={{ float: 'right' }}>{`Game PIN:${this.props.game.gameId} `}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            <Grid item md={6} xs={12}>\r\n              <div className=\"quiz-answer-chart\">\r\n                {/* <AnswerChart game={this.props.game} /> */}\r\n              </div>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <div>\r\n                {/* <Leaderboard game={this.props.game} /> */}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n          <div>\r\n            {isLastQuestion && <Button onClick={this.finalizeQuiz}>Finalize result</Button>}\r\n            {!isLastQuestion && <Button onClick={this.nextQuestion}>Next question</Button>}\r\n            <Button onClick={this.props.gameFunc.restart}>Restart quiz</Button>\r\n            <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n            <Button onClick={this.props.gameFunc.end}>End quiz</Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpotifyResultQuestion;\r\n","import {\r\n  MIN_SONGS_PLAYLIST,\r\n} from './SpotifyConstants';\r\n\r\nexport function generateQuestions(tracks) {\r\n  // jag vet inte riktigt rätt svar när jag genererar då tracks som kommer in bara är en players tracks\r\n  // så vilka som har en track i sin lista får jag kolla senare live.\r\n\r\n  // q types:\r\n  // VILKEN ÄR DEN SENAASTE LÅTEN SOM playerxx lagt till? vilken var den först?\r\n  // vem har flest låtar av artist X?\r\n  // vem har denna låt som mest spelad?\r\n  // vilket låt har person x som mest spelad?\r\n\r\n  const questions = tracks.map((t) => {\r\n    const q = {\r\n      type: 'guess_owner',\r\n      track: t,\r\n    };\r\n    return q;\r\n  });\r\n  return questions;\r\n}\r\n\r\nexport function isValidPlaylist(playlist) {\r\n  if (playlist.tracks.total < MIN_SONGS_PLAYLIST) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default[generateQuestions, isValidPlaylist];\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Typography } from '@material-ui/core';\r\nimport SpotifyResultQuestion from './SpotifyResultQuestion';\r\nimport { fire } from '../../../../base';\r\nimport * as util from '../SpotifyUtil';\r\nimport {\r\n  AUTH_EXPIRE_MS,\r\n  MISSING_ALBUM_COVER,\r\n  CLIENT_ID,\r\n  SONG_VOLUME_FADE_TIME,\r\n} from '../SpotifyConstants';\r\nimport PhaseAnswer from '../../../quiz/host/PhaseAnswer';\r\n\r\nclass Spotify extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      spotifytoken: localStorage.getItem('spotifytoken') || '',\r\n      tokentimestamp: localStorage.getItem('spotifytoken_timestamp') || '',\r\n      tracks: [],\r\n      questions: [],\r\n      usedQuestions: [],\r\n      songplaying: false,\r\n      currentQuestion: 0,\r\n    };\r\n\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n    this.playQuestion = this.playQuestion.bind(this);\r\n    this.saveGame = this.saveGame.bind(this);\r\n    this.nextQuestion = this.nextQuestion.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const { game } = this.props;\r\n    const { spotifytoken, tokentimestamp } = this.state;\r\n\r\n    if (!spotifytoken || Date.now() - tokentimestamp > AUTH_EXPIRE_MS) {\r\n      const authEndpoint = 'https://accounts.spotify.com/authorize';\r\n      // Replace with your app's client ID, redirect URI and desired scopes\r\n      const redirectUri = window.location.origin;\r\n      const scopes = [\r\n        'user-top-read',\r\n      ];\r\n      window.location = `${authEndpoint}?client_id=${CLIENT_ID}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\r\n    }\r\n    const playlists = Object.values(game.players).map(player => player.playlist);\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append('Authorization', `Bearer ${spotifytoken}`);\r\n    let playerArray = Object.values(game.players);\r\n    playerArray = playerArray.concat(playerArray).concat(playerArray);\r\n    const maxQuestionsPerList = Math.ceil((game.minigame.questions * 2) / playerArray.length);\r\n    playerArray.forEach((player, index) => {\r\n      fetch(`https://api.spotify.com/v1/playlists/${player.playlist}/tracks`, {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n      }).then(response => response.json())\r\n        .then((data) => {\r\n          console.table(data);\r\n          const tracks = data.items.map((t) => {\r\n            const track = {\r\n              added_at: t.added_at.split('T')[0],\r\n              name: t.track.name,\r\n              audio: t.track.preview_url,\r\n              artists: t.track.artists.map(a => a.name).join(', '),\r\n              img: t.track.album.images.length > 0 ? t.track.album.images[0] : MISSING_ALBUM_COVER,\r\n              playerKey: player.key,\r\n              playerName: player.name,\r\n              id: t.track.id,\r\n            };\r\n            return track;\r\n          }).filter(t => t.audio);\r\n          // ta bort för många. sortera alla på popularitet och sen sätt length till 10(?) om det är över 10\r\n          // ta bort dem frårn question inte från track för då riskerar rätt svar att bli felaktiga\r\n          // då är alla playlists åtminstone samma storlek. kan även lägga till validering på playlistSelector att det måste finnas minst 10låtar med preview_url\r\n          this.setState((state) => {\r\n            // sortera efter populäritet eller något annat? senast tillagda?\r\n            const questionTracks = tracks.sort(() => Math.random() - 0.5);\r\n            if (questionTracks.length > maxQuestionsPerList) {\r\n              questionTracks.length = maxQuestionsPerList;\r\n            }\r\n            const questions = util.generateQuestions(questionTracks);\r\n            return ({\r\n              questions: [...state.questions, ...questions].sort(() => Math.random() - 0.5),\r\n              tracks: [...state.tracks, ...tracks],\r\n            });\r\n          }, () => {\r\n            if (index + 1 === playerArray.length) {\r\n              // det är sista loopen\r\n              this.playQuestion();\r\n            }\r\n          });\r\n        });\r\n    });\r\n\r\n\r\n    // här ska jag plocka ut alla spelares playlists\r\n    // skapa upp förståelig struktur av det, plocka ut det vesentliga så som artist, låt, prewvie_url, cover_art, ownerName, id\r\n    // generera frågor och svar. börja med frågan: vem har denna låt i sin spellista? frågan innehåller: frågetext, rätta svar [], songId,\r\n    // rätt svar vet jag inte riktigt när jag genererar\r\n    // rätta svar sätts genom svar= songs.filter(x=> x.id===songId).map(song=> song.ownerName);\r\n    // alltså en array med alla ownernames som har denna sång.\r\n    // vad behöver sparas till firebase? inget? i play.js får man se vad man svarade. i host visas allas svar likt quiz.\r\n    // så länge svarsalterntiven alltid är detsamma (spelarna) så behöver jagi nte updatera firebase med information om frågorna.\r\n    //\r\n    // score likt quiz beroende på hur snabb man var. jag kan visa albumart direkt och sen namn och artitst kommer senare för att försvårar?\r\n    // livlinor?\r\n    // spara frågor och svar till state\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    // kan jag ha det här?\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  nextQuestion() {\r\n    this.setState(state => ({\r\n      currentQuestion: state.currentQuestion + 1,\r\n    }), this.playQuestion);\r\n  }\r\n\r\n  playQuestion() {\r\n    const { questions, currentQuestion, tracks } = this.state;\r\n    // testa detta med fuskgrejen igen att skapa 4 players till foreachen\r\n    // testa köra en await eller then på setstate? här eller tidigare i loopen. jag vill vara säker på att ha fått alla frågor här\r\n    // blanda frågorna random?\r\n    // https://medium.learnreact.com/setstate-takes-a-callback-1f71ad5d2296\r\n\r\n\r\n    // /kör någon metod som är \"nextquestion\"\r\n    // initquiz körs bara en gång, nextquestion körs inför varje fråga.\r\n\r\n    this.setState({ songplaying: true });\r\n    console.table(questions);\r\n    const audio = new Audio(questions[currentQuestion].track.audio);\r\n    audio.volume = 0.1;\r\n    audio.play();\r\n    audio.onended = () => {\r\n      this.nextPhase();\r\n    };\r\n    // fade in and out\r\n    audio.ontimeupdate = () => {\r\n      const left = audio.duration - audio.currentTime;\r\n      const fadeout = left <= SONG_VOLUME_FADE_TIME;\r\n      if (fadeout) {\r\n        audio.volume = left / SONG_VOLUME_FADE_TIME;\r\n      } else if (audio.volume < 1) {\r\n        audio.volume = Math.min(1, audio.volume + 0.2);\r\n      }\r\n    };\r\n    // generera questions här istället?\r\n    // kolla PhaseAnswer.js\r\n    // behöver en timer likt det fast får ligga undern ågon metod som denna?\r\n    // hårt på 30sek, inte bry sig om om folk svarat innan\r\n    // nextphase blir till level_complete\r\n    // nästafråga får jag klicka på inne i resultquestion. då ska phase sättas tillabka till gameplay och currentquiestion ska ökas på 1.\r\n    // synka currenteustion på game.minigame i firebase. om det inte fungerar får jag pdatera den genom någon extra metod som pekat till parent från resultquestion component.\r\n\r\n    // kolla på quiz hur jag löser flödet, hur vet jag när en fråga är besvarad?\r\n    // måste kolla mot gameObj\r\n    // jag behöver också ta in en timer likt quizet! det är den som styr när det är klart, när nästa fråga ska köras osv.\r\n    // någon metod körs konstant under timern, typ render för att updatera timern och rendrera ledtrådar under spelets gång?\r\n    // när timern är klar körs en \"eventhandler\" som kör nextphase\r\n    // i SpotifyResultQuestion så sätts nextphase tillbaka till gameplay för att få nästa fråga. currentquestion räknas upp vid det klicket? behöver en action in till komponenten isf\r\n    // annars kan vi räkna upp den här inne på något sätt säkert.\r\n  }\r\n\r\n  saveGame(game) {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game } = this.props;\r\n    const { currentQuestion } = this.state;\r\n    this.setState({ songplaying: false });\r\n    if (currentQuestion >= game.minigame.questions) {\r\n      game.phase = 'final_result';\r\n    } else {\r\n      game.phase = 'level_completed';\r\n    }\r\n    this.saveGame(game);\r\n  }\r\n\r\n  render() {\r\n    const { game, gameFunc } = this.props;\r\n    const {\r\n      tracks, questions, currentQuestion, songplaying,\r\n    } = this.state;\r\n    if (game.phase === 'gameplay' && !songplaying) {\r\n      return (\r\n        <div>loading questions</div>\r\n      );\r\n    }\r\n    const question = questions[currentQuestion];\r\n\r\n    if (game.phase === 'level_completed') {\r\n      // game behöver vara uppdaterat med svar från spelarna och den senaste frågan?\r\n      // i firebase kommer man bara se player.answers och inte quiz.questions. men vi behöver synka currentquestionindex kanske?\r\n      // det är i resultqestion som jag rättar svaren så jag behöver ju hela tracks där och currentquestion\r\n      return (\r\n        <SpotifyResultQuestion game={game} gameFunc={gameFunc} tracks={tracks} question={question} nextQuestion={this.nextQuestion} />\r\n      );\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n\r\n        {question.type === 'guess_owner' && (\r\n          <div>\r\n            <Typography>Vems låt är detta?</Typography>\r\n            <img src={question.track.img.url} alt=\"cover art\" />\r\n\r\n            <Typography>{question.track.name}</Typography>\r\n            <Typography>{question.track.artists}</Typography>\r\n\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSpotify.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default Spotify;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PhaseSetup from './PhaseSetup';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport Snake from '../snake/Snake';\r\nimport Tetris from '../tetris/Tetris';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseEnd from './PhaseEnd';\r\nimport SnakeStarting from '../snake/SnakeStarting';\r\nimport Golf from '../golf/Golf';\r\nimport GolfStarting from '../golf/GolfStarting';\r\nimport SnakeSetup from '../snake/SnakeSetup';\r\nimport GolfSetup from '../golf/GolfSetup';\r\nimport SpotifySetup from '../spotify/host/SpotifySetup';\r\nimport SpotifyConnection from '../spotify/host/SpotifyConnection';\r\nimport SpotifyStarting from '../spotify/host/SpotifyStarting';\r\nimport Spotify from '../spotify/host/Spotify';\r\n\r\nclass Minigame extends PureComponent {\r\n  render() {\r\n    const { game, gameFunc } = this.props;\r\n    switch (game.gametype) {\r\n      case 'snake':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <SnakeSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <SnakeStarting game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'gameplay' && <Snake game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      case 'tetris':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <PhaseSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'gameplay' && <Tetris game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      case 'golf':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <GolfSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <GolfStarting game={game} gameFunc={gameFunc} />}\r\n            {(game.phase === 'gameplay' || game.phase === 'level_completed') && <Golf game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      case 'spotify':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <SpotifySetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <SpotifyConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <SpotifyStarting game={game} gameFunc={gameFunc} />}\r\n            {(game.phase === 'gameplay' || game.phase === 'level_completed') && <Spotify game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      default:\r\n        return (null);\r\n    }\r\n  }\r\n}\r\nMinigame.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default Minigame;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../base';\r\nimport Quiz from '../quiz/host/Quiz';\r\nimport Minigame from '../minigame/host/Minigame';\r\n\r\nclass Host extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n      gameId: localStorage.getItem('RecentGameId') || '',\r\n      password: '',\r\n\r\n    };\r\n    this.updateGame = this.updateGame.bind(this);\r\n    this.fetchGame = this.fetchGame.bind(this);\r\n    this.initGameListiner = this.initGameListiner.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.quitGame = this.quitGame.bind(this);\r\n    this.endGame = this.endGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    updateGame(gameupdate) {\r\n      const { showSnackbar } = this.props;\r\n      const { game } = this.state;\r\n      // se till att inte updatera game.players...\r\n      // game som kommer in här ska bara innehålla det som ska uppdateras.\r\n      // updateras med gamesettings, phasechanges, currenquestionId etc\r\n      fire.database().ref(`games/${game.key}`).update(gameupdate, (error) => {\r\n        if (error) {\r\n          const snack = {\r\n            variant: 'error',\r\n            message: 'Unexpected internal error',\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n    }\r\n\r\n    restartGame() {\r\n      const game = {};\r\n      game.players = [];\r\n      game.phase = 'setup';\r\n      this.updateGame(game);\r\n    }\r\n\r\n    quitGame() {\r\n      const { toggleHeader } = this.props;\r\n      this.updateGame({ phase: null });\r\n      toggleHeader(true);\r\n    }\r\n\r\n    endGame() {\r\n      this.updateGame({ phase: 'final_result' });\r\n    }\r\n\r\n\r\n    fetchGame() {\r\n      const { gameId, password } = this.state;\r\n      const { showSnackbar, toggleHeader } = this.props;\r\n      const that = this;\r\n      fire.database().ref('games').orderByChild('gameId').equalTo(gameId)\r\n        .once('value', (snapshot) => {\r\n          if (snapshot.val()) {\r\n            let game;\r\n            snapshot.forEach((child) => {\r\n              game = child.val();\r\n            });\r\n            if (game.password === password) {\r\n              that.initGameListiner(game.key);\r\n              toggleHeader();\r\n            } else {\r\n              const snack = {\r\n                variant: 'error',\r\n                message: 'Could not find matching game',\r\n              };\r\n              showSnackbar(snack);\r\n            }\r\n          } else {\r\n            const snack = {\r\n              variant: 'info',\r\n              message: 'No game found',\r\n            };\r\n            showSnackbar(snack);\r\n          }\r\n        });\r\n    }\r\n\r\n    initGameListiner(gameKey) {\r\n      const gameRef = fire.database().ref(`games/${gameKey}`);\r\n      const that = this;\r\n      gameRef.on('value', (snapshot) => {\r\n        const game = snapshot.val();\r\n        if (!game.phase) {\r\n          game.phase = 'setup';\r\n        }\r\n        if (game) {\r\n          // kan blir problem med asynch setstate?\r\n          that.setState({\r\n            game,\r\n          });\r\n        } else {\r\n          that.setState({\r\n            game: '',\r\n          });\r\n        }\r\n      });\r\n      // koppla game till gameKey\r\n      // lägg till en likadan listener i Play.\r\n      // hosts gamelistiner ska lyssna på alla ändringar. Play ska inte lyssna på andra players ändringar om det går. något att optimera i framtiden.\r\n      // ett alt är att lyfta ut Players till en egen root? kan lägga phase och currentq i en game.state och sen är det allt som Player lyssnar på?\r\n      // men play behöver också behöva synca sin egna player.\r\n    }\r\n\r\n    render() {\r\n      // behöver bara updatera phase till firebase när det är phases som play bryr sig om. t.ex. inte setup då play bara kan connecta till games som är i phase==connection\r\n      // lägg till två rutor här för att söka fram ett game med hjälp av gameid och pass.\r\n\r\n      // strukturera filerna för host och play. kommentera i varje fil vad syftet med den är. vad den ska updatera i game etc.\r\n      // HostSetup updates settings and sets phase to connection on action\r\n      // connection shows players and sets phase to starting on action\r\n      // starting shows a countdown sets phase to awating_question and currentQuestion to 0(or some id) after countdown\r\n      // awaiting_question shows countdown and sets phase to show question after countdown\r\n      // show_question shows question and sets phase to answer after countdown\r\n      // answer shows q&a, countdown, nrPlayersAnswered, sets phase to result_question after countdown\r\n      // result_question shows stats about the answers, correct answer, hightscorelist etc, sets phase to awaiting_question and currentQuestion++ on action.\r\n      // result_question sets phase to final_result if questions are all done.\r\n      // final_result shows result of all players. top 3 and/or all. sets phase to end on action\r\n      // end shows options for replay, export result, etc.\r\n      const { gameId, password, game } = this.state;\r\n      const { showSnackbar, toggleHeader } = this.props;\r\n      const gameFunctions = {\r\n        update: this.updateGame,\r\n        restart: this.restartGame,\r\n        end: this.endGame,\r\n        quit: this.quitGame,\r\n      };\r\n      if (!game.phase) {\r\n        return (\r\n          <div className=\"page-container host-page\">\r\n            <FormControl>\r\n              <TextField\r\n                label=\"Game PIN\"\r\n                name=\"Game ID\"\r\n                value={gameId}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('gameId')}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <TextField\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                margin=\"normal\"\r\n                value={password}\r\n                onChange={this.handleChange('password')}\r\n              />\r\n            </FormControl>\r\n            <Button onClick={this.fetchGame} variant=\"contained\">Fetch</Button>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className=\"page-container host-page\">\r\n          {game.gametype === 'quiz' && <Quiz game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'snake' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'tetris' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'golf' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'spotify' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n\r\n        </div>\r\n      );\r\n    }\r\n}\r\nHost.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  toggleHeader: PropTypes.func.isRequired,\r\n};\r\nexport default Host;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseConnection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            authId: '',\r\n            playerCreated: false,\r\n        };\r\n        this.createPlayer = this.createPlayer.bind(this);\r\n        this.generateName = this.generateName.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        //problem vid restart så skapas en ny användare. test spara playerkey till localhost och testa använda den keyn om den passar\r\n        if (!this.props.playerKey && this.props.game.quiz.nameGenerator) {\r\n            this.props.addPlayer(this.generatePlayer());\r\n        }\r\n    }\r\n    createPlayer() {\r\n        //validera så att namnet inte är taget.\r\n        let player = {\r\n            name: this.state.name,\r\n            score: 0,\r\n\r\n        }\r\n        this.props.addPlayer(player);\r\n        this.setState({ playerCreated: true });\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    generatePlayer() {\r\n        //skriv upp en lista med namn. kanske använda två arrayer en med adjekktiv och en med substantiv \"crazy tomato\" etc. \r\n        //använd generateName(this.game.players) den randomar ett namn, kollar om namnet redan finns och randomar igen isåfall.\r\n        //randomar xx antal gånger sen lägger den till ett extra adjektiv\r\n        let name = this.generateName();\r\n        let player = {\r\n            name: name,\r\n            score: 0,\r\n        }\r\n        return player;\r\n    }\r\n    generateName() {\r\n        let adjectives = [\"adamant\", \"adroit\", \"amatory\", \"animistic\", \"antic\", \"arcadian\", \"baleful\", \"bellicose\", \"bilious\", \"boorish\", \"calamitous\", \"caustic\", \"cerulean\", \"comely\", \"concomitant\", \"contumacious\", \"corpulent\", \"crapulous\", \"defamatory\", \"didactic\", \"dilatory\", \"dowdy\", \"efficacious\", \"effulgent\", \"egregious\", \"endemic\", \"equanimous\", \"execrable\", \"fastidious\", \"feckless\", \"fecund\", \"friable\", \"fulsome\", \"garrulous\", \"guileless\", \"gustatory\", \"heuristic\", \"histrionic\", \"hubristic\", \"incendiary\", \"insidious\", \"insolent\", \"intransigent\", \"inveterate\", \"invidious\", \"irksome\", \"jejune\", \"jocular\", \"judicious\", \"lachrymose\", \"limpid\", \"loquacious\", \"luminous\", \"mannered\", \"mendacious\", \"meretricious\", \"minatory\", \"mordant\", \"munificent\", \"nefarious\", \"noxious\", \"obtuse\", \"parsimonious\", \"pendulous\", \"pernicious\", \"pervasive\", \"petulant\", \"platitudinous\", \"precipitate\", \"propitious\", \"puckish\", \"querulous\", \"quiescent\", \"rebarbative\", \"recalcitant\", \"redolent\", \"rhadamanthine\", \"risible\", \"ruminative\", \"sagacious\", \"salubrious\", \"sartorial\", \"sclerotic\", \"serpentine\", \"spasmodic\", \"strident\", \"taciturn\", \"tenacious\", \"tremulous\", \"trenchant\", \"turbulent\", \"turgid\", \"ubiquitous\", \"uxorious\", \"verdant\", \"voluble\", \"voracious\", \"wheedling\", \"withering\", \"zealous\"];\r\n        let nouns = [\"ninja\", \"chair\", \"pancake\", \"statue\", \"unicorn\", \"rainbows\", \"laser\", \"senor\", \"bunny\", \"captain\", \"nibblets\", \"cupcake\", \"carrot\", \"gnomes\", \"glitter\", \"potato\", \"salad\", \"toejam\", \"curtains\", \"beets\", \"toilet\", \"exorcism\", \"stick figures\", \"mermaid eggs\", \"sea barnacles\", \"dragons\", \"jellybeans\", \"snakes\", \"dolls\", \"bushes\", \"cookies\", \"apples\", \"ice cream\", \"ukulele\", \"kazoo\", \"banjo\", \"opera singer\", \"circus\", \"trampoline\", \"carousel\", \"carnival\", \"locomotive\", \"hot air balloon\", \"praying mantis\", \"animator\", \"artisan\", \"artist\", \"colorist\", \"inker\", \"coppersmith\", \"director\", \"designer\", \"flatter\", \"stylist\", \"leadman\", \"limner\", \"make-up artist\", \"model\", \"musician\", \"penciller\", \"producer\", \"scenographer\", \"set decorator\", \"silversmith\", \"teacher\", \"auto mechanic\", \"beader\", \"bobbin boy\", \"clerk of the chapel\", \"filling station attendant\", \"foreman\", \"maintenance engineering\", \"mechanic\", \"miller\", \"moldmaker\", \"panel beater\", \"patternmaker\", \"plant operator\", \"plumber\", \"sawfiler\", \"shop foreman\", \"soaper\", \"stationary engineer\", \"wheelwright\", \"woodworkers\"];\r\n        let finalName = \"\";\r\n        let currentNames = [];\r\n        if (this.props.game.players) {\r\n            currentNames = Object.values(this.props.game.players).map(a => a.name);\r\n        }\r\n        for (let i = 0; i < 20; i++) {\r\n            let name = \"\";\r\n            if (i > 10) {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            } else {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            }\r\n            if (currentNames.indexOf(name) > -1) {\r\n                continue;\r\n            } else {\r\n                finalName = name;\r\n                break;\r\n            }\r\n        }\r\n        return finalName;\r\n\r\n    }\r\n\r\n    render() {\r\n        let players = this.props.game.players;\r\n        let playerName = '';\r\n        if (players && this.props.playerKey) {\r\n            playerName = players[this.props.playerKey].name;\r\n        }\r\n        let playersInLobby = [];\r\n        if (players) {\r\n            playersInLobby = Object.values(players);\r\n        }\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    {playerName &&\r\n                        <div >\r\n                            <div className=\"quiz-top-section\">\r\n                                <Typography variant=\"h5\">Welcome <span className=\"dynamic-text\">{playerName}</span>! </Typography>\r\n\r\n                            </div>\r\n                            <div className='quiz-middle-section'>\r\n                                <Typography paragraph variant=\"subtitle1\">Players in lobby</Typography>\r\n                                <Grid container>\r\n                                    {playersInLobby.map((player, index) =>\r\n                                        <Grid key={player.key} item md={3} xs={6}>\r\n                                            <Typography paragraph variant=\"body1\">{player.name}</Typography>\r\n                                        </Grid>)}\r\n                                </Grid>\r\n\r\n                            </div>\r\n                            <div className=\"quiz-bottom-section\">\r\n                                <Typography paragraph variant=\"subtitle1\">Waiting for the host to start the game</Typography>\r\n\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {!playerName &&\r\n                        <div>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('name')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    {playerName &&\r\n                        <div >\r\n                            <div className=\"quiz-top-section\">\r\n                            </div>\r\n                            <div className='quiz-middle-section'>\r\n                                <Typography variant=\"h5\">Welcome <span className=\"dynamic-text\">{playerName}</span>!</Typography>\r\n                                <Typography variant=\"subtitle1\"> Watch the screen, your name should show.</Typography>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"quiz-bottom-section\">\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {!playerName &&\r\n                        <div>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('name')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseConnection;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        <Typography variant=\"h5\">Starting quiz</Typography>\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <CountdownAnimation speed=\"slow\" />\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Starting quiz...</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        <Typography variant=\"h5\">Loading question</Typography>\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <CountdownAnimation speed=\"slow\" />\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the screen.</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">{this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the question on the screen!</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseShowQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\n\r\nclass PhaseAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: 0,\r\n      question: {},\r\n      hasAnswered: false,\r\n      selectedAnswer: '',\r\n    };\r\n    this.answerQuestion = this.answerQuestion.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question, startTime: Date.now() });\r\n  }\r\n\r\n    answerQuestion = (answer) => {\r\n      this.setState({ selectedAnswer: answer, hasAnswered: true });\r\n      const answerTime = Date.now() - this.state.startTime;\r\n      const correct = this.state.question.correctAnswers.indexOf(answer) > -1;\r\n      let score = 0;\r\n      // använd object speed={easy: 100, medium: 200, hard:300} score += speed[question.difficulty]\r\n      if (correct) {\r\n        switch (this.state.question.difficulty) {\r\n          case 'easy':\r\n            score += 100;\r\n            break;\r\n          case 'medium':\r\n            score += 200;\r\n            break;\r\n          case 'hard':\r\n            score += 300;\r\n            break;\r\n          case undefined:\r\n            score += 200;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        if (this.props.game.quiz.timelimit && this.state.question.timelimit) {\r\n          // let timeRemaining = this.state.question.timelimit - answerTime;\r\n          const timeFactorUsed = answerTime / (this.state.question.timelimit * 1000);\r\n          const timeBonus = Math.floor((score / Math.max(0.2, timeFactorUsed)) / 10);\r\n          score += timeBonus;\r\n        }\r\n      }\r\n      const playerAnswer = {\r\n        answer,\r\n        score,\r\n        answerTime,\r\n        questionId: this.state.question.id,\r\n      };\r\n      this.props.saveAnswer(playerAnswer);\r\n    };\r\n\r\n    render() {\r\n        let answers = [];\r\n        if (this.props.game) {\r\n            answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n        }\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            if (this.state.hasAnswered) {\r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                            <Typography paragraph variant=\"h5\">\r\n                                {this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className='quiz-middle-section'>\r\n                            <Typography variant=\"body1\">\r\n                                You answered: <span className=\"dynamic-text\">{this.state.selectedAnswer}</span> \r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-bottom-section\">\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } \r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                            <Typography variant=\"h5\">\r\n                                {this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-middle-and-bottom-section\">\r\n                            <Grid container spacing={8} className=\"full-height\">\r\n                                {answers.map((answer, index) =>\r\n                                    <Grid key={index} item xs={6}>\r\n                                        <AnswerOption answer={answer} index={index} answerQuestion={this.answerQuestion} remoteMode={true} />\r\n                                    </Grid>)}\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            \r\n        } \r\n            if (this.state.hasAnswered) {\r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                        </div>\r\n                        <div className='quiz-middle-section'>\r\n                            <Typography variant=\"body1\">\r\n                                You answered: <span className=\"dynamic-text\">{this.state.selectedAnswer}</span>\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-bottom-section\">\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } \r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-complete-section\">\r\n                            <Grid container spacing={8} className=\"full-height\">\r\n                                {answers.map((answer, index) =>\r\n                                    <Grid key={index} item xs={6}>\r\n                                        <AnswerOption answer={answer} index={index} answerQuestion={this.answerQuestion} />\r\n                                    </Grid>)}\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            \r\n        \r\n    }\r\n}\r\nexport default PhaseAnswer;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Podium from '../Podium';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: null\r\n        };\r\n        this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n    }\r\n    handleChange = panel => (event, expanded) => {\r\n        this.setState({\r\n            expanded: expanded ? panel : false,\r\n        });\r\n    };\r\n    getPlayerAnswerData() {\r\n        let answerDataList = [];\r\n\r\n        let currentPlayer = this.props.game.players[this.props.playerKey];\r\n\r\n        for (let i = 0; i < this.props.game.quiz.questions.length; i++) {\r\n            let answerData = {\r\n                question: {},\r\n                score: 0,\r\n                time: 0,\r\n                answer: '',\r\n            };\r\n            let question = this.props.game.quiz.questions[i];\r\n\r\n            if (currentPlayer.answers[question.id]) {\r\n                answerData.score = currentPlayer.answers[question.id].score;\r\n                answerData.answer = currentPlayer.answers[question.id].answer;\r\n                answerData.time = currentPlayer.answers[question.id].answerTime;\r\n            } else {\r\n                answerData.score = 0;\r\n                answerData.answer = \"no answer\";\r\n                answerData.time = 0;\r\n            }\r\n            answerData.question = question;\r\n\r\n            answerDataList.push(answerData);\r\n        }\r\n        return answerDataList;\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            let playerData = this.getPlayerAnswerData();\r\n            return (<div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                    <Typography variant=\"h5\">Quiz finished</Typography>\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"subtitle1\">You finished\r\n                        <span className=\"dynamic-text\">2nd</span> with a score of  <span className=\"dynamic-text\">560</span>\r\n                    </Typography>\r\n                    <ExpansionPanel>\r\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography >Final scoretable</Typography>\r\n                        </ExpansionPanelSummary>\r\n                        <ExpansionPanelDetails>\r\n                            <div>\r\n                                <Podium game={this.props.game} />\r\n                            </div>\r\n                        </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n                    <ExpansionPanel>\r\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Your own data</Typography>\r\n                        </ExpansionPanelSummary>\r\n                        <ExpansionPanelDetails style={{display:'block'}}>\r\n                            {playerData.map((data, index) =>\r\n                                <ExpansionPanel key={data.question.id} expanded={this.state.expanded === data.question.id} onChange={this.handleChange(data.question.id)}>\r\n                                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                                        <Typography variant=\"subtitle1\">{data.question.question}</Typography>\r\n                                        <Typography variant=\"subtitle2\">{data.score}pt</Typography>\r\n                                    </ExpansionPanelSummary>\r\n                                    <ExpansionPanelDetails>\r\n                                        <Typography>Your answer: {data.answer}</Typography>\r\n                                        <Typography>Your time: {data.time/1000}sec</Typography>\r\n\r\n                                        <Typography variant=\"subtitle1\" align=\"left\">Correct answers</Typography>\r\n                                        <List>\r\n                                            {data.question.correctAnswers.map((answer, index) =>\r\n                                                <ListItem key={answer}>\r\n                                                    <ListItemText\r\n                                                        primary={answer}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            )}\r\n                                        </List>\r\n                                        <Typography variant=\"subtitle1\" align=\"left\">Wrong answers</Typography>\r\n                                        <List>\r\n                                            {data.question.wrongAnswers.map((answer, index) =>\r\n                                                <ListItem key={answer}>\r\n                                                    <ListItemText\r\n                                                        primary={answer}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            )}\r\n                                        </List>\r\n                                    </ExpansionPanelDetails>\r\n                                </ExpansionPanel>\r\n                            )}\r\n                        </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the screen.</Typography>\r\n\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport AnswerOption from '../AnswerOption';\r\nimport AnswerChart from '../AnswerChart';\r\nimport Leaderboard from '../Leaderboard';\r\n\r\nPlayerQuestionResult.propTypes = {\r\n  playerData: PropTypes.object.isRequired,\r\n};\r\nfunction PlayerQuestionResult(props) {\r\n  const { playerData } = props;\r\n  const wrongAnswer = playerData.hasAnswered && playerData.currentQuestionScore === 0;\r\n  const correctAnswer = playerData.currentQuestionScore > 0;\r\n  return (\r\n    <div>\r\n      {correctAnswer > 0 && <Typography variant=\"h5\">Correct answer!</Typography>}\r\n      {wrongAnswer && <Typography variant=\"h5\">Wrong answer!</Typography>}\r\n      {!playerData.hasAnswered && <Typography variant=\"h5\">You did not answer the question</Typography>}\r\n      {playerData.hasAnswered && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <div>\r\n            <span>Score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.currentQuestionScore}</span>\r\n          </div>\r\n          <div>\r\n            <span>Time: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.answerTime}</span>\r\n          </div>\r\n          <div>\r\n            <span>Total score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.totalScore}</span>\r\n          </div>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition !== playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Old position:</span>\r\n          <span>\r\n            {' '}\r\n            {playerData.oldLeaderboardPosition}\r\n          </span>\r\n          <span>New position: </span>\r\n          <span>{playerData.newLeaderboardPosition}</span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition === playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Position: </span>\r\n          <span>\r\n            {' '}\r\n            {playerData.newLeaderboardPosition}\r\n          </span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nclass PhaseResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n  }\r\n\r\n  getPlayerAnswerData() {\r\n    const { game, playerKey } = this.props;\r\n    const answerData = {\r\n      totalScore: 0,\r\n      currentQuestionScore: 0,\r\n      newLeaderboardPosition: 1,\r\n      oldLeaderboardPosition: 1,\r\n      answerTime: 0,\r\n      hasAnswered: false,\r\n    };\r\n    const currentQuestion = game.quiz.questions[game.quiz.currentQuestion];\r\n    const currentPlayer = game.players[playerKey];\r\n    // answers kan vara undefined. refactorera hela klassen\r\n    // den här läsningen håller inte. kan bli fel värden som man missar att svara på en fråga.\r\n    // gör om till reduce och se om det ska vara iteration på answers eller på quiz.questions kanske?\r\n\r\n    for (let j = 0; j < game.quiz.questions.length; j++) {\r\n      const question = game.quiz.questions[j];\r\n      const answer = currentPlayer.answers ? currentPlayer.answers[question.id] : false;\r\n      if (answer) {\r\n        if (answer.questionId === currentQuestion.id) {\r\n          answerData.hasAnswered = true;\r\n          answerData.currentQuestionScore = answer.score;\r\n          answerData.answerTime = answer.answerTime;\r\n        }\r\n        answerData.totalScore += answer.score;\r\n      }\r\n    }\r\n\r\n    const playerKeys = game.players ? Object.keys(game.players) : [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      if (playerKeys[i] === currentPlayer.key) {\r\n        continue;\r\n      }\r\n      const opponent = game.players[playerKeys[i]];\r\n      let totalScore = 0;\r\n      let currentQuestionScore = 0;\r\n      for (let j = 0; j < game.quiz.questions.length; j++) {\r\n        const question = game.quiz.questions[j];\r\n        const answer = opponent.answers ? opponent.answers[question.id] : false;\r\n        if (answer) {\r\n          if (answer.questionId === currentQuestion.id) {\r\n            currentQuestionScore = answer.score;\r\n          }\r\n          totalScore += answer.score;\r\n        }\r\n      }\r\n      if (totalScore > answerData.totalScore) {\r\n        answerData.newLeaderboardPosition += 1;\r\n      }\r\n      if (totalScore - currentQuestionScore > answerData.totalScore - answerData.currentQuestionScore) {\r\n        answerData.oldLeaderboardPosition += 1;\r\n      }\r\n    }\r\n\r\n    return answerData;\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    const playerData = this.getPlayerAnswerData();\r\n\r\n    if (game.quiz.remoteMode) {\r\n      let currentQuestion;\r\n      if (game) {\r\n        currentQuestion = game.quiz.questions[game.quiz.currentQuestion];\r\n      }\r\n      const { answers } = currentQuestion;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <div className=\"quiz-top-section\">\r\n            <PlayerQuestionResult playerData={playerData} />\r\n          </div>\r\n          <div className=\"quiz-middle-section\">\r\n            <Grid container>\r\n              <Grid item md={6} xs={12}>\r\n                <div className=\"quiz-answer-chart\">\r\n\r\n                  <AnswerChart game={game} />\r\n                </div>\r\n              </Grid>\r\n              <Grid item md={6} xs={12}>\r\n                <div>\r\n                  <Leaderboard game={game} />\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n          <div className=\"quiz-bottom-section\">\r\n            <Grid container>\r\n              {answers.map((answer, index) => (\r\n                <Grid key={answer} item xs={6}>\r\n                  <AnswerOption answer={answer} index={index} />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <PlayerQuestionResult playerData={playerData} />\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Typography variant=\"subtitle1\">Look at the screen to se overall player results</Typography>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseResultQuestion.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string.isRequired,\r\n};\r\nexport default PhaseResultQuestion;\r\n","import React, { Component } from 'react';\r\nimport { fire } from '../../../base';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n        this.saveAnswer = this.saveAnswer.bind(this);\r\n    }\r\n\r\n    saveAnswer(answer) {\r\n        let that = this;\r\n        let currentQuestionId = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id;\r\n        fire.database().ref('/games/' + that.props.game.key + '/players/' + this.props.playerKey + '/answers/' + currentQuestionId).set(answer, function (error) {\r\n            if (error) {\r\n                let snack = {\r\n                    variant: \"error\",\r\n                    message: \"Unexpected internal error\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n            else {\r\n                let snack = {\r\n                    variant: \"success\",\r\n                    message: \"Successfully updated player!\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let lastPhase = this.props.game.phase === \"final_result\" || this.props.game.phase === \"end\";\r\n        return (\r\n            <div className=\"play-container\">\r\n                {this.props.game.phase === \"connection\" && <PhaseConnection game={this.props.game} addPlayer={this.props.createPlayer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"starting\" && <PhaseStarting game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"awaiting_question\" && <PhaseAwaitingQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"show_question\" && <PhaseShowQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"answer\" && <PhaseAnswer game={this.props.game} saveAnswer={this.saveAnswer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"result_question\" && <PhaseResultQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n                {lastPhase  && <PhaseFinalResult game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                PlayEnd\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component, Fragment } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport ReactSpeedometer from 'react-d3-speedometer';\r\nimport * as util from './GolfUtil';\r\nimport { fire } from '../../../base';\r\nimport './golf.css';\r\nimport {\r\n  MAX_POWER,\r\n  MIN_POWER,\r\n  CLUBS,\r\n  BALL_RADIUS,\r\n  AIR_COLOR,\r\n  GRASS_COLOR,\r\n  BALL_RADIUS_CONTROLLER,\r\n} from './GolfConstants';\r\nimport driverIcon from './img/driverIcon.svg';\r\nimport ironIcon from './img/ironIcon.svg';\r\nimport putterIcon from './img/putterIcon.svg';\r\nimport golfbagIcon from './img/golfbag.svg';\r\nimport fingerprintIcon from './img/fingerprint.svg';\r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    height: '100vh',\r\n    width: '100vw',\r\n  },\r\n  canvas: {\r\n  },\r\n  header: {\r\n    height: 80,\r\n  },\r\n  footer: {\r\n    height: 180,\r\n    marginTop: '-4px',\r\n  },\r\n  clubwrapper: {\r\n    display: 'flex',\r\n    marginTop: '-120px',\r\n    position: 'absolute',\r\n    alignItems: 'flex-end',\r\n  },\r\n  menuitemicon: {\r\n    height: '100%',\r\n    paddingRight: 10,\r\n  },\r\n});\r\n\r\nlet canvas;\r\nlet ctx;\r\n\r\nfunction drawBall(x, y, fill, stroke, playerState) {\r\n  ctx.lineWidth = 1;\r\n  ctx.fillStyle = fill;\r\n  ctx.strokeStyle = stroke;\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS_CONTROLLER, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n  ctx.closePath();\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS_CONTROLLER - ctx.lineWidth / 2, 0, 2 * Math.PI);\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n}\r\n\r\nfunction drawSwing(swingData) {\r\n  const len = swingData.length;\r\n  // test om den här. det ska vara hela swingen efter att den är klar som ritas.\r\n  // kolla på drawGround etc. där behöver jag inte loopa beginpath och stroke etc. utan jag har istöället en start pos\r\n\r\n  // behöver hålla ritningen inom canvasen. så hitta de största och minsta värdena på varje axel och räkna om alla punkter baserat på det\r\n  // så en liten eller stor swing blir lika\r\n\r\n  // skapa en förutbestämd bana och använd bara x från swingen?\r\n  const prevSwing = { y: canvas.height / 2 - (BALL_RADIUS_CONTROLLER * 2), x: canvas.width / 2 };\r\n  for (let i = 0; i < len; i++) {\r\n    const newY = prevSwing.y + (Math.round(swingData[i].z));\r\n    const newX = prevSwing.x + (Math.round(swingData[i].x));\r\n    ctx.beginPath();\r\n    ctx.moveTo(prevSwing.x, prevSwing.y);\r\n    ctx.lineTo(newX, newY);\r\n    ctx.stroke();\r\n    prevSwing.y = newY;\r\n    prevSwing.x = newX;\r\n  }\r\n}\r\nfunction drawEnvironment(x, y, groundColor, stroke) {\r\n  ctx.fillStyle = GRASS_COLOR;\r\n  ctx.fillRect(0, y - BALL_RADIUS_CONTROLLER, x, BALL_RADIUS_CONTROLLER);\r\n  // groundcolor längst ner\r\n  // GRASS_COLOR är stroke\r\n  // WITH på\r\n  // AIR_COLOR är överdelen\r\n}\r\nfunction drawStrokes(x, y, strokes) {\r\n  ctx.font = '28px roboto';\r\n  ctx.fillStyle = '#000000';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillText(`Slag: ${strokes}`, x, y);\r\n}\r\n\r\nfunction drawDistance(x, y, distance) {\r\n  ctx.font = '24px roboto';\r\n  ctx.fillStyle = '#000000';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillText(`Distance: ${distance} yards`, x, y);\r\n}\r\nfunction drawScoreText(x, y, player, strokes) {\r\n  ctx.font = '22px roboto';\r\n  ctx.fillStyle = '#000000';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillText(`You scored with ${strokes} strokes in ${player.scoreTime} seconds`, x, y);\r\n}\r\nfunction clearCanvas() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\nclass GolfController extends Component {\r\n  static getDerivedStateFromProps(props, currentState) {\r\n    if (currentState.round !== props.game.minigame.round) {\r\n      return {\r\n        round: props.game.minigame.round,\r\n        strokes: 0,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // sätt det här till rätt höjd. det ska vara windowheight - header - footer\r\n    const canvasHeight = Math.floor(window.innerHeight - 180);\r\n    const canvasWidth = Math.floor(window.innerWidth);\r\n    const clubIcons = {\r\n      wood: driverIcon,\r\n      iron: ironIcon,\r\n      putt: putterIcon,\r\n    };\r\n    this.state = {\r\n      highestAcceleration: 0,\r\n      isSwinging: false,\r\n      swingData: [],\r\n      clubIndex: 0,\r\n      round: 1,\r\n      canvasHeight,\r\n      strokes: 0,\r\n      canvasWidth,\r\n      anchorEl: null,\r\n      clubIcons,\r\n    };\r\n    this.renderFrame = this.renderFrame.bind(this);\r\n    this.saveSwing = this.saveSwing.bind(this);\r\n    this.testSwing = this.testSwing.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    canvas = document.getElementById('swingcanvas');\r\n    ctx = canvas.getContext('2d');\r\n    ctx.translate(0.5, 0.5);\r\n    const that = this;\r\n    canvas.addEventListener('touchstart', (e) => {\r\n      const event = e || window.event;\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      that.setState(() => {\r\n        const highestAcceleration = 0;\r\n        const swingData = [];\r\n        const isSwinging = true;\r\n        return { highestAcceleration, swingData, isSwinging };\r\n      });\r\n      // this.renderFrame();\r\n\r\n      // e.preventDefault();\r\n    }, false);\r\n\r\n    canvas.addEventListener('touchend', (e) => {\r\n      const event = e || window.event;\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      const { highestAcceleration, clubIndex } = that.state;\r\n      that.setState(() => {\r\n        const isSwinging = false;\r\n        return { isSwinging };\r\n      });\r\n      this.saveSwing(highestAcceleration, clubIndex);\r\n      // this.renderFrame();\r\n      // e.preventDefault();\r\n    }, false);\r\n\r\n\r\n    window.addEventListener('devicemotion', (e) => {\r\n      const event = e || window.event;\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      const {\r\n        isSwinging, swingData, highestAcceleration, clubIndex,\r\n      } = that.state;\r\n      if (isSwinging) {\r\n        const { x, y, z } = event.acceleration;\r\n        swingData.push({ x: Math.round(x * 2), y: Math.round(y * 2), z: Math.round(z * 2) });\r\n        // this.drawSwing([{ x: Math.round(x * 2), y: Math.round(y * 2), z: Math.round(z * 2) }]);\r\n\r\n        // hur är detta legit? både x och z kan ju vara minusvärden? jag borde lägga om dem till positiva?\r\n        // eller kan jag använda detta för att bara mäta nersvingen?? genom att bara läsa av negative eller positiva värden\r\n        // vilekt som nu är neråt\r\n        // måste göra flera tester, ska y inte tas med?\r\n        // koppla i telefonen och debuga\r\n        const xpower = Math.abs(x);\r\n        const zpower = Math.abs(z);\r\n\r\n        const power = Math.floor(xpower + zpower);\r\n        // const power2 = Math.floor(Math.abs(y) + Math.abs(z));\r\n        // const power3 = Math.floor(Math.abs(x) + Math.abs(y));\r\n\r\n        // && util.validateSwingMovement(event.acceleration, clubIndex)\r\n        if (power > highestAcceleration) {\r\n          that.setState(() => ({ highestAcceleration: power, swingData }));\r\n        } else {\r\n          that.setState({ swingData });\r\n        }\r\n      }\r\n    }, true);\r\n    this.renderFrame();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const {\r\n      swingData, isSwinging, strokes, anchorEl, clubIndex,\r\n    } = this.state;\r\n    if (nextState.isSwinging !== isSwinging) {\r\n      return true;\r\n    }\r\n    // if (nextState.swingData !== swingData) {\r\n    //   return false;\r\n    // }\r\n\r\n    if (nextState.strokes !== strokes) {\r\n      return true;\r\n    }\r\n    if (nextState.anchorEl !== anchorEl) {\r\n      return true;\r\n    }\r\n    if (nextState.clubIndex !== clubIndex) {\r\n      return true;\r\n    }\r\n    const { game, playerKey } = this.props;\r\n    if (nextProps.game.phase !== game.phase) {\r\n      return true;\r\n    }\r\n\r\n    const currentPlayer = game.players[playerKey];\r\n    const nextCurrentPlayer = nextProps.game.players[playerKey];\r\n    if (currentPlayer.state !== nextCurrentPlayer.state) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  handleClick = (event) => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n      anchorEl: null,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  testSwing() {\r\n    const acceleration = Math.floor(Math.random() * 100) + 10;\r\n    this.saveSwing(acceleration, 2, true);\r\n  }\r\n\r\n  saveSwing(acceleration, clubIndex, test) {\r\n    const { playerKey, game } = this.props;\r\n    const { swingData } = this.state;\r\n    const currentPlayer = game.players[playerKey];\r\n    if (currentPlayer.state !== 'STILL') {\r\n      alert('ball is not still');\r\n      return;\r\n    }\r\n    if (game.phase !== 'gameplay') {\r\n      alert('game is not playing');\r\n      return;\r\n    }\r\n\r\n    if (util.isInvalidSwing(swingData) && !test) {\r\n      alert('invalid swing');\r\n      return;\r\n    }\r\n    // ska bara kunna används wood på första slaget? ge det lite extra power\r\n    const club = CLUBS[clubIndex];\r\n    const swing = util.getSwingData(club, acceleration);\r\n    this.setState(state => ({\r\n      strokes: state.strokes + 1,\r\n    }));\r\n    // test\r\n    // test\r\n\r\n\r\n    fire.database().ref(`/games/${game.key}/players/${playerKey}/swing`).set(swing, (error) => {\r\n      if (error) {\r\n        console.log('error updated swing move');\r\n      } else {\r\n        console.log('saved swing success');\r\n      }\r\n    });\r\n  }\r\n\r\n  renderFrame() {\r\n    const { game, playerKey, classes } = this.props;\r\n    const { swingData, strokes } = this.state;\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n    const currentPlayer = game.players[playerKey];\r\n\r\n    ctx.lineWidth = 4;\r\n    const background = new Image();\r\n    background.src = 'https://i.imgur.com/DE8oR5A.png';\r\n\r\n    background.onload = function () {\r\n      clearCanvas();\r\n      ctx.drawImage(background, 0, 0, canvas.width, canvas.height);\r\n\r\n      const fingerprint = new Image();\r\n      fingerprint.onload = function () {\r\n        ctx.globalAlpha = 0.3;\r\n        ctx.drawImage(fingerprint, (canvas.width / 4), (canvas.height / 4), canvas.width / 2, canvas.width / 2);\r\n        ctx.globalAlpha = 1;\r\n      };\r\n      fingerprint.src = fingerprintIcon;\r\n      drawSwing(swingData);\r\n      drawEnvironment(canvas.width, canvas.height, game.minigame.levelColor, 'gray');\r\n      if (currentPlayer.state === 'STILL') {\r\n        drawStrokes(canvas.width / 2, 48, strokes);\r\n        drawBall(canvas.width / 2, canvas.height - (BALL_RADIUS_CONTROLLER * 2) + 4, currentPlayer.color, 'gray');\r\n        drawDistance(canvas.width / 2, 24, currentPlayer.distance);\r\n      } else if (currentPlayer.state === 'SCORED') {\r\n        drawScoreText(canvas.width / 2, 72 / 2, currentPlayer, strokes);\r\n      }\r\n    };\r\n  }\r\n\r\n  // man ska kunna swinga hela tiden men det är bara när player.state är 'STILL' som en boll rendreras och swingen kan sparas.\r\n  // lägg till en selectbox där man väljer klubba som står loftAngle.\r\n  // lägg till en snyggare powermätare. använd någon riktigt visuel mätare\r\n  render() {\r\n    const { game, playerKey, classes } = this.props;\r\n    const {\r\n      highestAcceleration, isSwinging, canvasHeight, canvasWidth, clubIndex, anchorEl, clubIcons,\r\n    } = this.state;\r\n    const open = Boolean(anchorEl);\r\n    const choosenClub = CLUBS[clubIndex];\r\n    this.renderFrame();\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className={classes.container}>\r\n          <canvas id=\"swingcanvas\" className={classes.canvas} height={canvasHeight} width={canvasWidth} />\r\n          <div className={classes.clubwrapper}>\r\n            <Button\r\n              aria-owns={open ? 'club-menu' : undefined}\r\n              aria-haspopup=\"true\"\r\n              style={{ marginLeft: '-20px', marginRight: '-20px' }}\r\n              onClick={this.handleClick}\r\n            >\r\n              <img src={golfbagIcon} alt=\"choose club\" height=\"100\" />\r\n            </Button>\r\n            <Menu\r\n              id=\"club-menu\"\r\n              anchorEl={anchorEl}\r\n              open={open}\r\n              onClose={this.handleClose}\r\n            >\r\n              {CLUBS.map(c => (\r\n                <MenuItem onClick={this.handleChange('clubIndex')} key={c.id} value={c.id}>\r\n                  <img src={clubIcons[c.type]} alt={c.name} className={classes.menuitemicon} />\r\n                  {c.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n            <Typography variant=\"body2\" style={{ display: 'grid', paddingBottom: '8px' }}>\r\n              <span>{choosenClub.name}</span>\r\n              <img src={clubIcons[choosenClub.type]} alt=\"club\" height=\"60\" />\r\n            </Typography>\r\n\r\n          </div>\r\n          <div className={classes.footer} style={{ backgroundColor: game.minigame.levelColor }}>\r\n            <ReactSpeedometer\r\n              minValue={0}\r\n              height={174}\r\n              startColor=\"green\"\r\n              ringWidth={40}\r\n              segments={10}\r\n              needleTransitionDuration={50}\r\n              needleTransition=\"easeLinear\"\r\n              textColor=\"ghostwhite\"\r\n              needleColor=\"ghostwhite\"\r\n              endColor=\"red\"\r\n              currentValueText=\"${value} m/s\"\r\n              maxValue={100}\r\n              value={highestAcceleration / 2}\r\n            />\r\n          </div>\r\n          <button style={{ position: 'absolute', top: '0', left: '0' }} type=\"button\" onClick={this.testSwing}>swing</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolfController.propTypes = {\r\n  playerKey: PropTypes.string.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n  classes: PropTypes.any,\r\n};\r\nexport default withStyles(styles)(GolfController);\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction generateName(currentNames) {\r\n  const adjectives = ['rutig,', 'antik', 'arg', 'lugn', 'friterad', 'hemlig', 'lycklig', 'gammal', 'rutten', 'smidig', 'vegansk', 'stark', 'full', 'giftig', 'djurig', 'artig', 'smutsig', 'dum', 'smart', 'stilig', 'snabb', 'långsam', 'seg', 'blygsam', 'envis', 'cool', 'tuff', 'spännande', 'farlig'];\r\n  const nouns = ['ninja', 'stol', 'pankaka', 'staty', 'enhörning', 'regnbåge', 'kanin', 'kapten', 'cupcake', 'morot', 'potatis', 'salad', 'gardin', 'toalett', 'streckgubbe', 'drake', 'farmor', 'mormor', 'farfar', 'morfar', 'mellanchef', 'rörmokare', 'bilförsäljare', 'skogshuggare', 'pensionär', 'cirkus', 'studdsmatta', 'clown', 'mellanchef', 'busschafför', 'luftballong', 'boss', 'tiger'];\r\n  let finalName = '';\r\n  for (let i = 0; i < 20; i++) {\r\n    let name = '';\r\n    if (i > 10) {\r\n      name = `${adjectives[Math.floor(Math.random() * adjectives.length)]} ${adjectives[Math.floor(Math.random() * adjectives.length)]} ${nouns[Math.floor(Math.random() * nouns.length)]}`;\r\n    } else {\r\n      name = `${adjectives[Math.floor(Math.random() * adjectives.length)]} ${nouns[Math.floor(Math.random() * nouns.length)]}`;\r\n    }\r\n    if (currentNames.indexOf(name) > -1) {\r\n      continue;\r\n    } else {\r\n      finalName = name;\r\n      break;\r\n    }\r\n  }\r\n  return finalName;\r\n}\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n    };\r\n    this.createPlayer = this.createPlayer.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { playerKey, game, addPlayer } = this.props;\r\n    if (!playerKey && game.minigame.nameGenerator) {\r\n      addPlayer(this.generatePlayer());\r\n    }\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  createPlayer() {\r\n    const { name } = this.state;\r\n    const { addPlayer } = this.props;\r\n    // validera så att namnet inte är taget.\r\n    const player = {\r\n      name,\r\n      score: 0,\r\n    };\r\n    addPlayer(player);\r\n  }\r\n\r\n  generatePlayer() {\r\n    const { game } = this.props;\r\n    let currentNames = [];\r\n    if (game.players) {\r\n      currentNames = Object.values(game.players).map(a => a.name);\r\n    }\r\n    const name = generateName(currentNames);\r\n    const player = {\r\n      name,\r\n      score: 0,\r\n    };\r\n    return player;\r\n  }\r\n\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const { name } = this.state;\r\n    let playerName = '';\r\n    if (game.players && playerKey && game.players[playerKey]) {\r\n      playerName = game.players[playerKey].name;\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        {playerName\r\n          ? (\r\n            <div>\r\n              <div className=\"quiz-top-section\" />\r\n              <div className=\"quiz-middle-section\">\r\n                <Typography variant=\"h5\">\r\n                  <span>Welcome </span>\r\n                  <span className=\"dynamic-text\">{playerName}</span>\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\"> Watch the screen, your name should show.</Typography>\r\n              </div>\r\n              <div className=\"quiz-bottom-section\" />\r\n            </div>\r\n          )\r\n          : (\r\n            <div>\r\n              <FormControl>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  margin=\"normal\"\r\n                  onChange={this.handleChange('name')}\r\n                />\r\n              </FormControl>\r\n              <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n            </div>\r\n          )\r\n            }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string,\r\n  addPlayer: PropTypes.func.isRequired,\r\n};\r\nexport default PhaseConnection;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h5\">Starting game...</Typography>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseStarting;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseFinalResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h5\">Look at the screen. playerKey</Typography>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseFinalResult;\r\n","import React, { Component, Fragment } from 'react';\r\nimport LeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport RightIcon from '@material-ui/icons/ChevronRight';\r\nimport UpIcon from '@material-ui/icons/ExpandLess';\r\nimport DownIcon from '@material-ui/icons/ExpandMore';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\n\r\nclass SnakeController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAction = this.handleAction.bind(this);\r\n  }\r\n\r\n  handleAction(name) {\r\n    const { playerKey, game } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n\r\n    fire.database().ref(`/games/${game.key}/minigame/snakes/${currentPlayer.snakeId}/move`).set(name, (error) => {\r\n      if (error) {\r\n        console.log('error updated snake move');\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n    const playerSnake = game.minigame.snakes[currentPlayer.snakeId];\r\n\r\n    const allControlActions = playerSnake.actions;\r\n    const displayName = playerSnake.playerKeys.length === 1 ? currentPlayer.name : playerSnake.name;\r\n\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"player-controlls-container\">\r\n          {allControlActions.map(action => (\r\n            <Fragment key={action}>\r\n              {currentPlayer.controlActions.includes(action)\r\n                ? (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} onClick={() => { this.handleAction(action); }} style={{ backgroundColor: playerSnake.color }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                : (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} style={{ backgroundColor: playerSnake.color, opacity: 0.3 }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                            }\r\n            </Fragment>\r\n          ))}\r\n          <div className=\"player-controlls-action player-controlls-middle\">\r\n            <Typography variant=\"body1\">{displayName}</Typography>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnakeController.propTypes = {\r\n  playerKey: PropTypes.string.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeController;\r\n","import React, { Component } from 'react';\r\n\r\nclass TetrisController extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                TetrisController.js\r\n\r\n                här  ska jag visa knappar för moves. och en metod här som tar knapptrycket och updaterar en specifik property i firebase baserat på gameid, playerkey etc.\r\n                måste ha med snakeId in i dnena kommmponent?\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TetrisController;","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport * as util from './SpotifyUtil';\r\nimport {\r\n  MISSING_ALBUM_COVER,\r\n  MIN_SONGS_PLAYLIST,\r\n} from './SpotifyConstants';\r\n\r\nfunction slimifyPlaylist(playlist) {\r\n  const slim = {\r\n    name: playlist.name,\r\n    id: playlist.id,\r\n    img: playlist.images.length > 0 ? playlist.images[0] : MISSING_ALBUM_COVER,\r\n    totalSongs: playlist.tracks.total,\r\n  };\r\n  return slim;\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: 500,\r\n    height: 450,\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n  },\r\n  titleBar: {\r\n    background:\r\n      'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, '\r\n      + 'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n  icon: {\r\n    color: 'white',\r\n  },\r\n});\r\nfunction SpotifyPlayListSelector(props) {\r\n  const { classes, playlists, setSelection } = props;\r\n  if (!playlists) {\r\n    return null;\r\n  }\r\n  const slimPlaylists = playlists.filter(p => util.isValidPlaylist(p)).map(pl => slimifyPlaylist(pl));\r\n  return (\r\n    <div>\r\n      <GridList cellHeight={200} spacing={1} className={classes.gridList}>\r\n        {slimPlaylists.map(playlist => (\r\n          <GridListTile key={playlist.id} cols={1} rows={1}>\r\n            <img src={playlist.img.url} alt={playlist.name} />\r\n            <GridListTileBar\r\n              title={`${playlist.name} - ${playlist.totalSongs}`}\r\n              titlePosition=\"top\"\r\n              actionIcon={(\r\n                <IconButton className={classes.icon} onClick={() => setSelection(playlist.id)}>\r\n                  <StarBorderIcon />\r\n                </IconButton>\r\n)}\r\n              actionPosition=\"left\"\r\n              className={classes.titleBar}\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\nSpotifyPlayListSelector.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  playlists: PropTypes.array.isRequired,\r\n  setSelection: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(SpotifyPlayListSelector);\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SpotifyPlayListSelector from '../SpotifyPlaylistSelector';\r\nimport {\r\n  AUTH_EXPIRE_MS,\r\n  CLIENT_ID,\r\n} from '../SpotifyConstants';\r\n\r\nclass SpotifyConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      selectedPlaylist: '',\r\n      spotifyUser: null,\r\n      avatar: null,\r\n      playlists: [],\r\n    };\r\n    this.createPlayer = this.createPlayer.bind(this);\r\n    this.setPlaylist = this.setPlaylist.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const token = localStorage.getItem('spotifytoken');\r\n    const timestamp = localStorage.getItem('spotifytoken_timestamp');\r\n\r\n    // If there is no token, redirect to Spotify authorization. kolla om token gått ut också\r\n    // jag kan sätta redirect till någon anna route och lösa det så att när man kommer dit så går den direkt och kollar i firebase och connectar än till rätt game?\r\n\r\n    if (!token || Date.now() - timestamp > AUTH_EXPIRE_MS) {\r\n      const authEndpoint = 'https://accounts.spotify.com/authorize';\r\n      // Replace with your app's client ID, redirect URI and desired scopes\r\n      const redirectUri = window.location.origin;\r\n      const scopes = [\r\n        'user-top-read',\r\n        'playlist-read-private',\r\n      ];\r\n      window.location = `${authEndpoint}?client_id=${CLIENT_ID}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\r\n    }\r\n    const myHeaders = new Headers();\r\n    myHeaders.append('Authorization', `Bearer ${token}`);\r\n\r\n    // Make a call using the token\r\n\r\n    const result = fetch('https://api.spotify.com/v1/me', {\r\n      method: 'GET',\r\n      headers: myHeaders,\r\n    }).then(response => response.json())\r\n      .then((data) => {\r\n        this.setState({ name: data.display_name, avatar: data.images.length > 0 ? data.images[0].url : null });\r\n        return fetch(`https://api.spotify.com/v1/users/${data.id}/playlists`, {\r\n          method: 'GET',\r\n          headers: myHeaders,\r\n        });\r\n      })\r\n      .then(response => response.json());\r\n\r\n    result.then((r) => {\r\n      this.setState({ playlists: r.items });\r\n      console.table(r.items); // 2nd request result\r\n    });\r\n\r\n    // spara till state:\r\n    // spotifyUser\r\n    // user.name\r\n    // playlist.id\r\n    // playlists\r\n    //\r\n  }\r\n\r\n  setPlaylist(selectedPlaylist) {\r\n    this.createPlayer(selectedPlaylist);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  createPlayer(selectedPlaylist) {\r\n    const { name, avatar } = this.state;\r\n    const { addPlayer } = this.props;\r\n    // jag skulle kunna spara userid istället för name och avatar. och sen i host ta ut avatar och name\r\n    const player = {\r\n      name,\r\n      playlist: selectedPlaylist,\r\n      score: 0,\r\n      avatar,\r\n    };\r\n    addPlayer(player);\r\n    this.setState({ selectedPlaylist });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const { name, playlists, selectedPlaylist } = this.state;\r\n    let playerName = '';\r\n    if (game.players && playerKey && game.players[playerKey]) {\r\n      playerName = game.players[playerKey].name;\r\n    }\r\n    // fiska fram info om vilken playlist som blev vald här? använd playlists och selectedplaylist (id) för att göra det\r\n    return (\r\n      <div className=\"phase-container\">\r\n        {selectedPlaylist\r\n          ? (\r\n            <div>\r\n              <div className=\"quiz-top-section\" />\r\n              <div className=\"quiz-middle-section\">\r\n                <Typography variant=\"h5\">\r\n                  <span>Welcome </span>\r\n                  <span className=\"dynamic-text\">{playerName}</span>\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\"> Watch the screen, your name should show.</Typography>\r\n              </div>\r\n              <div className=\"quiz-bottom-section\" />\r\n            </div>\r\n          )\r\n          : (\r\n            <div>\r\n              <Typography variant=\"subtitle1\">Select a playlist</Typography>\r\n              <SpotifyPlayListSelector setSelection={this.setPlaylist} playlists={playlists} />\r\n            </div>\r\n          )\r\n            }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSpotifyConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string,\r\n  addPlayer: PropTypes.func.isRequired,\r\n};\r\nexport default SpotifyConnection;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    height: '100vh',\r\n    width: '100vw',\r\n  },\r\n  canvas: {\r\n  },\r\n  header: {\r\n    height: 80,\r\n  },\r\n  footer: {\r\n    height: 180,\r\n    marginTop: '-4px',\r\n  },\r\n  clubwrapper: {\r\n    display: 'flex',\r\n    marginTop: '-120px',\r\n    position: 'absolute',\r\n    alignItems: 'flex-end',\r\n  },\r\n  menuitemicon: {\r\n    height: '100%',\r\n    paddingRight: 10,\r\n  },\r\n});\r\n\r\n\r\nclass SpotifyController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // sätt det här till rätt höjd. det ska vara windowheight - header - footer\r\n\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n      anchorEl: null,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  // man ska kunna swinga hela tiden men det är bara när player.state är 'STILL' som en boll rendreras och swingen kan sparas.\r\n  // lägg till en selectbox där man väljer klubba som står loftAngle.\r\n  // lägg till en snyggare powermätare. använd någon riktigt visuel mätare\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className={classes.container} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSpotifyController.propTypes = {\r\n  playerKey: PropTypes.string.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n  classes: PropTypes.any,\r\n};\r\nexport default withStyles(styles)(SpotifyController);\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n// import AnswerOption from '../AnswerOption';\r\n// import AnswerChart from '../AnswerChart';\r\n// import Leaderboard from '../Leaderboard';\r\n\r\nPlayerQuestionResult.propTypes = {\r\n  playerData: PropTypes.object.isRequired,\r\n};\r\nfunction PlayerQuestionResult(props) {\r\n  const { playerData } = props;\r\n  const wrongAnswer = playerData.hasAnswered && playerData.currentQuestionScore === 0;\r\n  const correctAnswer = playerData.currentQuestionScore > 0;\r\n  return (\r\n    <div>\r\n      {correctAnswer > 0 && <Typography variant=\"h5\">Correct answer!</Typography>}\r\n      {wrongAnswer && <Typography variant=\"h5\">Wrong answer!</Typography>}\r\n      {!playerData.hasAnswered && <Typography variant=\"h5\">You did not answer the question</Typography>}\r\n      {playerData.hasAnswered && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <div>\r\n            <span>Score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.currentQuestionScore}</span>\r\n          </div>\r\n          <div>\r\n            <span>Time: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.answerTime}</span>\r\n          </div>\r\n          <div>\r\n            <span>Total score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.totalScore}</span>\r\n          </div>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition !== playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Old position:</span>\r\n          <span>\r\n            {' '}\r\n            {playerData.oldLeaderboardPosition}\r\n          </span>\r\n          <span>New position: </span>\r\n          <span>{playerData.newLeaderboardPosition}</span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition === playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Position: </span>\r\n          <span>\r\n            {' '}\r\n            {playerData.newLeaderboardPosition}\r\n          </span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nclass SpotifyResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n  }\r\n\r\n  getPlayerAnswerData() {\r\n    const { game, playerKey } = this.props;\r\n    const answerData = {\r\n      totalScore: 0,\r\n      currentQuestionScore: 0,\r\n      newLeaderboardPosition: 1,\r\n      oldLeaderboardPosition: 1,\r\n      answerTime: 0,\r\n      hasAnswered: false,\r\n    };\r\n    const currentQuestion = game.quiz.questions[game.quiz.currentQuestion];\r\n    const currentPlayer = game.players[playerKey];\r\n    // answers kan vara undefined. refactorera hela klassen\r\n    // den här läsningen håller inte. kan bli fel värden som man missar att svara på en fråga.\r\n    // gör om till reduce och se om det ska vara iteration på answers eller på quiz.questions kanske?\r\n\r\n    for (let j = 0; j < game.quiz.questions.length; j++) {\r\n      const question = game.quiz.questions[j];\r\n      const answer = currentPlayer.answers ? currentPlayer.answers[question.id] : false;\r\n      if (answer) {\r\n        if (answer.questionId === currentQuestion.id) {\r\n          answerData.hasAnswered = true;\r\n          answerData.currentQuestionScore = answer.score;\r\n          answerData.answerTime = answer.answerTime;\r\n        }\r\n        answerData.totalScore += answer.score;\r\n      }\r\n    }\r\n\r\n    const playerKeys = game.players ? Object.keys(game.players) : [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      if (playerKeys[i] === currentPlayer.key) {\r\n        continue;\r\n      }\r\n      const opponent = game.players[playerKeys[i]];\r\n      let totalScore = 0;\r\n      let currentQuestionScore = 0;\r\n      for (let j = 0; j < game.quiz.questions.length; j++) {\r\n        const question = game.quiz.questions[j];\r\n        const answer = opponent.answers ? opponent.answers[question.id] : false;\r\n        if (answer) {\r\n          if (answer.questionId === currentQuestion.id) {\r\n            currentQuestionScore = answer.score;\r\n          }\r\n          totalScore += answer.score;\r\n        }\r\n      }\r\n      if (totalScore > answerData.totalScore) {\r\n        answerData.newLeaderboardPosition += 1;\r\n      }\r\n      if (totalScore - currentQuestionScore > answerData.totalScore - answerData.currentQuestionScore) {\r\n        answerData.oldLeaderboardPosition += 1;\r\n      }\r\n    }\r\n\r\n    return answerData;\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    const playerData = this.getPlayerAnswerData();\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <PlayerQuestionResult playerData={playerData} />\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Typography variant=\"subtitle1\">Look at the screen to se overall player results</Typography>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSpotifyResultQuestion.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string.isRequired,\r\n};\r\nexport default SpotifyResultQuestion;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport SnakeController from '../snake/SnakeController';\r\nimport TetrisController from '../tetris/TetrisController';\r\nimport GolfController from '../golf/GolfController';\r\nimport SpotifyConnection from '../spotify/play/SpotifyConnection';\r\nimport SpotifyController from '../spotify/play/SpotifyController';\r\nimport SpotifyResultQuestion from '../spotify/play/SpotifyResultQuestion';\r\n\r\nclass Minigame extends PureComponent {\r\n  render() {\r\n    const {\r\n      game, playerKey, createPlayer,\r\n    } = this.props;\r\n    const lastPhase = game.phase === 'final_result' || game.phase === 'end';\r\n    switch (game.gametype) {\r\n      case 'snake':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <SnakeController game={game} playerKey={playerKey} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      case 'tetris':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <TetrisController game={game} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      case 'golf':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {(game.phase === 'gameplay' || game.phase === 'level_completed') && <GolfController game={game} playerKey={playerKey} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      case 'spotify':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <SpotifyConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <SpotifyController game={game} playerKey={playerKey} />}\r\n            {game.phase === 'level_completed' && <SpotifyResultQuestion game={game} playerKey={playerKey} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      default:\r\n        return (null);\r\n    }\r\n  }\r\n}\r\nMinigame.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  createPlayer: PropTypes.func.isRequired,\r\n  playerKey: PropTypes.string.isRequired,\r\n};\r\nexport default Minigame;\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport GameIcon from '@material-ui/icons/VideogameAsset';\r\nimport GolfIcon from '@material-ui/icons/GolfCourse';\r\nimport PropTypes from 'prop-types';\r\nimport { Typography } from '@material-ui/core';\r\nimport { fire } from '../../base';\r\nimport Quiz from '../quiz/play/Quiz';\r\nimport Minigame from '../minigame/play/Minigame';\r\n\r\n\r\nfunction fetchGame(gameId, callback) {\r\n  fire.database().ref('games').orderByChild('gameId').equalTo(gameId)\r\n    .once('value', callback);\r\n}\r\n\r\nclass Play extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n      gameId: '',\r\n      recentGameId: localStorage.getItem('RecentGameIdPlay') || '',\r\n      playerKey: '',\r\n      recentGame: null,\r\n    };\r\n    this.createPlayer = this.createPlayer.bind(this);\r\n    this.joinGame = this.joinGame.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { recentGameId } = this.state;\r\n    if (recentGameId) {\r\n      fetchGame(recentGameId, (snapshot) => {\r\n        if (snapshot.val()) {\r\n          let game;\r\n          snapshot.forEach((child) => {\r\n            game = child.val();\r\n          });\r\n          if (game.status === 'IN_PROGRESS') {\r\n            this.setState({ recentGame: game });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n\r\n  joinGame(gameId) {\r\n    const { showSnackbar, toggleHeader } = this.props;\r\n    const that = this;\r\n    fetchGame(gameId, (snapshot) => {\r\n      if (snapshot.val()) {\r\n        let game;\r\n        snapshot.forEach((child) => {\r\n          game = child.val();\r\n        });\r\n        // får skapa en ny attribut, canPlayerJoin true/false om det begövs\r\n        if (game.phase === 'connection') {\r\n          const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n          if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n            that.setState({ playerKey: storedPlayerKey });\r\n          }\r\n          that.initGameListiner(game.key);\r\n          const snack = {\r\n            variant: 'success',\r\n            message: 'Connected to game',\r\n          };\r\n          showSnackbar(snack);\r\n          toggleHeader(false);\r\n        } else if (game.phase === 'setup') {\r\n          const snack = {\r\n            variant: 'error',\r\n            message: 'Game is not yet started',\r\n          };\r\n          showSnackbar(snack);\r\n        } else {\r\n          const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n          if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n            that.setState({ playerKey: storedPlayerKey });\r\n            localStorage.setItem('RecentGameIdPlay', game.gameId);\r\n            that.initGameListiner(game.key);\r\n            const snack = {\r\n              variant: 'success',\r\n              message: 'Connected to game',\r\n            };\r\n            showSnackbar(snack);\r\n            toggleHeader(false);\r\n          } else {\r\n            const snack = {\r\n              variant: 'error',\r\n              message: 'Game is in progress',\r\n            };\r\n            showSnackbar(snack);\r\n          }\r\n        }\r\n      } else {\r\n        const snack = {\r\n          variant: 'info',\r\n          message: 'No game found',\r\n        };\r\n        showSnackbar(snack);\r\n      }\r\n    });\r\n  }\r\n\r\n  initGameListiner(gameKey) {\r\n    const gameRef = fire.database().ref(`games/${gameKey}`);\r\n    const that = this;\r\n    gameRef.on('value', (snapshot) => {\r\n      const game = snapshot.val();\r\n      if (game) {\r\n        // kan blir problem med asynch setstate?\r\n        that.setState({\r\n          game,\r\n        });\r\n      } else {\r\n        that.setState({\r\n          game: '',\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  createPlayer(player) {\r\n    const { game } = this.state;\r\n    const { showSnackbar } = this.props;\r\n    const playerRef = fire.database().ref(`/games/${game.key}/players`).push();\r\n    const newPlayer = Object.assign({ key: playerRef.key }, player);\r\n    const that = this;\r\n    playerRef.set(newPlayer, (error) => {\r\n      if (error) {\r\n        const snack = {\r\n          variant: 'error',\r\n          message: 'Unexpected internal error',\r\n        };\r\n        showSnackbar(snack);\r\n      } else {\r\n        that.setState({\r\n          playerKey: newPlayer.key,\r\n        });\r\n        localStorage.setItem('RecentPlayerKey', newPlayer.key);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      game, playerKey, gameId, recentGameId, recentGame,\r\n    } = this.state;\r\n    const { showSnackbar } = this.props;\r\n    if (!game.phase) {\r\n      return (\r\n        <div className=\"page-container play-page\">\r\n          <div>\r\n            <FormControl>\r\n              <TextField\r\n                label=\"Game PIN\"\r\n                name=\"Game ID\"\r\n                value={gameId}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('gameId')}\r\n              />\r\n            </FormControl>\r\n            <Button onClick={() => this.joinGame(gameId)} variant=\"contained\">Join</Button>\r\n          </div>\r\n          {recentGame && (\r\n          <div>\r\n\r\n            <List>\r\n              <ListItem>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {recentGame.gametype === 'golf' && (<GolfIcon />)}\r\n                    {recentGame.gametype !== 'golf' && (<GameIcon />)}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={recentGame.title}\r\n                  secondary={recentGame.gameId}\r\n                />\r\n                <ListItemSecondaryAction>\r\n                  <IconButton aria-label=\"reconnect\" onClick={() => this.joinGame(recentGameId)}>\r\n                    <Typography>reconnect</Typography>\r\n                  </IconButton>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            </List>\r\n\r\n          </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"page-container play-page\">\r\n        {game.gametype === 'quiz' && <Quiz game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'snake' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'tetris' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'golf' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'spotify' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPlay.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  toggleHeader: PropTypes.func.isRequired,\r\n};\r\nexport default Play;\r\n","import React, { Component } from 'react';\r\nimport { Typography, Card } from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-page home-page\">\r\n        <Grid container spacing={24}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h3\">Welcome to stagehoot</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Link to=\"/play\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Play\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Connect to a game as player</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Link to=\"/host\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Host\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Host a created game using game pin</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link to=\"/create\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Create\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Setup a new game and recive a related game pin</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n  success: {\r\n    backgroundColor: green[600],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700],\r\n  },\r\n  icon: {\r\n    fontSize: 20,\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  message: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n  const {\r\n    classes, message, onClose, variant, ...other\r\n  } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={classes[variant]}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={(\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n            )}\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"Close\"\r\n          color=\"inherit\"\r\n          className={classes.close}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>,\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nclass CustomizedSnackbars extends React.Component {\r\n    handleClose = (reason) => {\r\n      const { hideSnackbar } = this.props;\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n      hideSnackbar();\r\n    };\r\n\r\n    render() {\r\n      const { snack } = this.props;\r\n      return (\r\n        <div>\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'left',\r\n            }}\r\n            open={snack.open}\r\n            autoHideDuration={6000}\r\n            onClose={this.handleClose}\r\n          >\r\n            <MySnackbarContentWrapper\r\n              onClose={this.handleClose}\r\n              variant={snack.variant}\r\n              message={snack.message}\r\n            />\r\n          </Snackbar>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCustomizedSnackbars.propTypes = {\r\n  snack: PropTypes.object,\r\n  hideSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default CustomizedSnackbars;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport {\n  HashRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport { fire } from './base';\nimport Header from './components/common/Header';\nimport Create from './components/pages/Create';\nimport Host from './components/pages/Host';\nimport Play from './components/pages/Play';\nimport Home from './components/pages/Home';\nimport CustomizedSnackbars from './components/common/CustomizedSnackbars';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snack: '',\n      showHeader: true,\n    };\n    const hash = window.location.hash\n      .substring(1)\n      .split('&')\n      .reduce((initial, item) => {\n        if (item) {\n          const parts = item.split('=');\n          initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n      }, {});\n    window.location.hash = '';\n    if (hash.access_token) {\n      localStorage.setItem('spotifytoken', hash.access_token);\n      localStorage.setItem('spotifytoken_timestamp', Date.now());\n\n    }\n    this.showSnackbar = this.showSnackbar.bind(this);\n    this.hideSnackbar = this.hideSnackbar.bind(this);\n    this.toggleHeader = this.toggleHeader.bind(this);\n\n  }\n\n  hideSnackbar() {\n    const snack = this.state.snack;\n    snack.open = false;\n    this.setState({\n      snack,\n    });\n  }\n\n  showSnackbar(snack) {\n    snack.open = true;\n    this.setState({\n      snack,\n    });\n  }\n\n  toggleHeader(value) {\n    this.setState({ showHeader: value });\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {this.state.showHeader && <Header />}\n          <div id=\"content\">\n            <Route exact path=\"/play\" render={() => <Play showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/host\" render={() => <Host showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/create\" render={() => <Create showSnackbar={this.showSnackbar} />} />\n            <Route exact path=\"/\" render={() => <Home />} />\n          </div>\n          {this.state.snack && <CustomizedSnackbars snack={this.state.snack} hideSnackbar={this.hideSnackbar} />}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}