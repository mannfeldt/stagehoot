{"version":3,"sources":["components/common/CountdownAnimation.scss","base.js","components/common/Header.js","components/quiz/create/Question.js","components/common/utils/appUtil.js","components/minigame/snake/Snake.js","components/quiz/create/GenerateQuizForm.js","components/quiz/create/QuestionForm.js","components/quiz/create/CreateQuiz.js","components/minigame/create/CreateTetris.js","components/minigame/create/CreateGolf.js","components/minigame/create/CreateSnake.js","components/minigame/create/CreateMinigame.js","components/pages/Create.js","components/quiz/host/PhaseSetup.js","components/quiz/host/PhaseConnection.js","components/common/CountdownAnimation.js","components/quiz/host/PhaseStarting.js","components/quiz/host/PhaseAwaitingQuestion.js","components/quiz/host/PhaseShowQuestion.js","components/quiz/AnswerOption.js","components/common/Timer.js","components/quiz/host/AnswerCounter.js","components/quiz/host/PhaseAnswer.js","components/quiz/Podium.js","components/quiz/host/PhaseFinalResult.js","components/quiz/AnswerChart.js","components/quiz/Leaderboard.js","components/quiz/host/PhaseResultQuestion.js","components/quiz/host/PhaseEnd.js","components/quiz/host/Quiz.js","components/minigame/host/PhaseSetup.js","components/minigame/host/PhaseConnection.js","components/minigame/host/PhaseStarting.js","components/common/utils/minigameUtil.js","components/minigame/tetris/Tetris.js","components/minigame/host/PhaseFinalResult.js","components/minigame/host/PhaseEnd.js","components/minigame/snake/SnakeStarting.js","components/minigame/golf/GolfConstants.js","components/minigame/golf/GolfUtil.js","components/minigame/golf/Golf.js","components/minigame/golf/GolfStarting.js","components/minigame/snake/SnakeSetup.js","components/minigame/golf/GolfSetup.js","components/minigame/host/Minigame.js","components/minigame/golf/GolfLevelCompleted.js","components/pages/Host.js","components/quiz/play/PhaseConnection.js","components/quiz/play/PhaseStarting.js","components/quiz/play/PhaseAwaitingQuestion.js","components/quiz/play/PhaseShowQuestion.js","components/quiz/play/PhaseAnswer.js","components/quiz/play/PhaseFinalResult.js","components/quiz/play/PhaseResultQuestion.js","components/quiz/play/Quiz.js","components/quiz/play/PhaseEnd.js","components/minigame/golf/GolfController.js","components/minigame/play/PhaseConnection.js","components/minigame/play/PhaseStarting.js","components/minigame/play/PhaseFinalResult.js","components/minigame/snake/SnakeController.js","components/minigame/tetris/TetrisController.js","components/minigame/play/Minigame.js","components/pages/Play.js","components/pages/Home.js","components/common/CustomizedSnackbars.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cyanColor","redColor","purpleColor","greenColor","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","titleText","options","react_default","a","createElement","id","AppBar_default","position","Toolbar_default","className","Link","to","Component","Question","expanded","deleteQuestion","bind","assertThisInitialized","question","classes","Card_default","card","CardHeader_default","action","IconButton_default","onClick","DeleteOutlined_default","title","subheader","timelimit","CardContent_default","Typography_default","variant","align","List_default","correctAnswers","map","answer","index","ListItem_default","key","ListItemText_default","primary","wrongAnswers","withStyles","theme","maxWidth","calculateDefaultTimeLimit","aType","Math","floor","join","length","parseDOM","s","DOMParser","parseFromString","concat","body","textContent","parseDOMArray","arr","result","i","push","ctx","canvas","GenerateQuizForm","handleChange","name","event","setState","defineProperty","target","value","handleChangeSelect","nrOfQuestions","category","difficulty","generateQuestions","_this$state","_this$props","addQuestions","showSnackbar","url","fetch","then","response","json","generated","response_code","questions","results","generatedQuestion","correct_answer","incorrect_answers","qType","type","snack","message","_this$state2","Grid_default","container","item","xs","md","FormControl_default","fullWidth","TextField_default","label","margin","onChange","InputLabel_default","htmlFor","Select_default","inputProps","MenuItem_default","Button_default","QuestionForm","handleTrueFalse","correctAnswer","wrongAnswerOne","wrongAnswerTwo","wrongAnswerThree","sendQuestion","toggleGenerateQuestion","addQuestion","q","isTimelimit","disabled","create_GenerateQuizForm","required","component","FormLabel_default","RadioGroup_default","aria-label","FormControlLabel_default","control","Radio_default","CreateQuiz","handleChangeBool","checked","gametype","gamemode","timescore","gamePass","createQuiz","max","apply","toConsumableArray","o","qs","e","indexOf","splice","_this$state3","password","tile","quiz","_this2","_this$state4","spacing","index_es","autoComplete","FormGroup_default","Switch_default","create_QuestionForm","create_Question","transitionDelay","CreateTetris","validateGame","createGame","minigame","CreateGolf","holes","opponentCollision","CreateSnake","racetarget","eatOpponents","wallCollision","CreateMinigame","setGameType","create_CreateSnake","create_CreateTetris","create_CreateGolf","Create","gameId","g","game","possible","charAt","random","generateGameId","created","Date","now","status","phase","that","gameRef","database","ref","set","error","errorText","localStorage","setItem","create_CreateQuiz","create_CreateMinigame","PhaseSetup","surveyPlayers","answerStreak","nameGenerator","remoteMode","useTeams","randomizeQuestionOrder","autoPlayQuestions","startGame","createTeamGame","createClassicGame","teamMode","currentQuestion","gameFunc","update","PhaseConnection","nextPhase","players","values","player","paragraph","CountdownAnimation","speed","viewBox","d","PureComponent","PhaseStarting","counter","startCounter","setInterval","clearInterval","components_common_CountdownAnimation","PhaseAwaitingQuestion","PhaseShowQuestion","phaseTime","setTimeout","answers","shuffle","array","temp","answerStyles","icon","Cake_default","color","ExtensionOutlined_default","FavoriteBorder_default","StarBorder_default","AnswerOption","design","answerQuestion","Paper_default","playAnswer","style","backgroundColor","paper","root","flexGrow","paddingTop","unit","paddingBottom","textAlign","palette","text","secondary","height","width","float","fontSize","marginLeft","fontWeight","Timer","startValue","currentCount","completed","CircularProgress_default","circle","colorSecondary","thickness","size","marginBottom","AnswerCounter","LinearProgress_default","bar","PhaseAnswer","started","isTimelimited","playerKeys","keys","answersCollected","answerCollectedPercentage","common_Timer","ceil","host_AnswerCounter","quiz_AnswerOption","colors","Podium","getChartData","getChartOptions","getChartHeight","chartData","labels","datasets","data","borderWidth","rawPlayerData","playerScoreData","score","j","sort","b","maxIndex","padding","maintainAspectRatio","showTooltips","responsiveAnimationDuration","animation","easing","duration","onProgress","animationObject","onAnimationProgress","chart","textBaseline","font","stepratio","currentStep","numSteps","meta","getDatasetMeta","hidden","forEach","element","dataString","toString","fillStyle","tooltipPosition","fillText","x","y","_model","scales","yAxes","ticks","beginAtZero","display","xAxes","legend","tooltips","enabled","events","layout","left","right","top","bottom","maxHeight","es","getWinnerString","PhaseFinalResult","quiz_Podium","restart","quit","alert","AnswerChart","getAnswerData","answerData","topPlayer","playerKey","playerAnswers","nrOfAnswers","borderColor","beginPath","rect","_view","fill","img","Image","src","PUBLIC_PATH","ypos","drawImage","Leaderboard","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","leaderboardData","getLeaderboardData","startScoreCounter","getScoreCellWidth","newLeaderBoard","done","currentQuestionScore","totalScore","leaderboard","playerList","questionId","lastScore","scoreWidth","Table_default","table","TableBody_default","slice","TableRow_default","TableCell_default","getLeaderboardScore","TablePagination_default","count","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","whiteSpace","PhaseResultQuestion","nextQuestion","finalizeQuiz","isLastQuestion","quiz_AnswerChart","quiz_Leaderboard","end","PhaseEnd","Quiz","host_PhaseSetup","host_PhaseConnection","host_PhaseStarting","host_PhaseAwaitingQuestion","host_PhaseShowQuestion","host_PhaseAnswer","host_PhaseResultQuestion","host_PhaseFinalResult","host_PhaseEnd","multiplayerMode","gridSize","getRandomStartingPosTop","snakes","canvasWidth","snakesDown","filter","direction","existingValues","Set","getRandomStartingPos","getRandomStartingPosBottom","canvasSettings","xMax","getRandomStartingPosRight","yMax","getRandomStartingPosLeft","canvasHeight","round","some","v","detectSelfCollision","snake","detectWallCollision","snakeHead","leftCollison","topCollison","rightCollison","bottomCollison","Snake","togglePausGame","isPaused","overlay","window","innerHeight","innerWidth","nrOfFoods","gameTicker","winners","len","actions","moves","pos","minigameUtil","foods","amount","initialFoods","active","settings","border","respawntime","food","background","drawSnakes","generateFood","generateSnakes","resetCanvas","drawFood","detectCollisions","initControllerListener","generateFoods","isEndGame","renderOverlay","app","document","querySelector","getContext","snakeRef","on","snapshot","nextSnake","val","move","console","log","_this$props$game$mini","dead","alive","winner","reduce","prev","current","fillRect","nextSnakes","teleportSnakes","_loop","respawning","startPos","keyPress","currentDirection","movement","up","down","nextMove","shift","coordinate","unshift","collidedFood","find","f","pop","globalCompositeOperation","strokestyle","len2","bodyPos","strokeRect","_this$state5","currentSnake","opponentSnake","k","_this$state6","globalAlpha","headX","headY","snakeName","namePosition","yPos","role","tabIndex","onKeyDown","Tetris","replayGame","chunkify","nr","n","out","SNAKE_COLORS","SNAKE_NAMES","SnakeStarting","snakeGenerator","classic","createSnakes","team","createTeamSnakes","coop","createCoopSnakes","actionChunks","snakeId","controlActions","HOLE_HEIGHT","HOLE_CURVE_DEPTH","HOLE_WIDTH","BALL_RADIUS","BALL_RADIUS_CONTROLLER","GRASS_COLOR","CLUBS","loft","powerFactor","GROUND_COLORS","randInt","min","ballMaterial","p2","groundMaterial","holeMaterial","ballGroundContact","friction","restitution","ballHoleContact","BALL_GROUP","pow","GROUND_GROUP","createWorld","world","gravity","sleepMode","BODY_SLEEPING","addContactMaterial","newBall","ballShape","radius","collisionGroup","collisionMask","material","ballBody","mass","addShape","angularDamping","damping","sleepTimeLimit","sleepSpeedLimit","getDistanceYards","getSwingData","club","acceleration","xFactor","YFactor","power","addHolePoints","level","points","Error","idxAfterHole","findIndex","point","hole","x1","x2","holePoints","pointsWithHole","objectSpread","createGround","beforeHole","afterHole","vertsBeforeHole","vertsHole","vertsAfterHole","verts","fromPolygon","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","shapes","Symbol","iterator","next","shape","err","return","createHoleSensor","sensorShape","sensor","sensorBody","getSegmentWidths","totalWidth","minWidth","widths","remainingWidth","calculateScore","strokes","time","levelGen","test","spawn","par","segmentWidths","numSegments","spawnSegment","rnd","spawnX","spawnY","holeX","holeY","holeSegment","5","4","3","minY","maxY","idx","segmentWidth","prevY","boundLow","boundHigh","sample","lastTime","Golf","levelData","startTime","expTime","holeSensor","leaderId","matchEndTime","testacceleration","testClubIndex","testBallIndex","balls","nextLevelTimer","scorers","totalScores","currentlevelScores","init","ensurePlayersInBounds","swing","drawGround","drawLevelCompleteHud","drawPlayHud","renderFrame","animate","testSwing","syncPlayersObjectToFirebase","isLevelCompleted","distributeScore","isLoadNextLevel","loadNextLevel","saveGame","setEventHandlers","evt","_this2$state","_game","bodyA","bodyB","scored","newExpTime","HURRY_UP_MS","scoreTime","scorer","newPlayerState","p","syncPlayersToFirebase","_this2$state2","stillBalls","velocity","playersToUpdateState","distance","util","ballIndex","interpolatedPosition","ensuredBalls","ball","stroke","lineWidth","strokeStyle","arc","PI","closePath","firstPoint","moveTo","lineTo","timeRemaining","totalStrokes","ballToHit","ballX","velocityWithDirection","_this$state7","_this3","_this$state8","getElementById","groundBodies","addBody","createdPlayers","playerColors","h","tiny","tinycolor","fromRatio","toHexString","assign","syncToFirebase","requestAnimationFrame","_result","playersObj","_this$props2","_this$props3","levelColor","_this$props4","deltaTime","step","_this$props5","_this$state9","createdHoleSensor","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","playerUpdates","_this$state10","board","currentRoundScore","currentStrokes","currentScore","r","swingRef","swingData","_this$state11","_this$state12","clearRect","save","drawBalls","_this$state13","c","GolfStarting","SnakeSetup","GolfSetup","Minigame","snake_SnakeSetup","minigame_host_PhaseConnection","snake_SnakeStarting","snake_Snake","minigame_host_PhaseFinalResult","minigame_host_PhaseEnd","minigame_host_PhaseSetup","minigame_host_PhaseStarting","tetris_Tetris","golf_GolfSetup","golf_GolfStarting","golf_Golf","Host","getItem","updateGame","fetchGame","initGameListiner","restartGame","quitGame","endGame","gameupdate","toggleHeader","orderByChild","equalTo","once","child","gameKey","gameFunctions","host_Quiz","host_Minigame","authId","playerCreated","createPlayer","generateName","addPlayer","generatePlayer","adjectives","nouns","finalName","currentNames","playerName","playersInLobby","selectedAnswer","hasAnswered","answerTime","timeFactorUsed","playerAnswer","saveAnswer","panel","getPlayerAnswerData","answerDataList","currentPlayer","playerData","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","PlayerQuestionResult","wrongAnswer","oldLeaderboardPosition","newLeaderboardPosition","opponent","currentQuestionId","lastPhase","play_PhaseConnection","play_PhaseStarting","updatePlayer","play_PhaseAwaitingQuestion","play_PhaseShowQuestion","play_PhaseAnswer","play_PhaseResultQuestion","play_PhaseFinalResult","SnakeController","handleAction","playerSnake","allControlActions","displayName","react","includes","ExpandLess_default","ChevronRight_default","ChevronLeft_default","opacity","TetrisController","GolfController","highestAcceleration","isSwinging","clubIndex","saveSwing","translate","addEventListener","preventDefault","stopPropagation","_that$state","_event$acceleration","z","onload","playerState","drawBall","drawDistance","drawScoreText","prevSwing","newY","newX","drawSwing","groundColor","drawEnvironment","header","footer","marginTop","minigame_play_PhaseConnection","minigame_play_PhaseStarting","snake_SnakeController","minigame_play_PhaseFinalResult","tetris_TetrisController","golf_GolfController","Play","storedPlayerKey","playerRef","newPlayer","play_Quiz","play_Minigame","Home","sm","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","green","dark","amber","iconVariant","marginRight","alignItems","onClose","other","objectWithoutProperties","Icon","SnackbarContent_default","aria-describedby","classNames","close","Close_default","CustomizedSnackbars","handleClose","reason","hideSnackbar","Snackbar_default","anchorOrigin","vertical","horizontal","open","autoHideDuration","React","App","showHeader","HashRouter","common_Header","Route","exact","path","render","pages_Play","pages_Host","pages_Create","pages_Home","common_CustomizedSnackbars","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7445601e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cyanColor\":\"#66b1bb\",\"redColor\":\"#EF9A9A\",\"purpleColor\":\"#CE93D8\",\"greenColor\":\"#9db484\"};","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\n//PROD\r\nvar prodConfig = {\r\n  apiKey: \"AIzaSyB8vYoKiw2DlJycM5bqKKaU4vK_0n7HcsU\",\r\n  authDomain: \"stagehoot.firebaseapp.com\",\r\n  databaseURL: \"https://stagehoot.firebaseio.com\",\r\n  projectId: \"stagehoot\",\r\n  storageBucket: \"stagehoot.appspot.com\",\r\n  messagingSenderId: \"589747985768\"\r\n};\r\n\r\n//DEV\r\n\r\nconst fire = firebase.initializeApp(prodConfig);\r\n\r\nexport { fire }","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { fire } from '../../base';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let titleText = 'Stagehoot';\r\n    if (fire.options.projectId === 'ettkilomjol-dev') {\r\n      titleText = 'Ett Kilo Mjöl DEV';\r\n    }\r\n\r\n    return (\r\n      <div id=\"header\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar className=\"toolbar\">\r\n            <div className=\"appbar-container--left\">\r\n              <Link className=\"appbar-title text-big\" to=\"/\">\r\n                {titleText}\r\n              </Link>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined';\r\n\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        maxWidth: 400,\r\n    },\r\n});\r\nclass Question extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false\r\n        };\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    }\r\n\r\n    deleteQuestion() {\r\n        this.props.deleteQuestion(this.props.question);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <Card className={classes.card}>\r\n                <CardHeader\r\n                    action={\r\n                        <IconButton onClick={this.deleteQuestion}>\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={this.props.question.question}\r\n                    subheader={this.props.question.timelimit ? this.props.question.timelimit + ' seconds' : 'default timelimit'}\r\n                />\r\n                <CardContent>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Correct answers</Typography>\r\n                    <List>\r\n                        {this.props.question.correctAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                    <Typography variant=\"subtitle1\" align=\"left\">Wrong answers</Typography>\r\n                    <List>\r\n                        {this.props.question.wrongAnswers.map((answer, index) =>\r\n                            <ListItem key={index}>\r\n                                <ListItemText\r\n                                    primary={answer}\r\n                                />\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                </CardContent>\r\n\r\n\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Question);","function generateGameId() {\r\n  let id = '';\r\n  const possible = 'ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789';\r\n\r\n  for (let i = 0; i < 6; i++) {\r\n    id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n\r\n  return id;\r\n}\r\nfunction calculateDefaultTimeLimit(question) {\r\n  if (question.aType === 'multiple' || question.aType === 'boolean') {\r\n    return 10 + Math.floor((question.correctAnswers.join().length + question.wrongAnswers.join().length) / 30);\r\n  } if (question.aType === 'free') {\r\n    return 20;\r\n  } if (question.aType === 'player') {\r\n    // answer blir 4-8 random utvalda till varje fråga\r\n    return 20;\r\n  }\r\n  return 20;\r\n}\r\nfunction parseDOM(s) {\r\n  const parser = new DOMParser();\r\n  const dom = parser.parseFromString(\r\n    `<!doctype html><body>${s}`,\r\n    'text/html',\r\n  );\r\n  const decodedString = dom.body.textContent;\r\n  return decodedString;\r\n}\r\n\r\nfunction parseDOMArray(arr) {\r\n  const result = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    result.push(parseDOM(arr[i]));\r\n  }\r\n  return result;\r\n}\r\nexport {\r\n  generateGameId,\r\n  calculateDefaultTimeLimit,\r\n  parseDOMArray,\r\n  parseDOM,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\nimport * as minigameUtil from '../../common/utils/minigameUtil';\r\n\r\nlet ctx;\r\nlet canvas;\r\nconst gridSize = 20;\r\n\r\nclass Snake extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // för att göra det mer smooth. så behöver jag typ dela upp ätandet så att det sker i flera tick? för just nu är ett tick storleken på food och allt annat\r\n    // lite delay när jag ökar speeden. är det olika delay för olika snakes? optimera senare.\r\n    const canvasHeight = Math.floor(window.innerHeight / gridSize) * gridSize;\r\n    const canvasWidth = Math.floor(window.innerWidth / gridSize) * gridSize;\r\n    const nrOfFoods = props.game.minigame.snakes.length * 2;\r\n\r\n    this.state = {\r\n      gameTicker: null,\r\n      ticks: 0,\r\n      winners: [],\r\n      snakes: minigameUtil.getSnakesInStartingPosition(props.game.minigame.snakes, { height: canvasHeight, width: canvasWidth }),\r\n      foods: minigameUtil.getInitialFoods(nrOfFoods),\r\n      settings: {\r\n        snake: {\r\n          size: gridSize,\r\n          speed: props.game.minigame.difficulty,\r\n          border: '#000',\r\n          respawntime: 3,\r\n        },\r\n        food: {\r\n          background: '#EC5E0B',\r\n          border: '#73AA24',\r\n        },\r\n        canvas: {\r\n          height: canvasHeight,\r\n          width: canvasWidth,\r\n          background: '#F5F5F5',\r\n          border: '#000',\r\n        },\r\n      },\r\n    };\r\n\r\n    this.drawSnakes = this.drawSnakes.bind(this);\r\n    this.generateFood = this.generateFood.bind(this);\r\n    this.generateSnakes = this.generateSnakes.bind(this);\r\n    this.resetCanvas = this.resetCanvas.bind(this);\r\n    this.drawFood = this.drawFood.bind(this);\r\n    this.detectCollisions = this.detectCollisions.bind(this);\r\n    this.initControllerListener = this.initControllerListener.bind(this);\r\n    this.generateFoods = this.generateFoods.bind(this);\r\n    this.isEndGame = this.isEndGame.bind(this);\r\n    this.togglePausGame = this.togglePausGame.bind(this);\r\n    this.renderOverlay = this.renderOverlay.bind(this);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const {\r\n      snakes, settings,\r\n    } = this.state;\r\n    const app = document.querySelector('#snakeboard');\r\n\r\n    canvas = app.querySelector('canvas');\r\n    ctx = canvas.getContext('2d');\r\n    this.resetCanvas();\r\n    this.generateSnakes();\r\n    this.generateFoods();\r\n    const that = this;\r\n    const gameTicker = setInterval(() => {\r\n      if (that.state.isPaused) {\r\n        if (that.state.overlay) {\r\n          return;\r\n        }\r\n        that.renderOverlay();\r\n        return;\r\n      }\r\n      if (that.state.winners.length === 0) {\r\n        that.resetCanvas();\r\n        that.generateSnakes();\r\n        that.generateFoods();\r\n        that.detectCollisions();\r\n        that.isEndGame();\r\n      } else {\r\n        that.nextPhase();\r\n      }\r\n    }, settings.snake.speed);\r\n\r\n    this.setState({ gameTicker });\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      this.initControllerListener(snake);\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    // kan jag ha det här?\r\n\r\n    return false;\r\n  }\r\n\r\n  togglePausGame = () => {\r\n    // async!!\r\n    this.setState(state => ({\r\n      isPaused: !state.isPaused,\r\n      overlay: false,\r\n    }));\r\n  }\r\n\r\n  nextPhase() {\r\n    const {\r\n      gameTicker, snakes, winners, ticks,\r\n    } = this.state;\r\n    const { game, gameFunc } = this.props;\r\n    clearInterval(gameTicker);\r\n    game.minigame.snakes = snakes;\r\n    game.minigame.winners = winners;\r\n    game.minigame.ticks = ticks;\r\n    game.phase = 'final_result';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  initControllerListener(snake) {\r\n    const { game } = this.props;\r\n    const snakeRef = fire.database().ref(`/games/${game.key}/minigame/snakes/${snake.id}`);\r\n    const that = this;\r\n    snakeRef.on('value', (snapshot) => {\r\n      const nextSnake = snapshot.val();\r\n      if (nextSnake && !that.state.isPaused) {\r\n        that.setState((state) => {\r\n          const snakes = [...state.snakes];\r\n          // kolla så att detta är okej sätt, blir snakes index alltid rätt kopplat till snake.id? ska jag fixa ett riktigt ID för att vara säker? alltså ett pushid\r\n          if (nextSnake.move) {\r\n            snakes[snake.id].moves.push(nextSnake.move);\r\n          }\r\n          return {\r\n            snakes,\r\n          };\r\n        });\r\n      } else {\r\n        console.log('move error');\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  isEndGame() {\r\n    const { snakes } = this.state;\r\n    const { game: { minigame: { gamemode, racetarget } } } = this.props;\r\n\r\n    // if survavalmode continue game if more than 1 snake is alive\r\n    // kolla performance på denna filter funktion jämfört med loopen under\r\n    if (gamemode === 'survival' && snakes.filter(s => !s.dead).length > 1) {\r\n      return;\r\n      /*\r\n      const l = snakes.length;\r\n      let alive = 0;\r\n      for (let i = 0; i < l; i++) {\r\n        if (!snakes[i].dead) {\r\n          alive += 1;\r\n        }\r\n        if (alive > 1) {\r\n          return;\r\n        }\r\n      }\r\n      */\r\n    }\r\n    // if race continue game if no one has reached racetarget\r\n    if (gamemode === 'race' && !snakes.some(s => s.body.length >= racetarget)) {\r\n      return;\r\n    }\r\n\r\n    // its gameover, lets find the winner/winners\r\n    let winners = [];\r\n    if (gamemode === 'survival') {\r\n      const alive = snakes.filter(s => !s.dead);\r\n      if (alive.length === 1) {\r\n        winners = alive;\r\n      } else {\r\n        const winner = snakes.reduce((prev, current) => ((prev.score > current.score) ? prev : current));\r\n        winners.push(winner);\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      winners = snakes.filter(s => s.body.length >= racetarget);\r\n    }\r\n    this.setState(() => ({\r\n      winners,\r\n      isPaused: true,\r\n      overlay: false,\r\n    }));\r\n\r\n    /*\r\n\r\n    if (gamemode === 'survival') {\r\n      if (snakes.length === 1 && snakes[0].dead) {\r\n        winners.push(snakes[0]);\r\n      } else {\r\n        for (let i = 0; i < l; i++) {\r\n          if (!snakes[i].dead) {\r\n            winners.push(snakes[i]);\r\n          }\r\n          // should not be possible as she check for this first thing in this function\r\n          // if (winners.length > 1) {\r\n          //  return;\r\n          // }\r\n        }\r\n        // om det inte finns någon levande alla så betyder det att de sista tog samtidigt. då vinner den som är längst av alla\r\n        if (winners.length === 0) {\r\n          let winnerIndex = 0;\r\n          let highestScore = 0;\r\n          for (let i = 0; i < l; i++) {\r\n            if (snakes[i].score > highestScore) {\r\n              winnerIndex = i;\r\n              highestScore = snakes[i].score;\r\n            }\r\n          }\r\n          winners.push(snakes[winnerIndex]);\r\n        }\r\n      }\r\n    } else if (gamemode === 'race') {\r\n      for (let i = 0; i < l; i++) {\r\n        if (snakes[i].body.length >= racetarget) {\r\n          winners.push(snakes[i]);\r\n        }\r\n      }\r\n    }\r\n    if (winners.length > 0) {\r\n      this.setState(() => ({\r\n        winners,\r\n        isPaused: true,\r\n        overlay: false,\r\n      }));\r\n    }\r\n    */\r\n  }\r\n\r\n  resetCanvas() {\r\n    const { settings } = this.state;\r\n    canvas.width = settings.canvas.width;\r\n    canvas.height = settings.canvas.height;\r\n\r\n    ctx.fillStyle = settings.canvas.background;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  generateSnakes() {\r\n    // i alla såna här dpelarspecifika metoder måste jag ta in vilken snake/player det gäller\r\n    const { snakes, foods, settings } = this.state;\r\n    const { game } = this.props;\r\n    const nextSnakes = [];\r\n    const teleportSnakes = !game.minigame.wallCollision;\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      // behöver jag göra en copy? spelar det någon roll?\r\n      const snake = snakes[i];\r\n      if (snake.respawning) {\r\n        if (Date.now() > snake.respawntime) {\r\n          snake.dead = false;\r\n          snake.respawning = false;\r\n        }\r\n        nextSnakes.push(snake);\r\n        continue;\r\n      } else if (snake.dead) {\r\n        if (game.minigame.gamemode === 'survival') {\r\n          snake.body = [];\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        } else if (game.minigame.gamemode === 'race') {\r\n          const xMax = settings.canvas.width - gridSize;\r\n          const yMax = settings.canvas.height - gridSize;\r\n          const startPos = minigameUtil.getRandomCanvasPositionMargin(yMax, xMax);\r\n          snake.body = [{\r\n            x: startPos.x,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - gridSize,\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 2),\r\n            y: startPos.y,\r\n          }, {\r\n            x: startPos.x - (gridSize * 3),\r\n            y: startPos.y,\r\n          }];\r\n          snake.direction = 'right';\r\n          snake.respawning = true;\r\n          snake.respawntime = Date.now() + (settings.snake.respawntime * 1000);\r\n          nextSnakes.push(snake);\r\n          continue;\r\n        }\r\n      }\r\n      // testa denna perfomance mot tidigare switch. ngåon skillnad? kan tänka mig att denna är lite långsammare då jag måste definera alla 4directions varje gång\r\n      const movement = {\r\n        up: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y === 0) ? canvas.height - gridSize : snake.body[0].y - gridSize,\r\n        },\r\n        down: {\r\n          x: snake.body[0].x,\r\n          y: teleportSnakes && (snake.body[0].y >= canvas.height - gridSize) ? 0 : snake.body[0].y + gridSize,\r\n        },\r\n        right: {\r\n          x: teleportSnakes && (snake.body[0].x >= canvas.width - gridSize) ? 0 : snake.body[0].x + gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n        left: {\r\n          x: teleportSnakes && (snake.body[0].x === 0) ? canvas.width - gridSize : snake.body[0].x - gridSize,\r\n          y: snake.body[0].y,\r\n        },\r\n      };\r\n      const nextMove = snake.moves.shift();\r\n      if (!minigameUtil.isInvalidMove(nextMove, snake.direction)) {\r\n        snake.direction = nextMove;\r\n      }\r\n\r\n      // The snake moves by adding a piece to the beginning \"this.snake.unshift(coordinate)\" and removing the last piece \"this.snake.pop()\"\r\n      // Except when it eats the food in which case there is no need to remove a piece and the added piece will make it grow\r\n      const coordinate = movement[snake.direction];\r\n      snake.body.unshift(coordinate);\r\n\r\n      const collidedFood = foods.find(f => f.active && snake.body[0].x === f.x && snake.body[0].y === f.y);\r\n\r\n      if (collidedFood) {\r\n        snake.score += 10;\r\n        collidedFood.active = false;\r\n      } else {\r\n        snake.body.pop();\r\n      }\r\n      nextSnakes.push(snake);\r\n    }\r\n    this.setState(state => ({\r\n      snakes: nextSnakes,\r\n      foods,\r\n      ticks: state.ticks + 1,\r\n    }));\r\n    // kan det inte blir problem här? litar jag på att state.snakes hunnit updateras innan de ritas ut? ska jag inte skicka in det? drawSnakes(nextSNakes)\r\n    // och sen updaterar jag state efteråt?\r\n    this.drawSnakes(nextSnakes);\r\n  }\r\n\r\n  drawSnakes(nextSnakes) {\r\n    const { settings, ticks } = this.state;\r\n    ctx.globalCompositeOperation = 'multiply';\r\n    ctx.strokestyle = settings.snake.border;\r\n    for (let i = 0, len = nextSnakes.length; i < len; i++) {\r\n      const snake = nextSnakes[i];\r\n      if (snake.respawning && ticks % 2 === 0) {\r\n        ctx.fillStyle = settings.canvas.background;\r\n      } else {\r\n        ctx.fillStyle = snake.color;\r\n      }\r\n      // Draw each piece\r\n\r\n      // om två snakes är över varandra så finns en schysst style för det som han gick igenom på öredev. där färgerna från båda kan blandas till en ljusare eller mörkar.\r\n      for (let j = 0, len2 = snake.body.length; j < len2; j++) {\r\n        const bodyPos = snake.body[j];\r\n        ctx.fillRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n        ctx.strokeRect(bodyPos.x, bodyPos.y, gridSize, gridSize);\r\n      }\r\n\r\n\r\n      // this.game.direction = this.game.nextDirection;\r\n    }\r\n    /*\r\n        jag kör rakt av på direction, verkar fungera och snabbare response då? om jag vill ha tillbaka nextdirection så ta fram denna metod och sätt i snakeListenern att den ska sätta nextDirection\r\n        this.setState(function (state, props) {\r\n            let snakes = state.snakes;\r\n            for (let i = 0; i < snakes.length; i++) {\r\n                snakes[i].direction = snakes[i].nextDirection;\r\n            }\r\n            return {\r\n                snakes: snakes,\r\n            };\r\n        });\r\n        */\r\n  }\r\n\r\n  generateFoods() {\r\n    const { foods } = this.state;\r\n    // fungerar detta? const och ingen kopia? blir det updaterat? risk att allt blir object istället för arrays? cost [foods] = this.state?\r\n    // const nextFoods = [...foods ];\r\n    for (let i = 0, len = foods.length; i < len; i++) {\r\n      let food = foods[i];\r\n      if (!food.active) {\r\n        food = this.generateFood();\r\n      }\r\n      this.drawFood(food);\r\n      foods[i] = food;\r\n    }\r\n    this.setState(() => ({\r\n      foods,\r\n    }));\r\n  }\r\n\r\n  generateFood() {\r\n    const { snakes, settings } = this.state;\r\n\r\n    const xMax = settings.canvas.width - gridSize;\r\n    const yMax = settings.canvas.height - gridSize;\r\n\r\n    const x = Math.round((Math.random() * xMax) / gridSize) * gridSize;\r\n    const y = Math.round((Math.random() * yMax) / gridSize) * gridSize;\r\n    /*\r\n    for (let i = 0, len = snakes.length; i < len; i++) {\r\n      const snake = snakes[i];\r\n      const collision = snake.body.some(b => b.x === x && b.y === y);\r\n      if (collision) {\r\n        return this.generateFood();\r\n      }\r\n    }\r\n    */\r\n    // fungerar denna tro?\r\n    const collision = snakes.some(s => s.body.some(b => b.x === x && b.y === y));\r\n    if (collision) {\r\n      return this.generateFood();\r\n    }\r\n    return {\r\n      active: true,\r\n      x,\r\n      y,\r\n    };\r\n  }\r\n\r\n  drawFood(food) {\r\n    const { settings } = this.state;\r\n    // denna metod kallas lite väl många gånger?? ioptimera?\r\n    ctx.fillStyle = settings.food.background;\r\n    ctx.strokestyle = settings.food.border;\r\n\r\n    ctx.fillRect(food.x, food.y, gridSize, gridSize);\r\n    ctx.strokeRect(food.x, food.y, gridSize, gridSize);\r\n  }\r\n\r\n  detectCollisions() {\r\n    // bryt ut de olika detectcollision till purecfunctions? optiering viktigt\r\n    // ha olika modes för krock med motståndare\r\n    // 2. krock med motståndare så händer inget\r\n    // 3. krock med motståndare så äts motståndaren upp (head-on-head så dör båda)\r\n    // 4. korck med motståndare så dör man\r\n    // modes krock med vägg:\r\n    // 1. man dör\r\n    // 2. man kommer ut på andra sidan\r\n    // vad händer om man får en selfcollision sammtidigt som någon får en opponentcollision i den?\r\n    // mode dö:\r\n    // när man dör så får man återställs man till liten mask\r\n    // när man dör så är man död för alltid\r\n\r\n    // Self collison\r\n    // It's impossible for the first 3 pieces of the snake to self collide so the loop starts at 4\r\n\r\n    // fixa en bättre metod för alla snakes senare\r\n\r\n    // fundra och test som det här är den mest effektiva lösningen? eller om jag gör några checks i onödan?\r\n    // jag vill nog bara göra en gemensam setState call efter den här loopen. så alla ändringar för t.ex. handleDeath\r\n    let { snakes } = this.state;\r\n    const { game: { minigame } } = this.props;\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      if (snakes[i].dead) {\r\n        continue;\r\n      }\r\n      if (minigameUtil.detectSelfCollision(snakes[i])) {\r\n        // vilken av dessa fungerar?\r\n        snakes[i].dead = true;\r\n        // snakes[i].dead = true;\r\n\r\n        // this.handleDeath(snake);\r\n      }\r\n      if (minigame.wallCollision && minigameUtil.detectWallCollision(snakes[i].body[0], canvas.height, canvas.width)) {\r\n        snakes[i].dead = true;\r\n      }\r\n    }\r\n\r\n    if (minigame.opponentCollision) {\r\n      // här inne så ändrar jag om i snakes genom att döda dem som ska dödas och klyver om det ska klyvas osv. det som returneras ska vara korrekta snakes\r\n      snakes = minigameUtil.detectOpponentCollision(snakes, minigame.eatOpponents);\r\n    }\r\n    this.setState(() => ({\r\n      snakes,\r\n    }));\r\n  }\r\n\r\n  renderOverlay() {\r\n    const { ticks, snakes, winners } = this.state;\r\n    const { game } = this.props;\r\n    this.setState(() => ({\r\n      overlay: true,\r\n    }));\r\n    ctx.globalAlpha = 0.4;\r\n    ctx.textAlign = 'center';\r\n    ctx.font = '100px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    if (ticks === 1) {\r\n      ctx.fillText('Click to start', canvas.width / 2, canvas.height / 2);\r\n    } else if (winners.length > 0) {\r\n      ctx.fillText('Game over', canvas.width / 2, canvas.height / 2);\r\n    } else {\r\n      ctx.fillText('Paused', canvas.width / 2, canvas.height / 2);\r\n    }\r\n    ctx.globalAlpha = 1;\r\n    ctx.font = '20px roboto';\r\n\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const snake = snakes[i];\r\n      if (!snake.body[0]) {\r\n        continue;\r\n      }\r\n      let headX = Math.max(gridSize, snake.body[0].x);\r\n      let headY = Math.max(gridSize, snake.body[0].y);\r\n      if (headX >= canvas.width) {\r\n        headX = canvas.width - (gridSize * 2);\r\n      }\r\n      if (headY >= canvas.height) {\r\n        headY = canvas.height - (gridSize * 2);\r\n      }\r\n      const snakeName = snake.playerKeys.length === 1 ? game.players[snake.playerKeys[0]].name : snake.name;\r\n      ctx.fillStyle = snake.color;\r\n\r\n      const namePosition = {\r\n        right: { textAlign: 'center', yPos: headY - (gridSize / 5) },\r\n        left: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        up: { textAlign: 'start', yPos: headY - (gridSize / 5) },\r\n        down: { textAlign: 'start', yPos: headY + (gridSize * 2) },\r\n      };\r\n      ctx.textAlign = namePosition[snake.direction].textAlign;\r\n      ctx.fillText(snakeName, headX, namePosition[snake.direction].yPos);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\" id=\"snakeboard\" role=\"button\" tabIndex={0} onClick={this.togglePausGame} onKeyDown={this.togglePausGame}>\r\n        <canvas />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnake.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default Snake;\r\n","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport PropTypes from 'prop-types';\r\nimport { parseDOM, parseDOMArray } from '../../common/utils/appUtil';\r\n\r\n\r\nclass GenerateQuizForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      nrOfQuestions: '10',\r\n      category: '0',\r\n      difficulty: '0',\r\n      aType: '0',\r\n\r\n    };\r\n    this.generateQuestions = this.generateQuestions.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  generateQuestions() {\r\n    const {\r\n      nrOfQuestions, category, difficulty, aType,\r\n    } = this.state;\r\n    const { addQuestions, showSnackbar } = this.props;\r\n    let url = 'https://opentdb.com/api.php?';\r\n    if (nrOfQuestions !== '0') {\r\n      url += `amount=${nrOfQuestions}`;\r\n    }\r\n    if (category !== '0') {\r\n      url += `&category=${category}`;\r\n    }\r\n    if (difficulty !== '0') {\r\n      url += `&difficulty=${difficulty}`;\r\n    }\r\n    if (aType !== '0') {\r\n      url += `&type=${aType}`;\r\n    }\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then((generated) => {\r\n        if (generated.response_code === 0) {\r\n          const questions = [];\r\n          for (let i = 0; i < generated.results.length; i++) {\r\n            const generatedQuestion = generated.results[i];\r\n            const question = {\r\n              question: parseDOM(generatedQuestion.question),\r\n              correctAnswers: [parseDOM(generatedQuestion.correct_answer)],\r\n              wrongAnswers: parseDOMArray(generatedQuestion.incorrect_answers),\r\n              qType: 'text',\r\n              aType: generatedQuestion.type,\r\n              category: generatedQuestion.category,\r\n              difficulty: generatedQuestion.difficulty,\r\n            };\r\n            questions.push(question);\r\n          }\r\n          addQuestions(questions);\r\n        } else {\r\n          const snack = {\r\n            variant: 'error',\r\n            message: `Could not generate questions( code: ${generated.response_code})`,\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      nrOfQuestions, category, difficulty, aType,\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                label=\"Number of questions\"\r\n                name=\"nrOfQuestions\"\r\n                value={nrOfQuestions}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('nrOfQuestions')}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"category\">Category</InputLabel>\r\n              <Select\r\n                value={category || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"category\"\r\n                inputProps={{\r\n                  id: 'category',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any category</MenuItem>\r\n                <MenuItem value=\"9\">General Knowledge</MenuItem>\r\n                <MenuItem value=\"10\">Entertainment: Books</MenuItem>\r\n                <MenuItem value=\"11\">Entertainment: Film</MenuItem>\r\n                <MenuItem value=\"12\">Entertainment: Music</MenuItem>\r\n                <MenuItem value=\"13\">Entertainment: Musicals and Theatres</MenuItem>\r\n                <MenuItem value=\"14\">Entertainment: Television</MenuItem>\r\n                <MenuItem value=\"15\">Entertainment: Video Games</MenuItem>\r\n                <MenuItem value=\"16\">Entertainment: Board Games</MenuItem>\r\n                <MenuItem value=\"17\">Science and Nature</MenuItem>\r\n                <MenuItem value=\"18\">Science: Computers</MenuItem>\r\n                <MenuItem value=\"19\">Science: Mathematics</MenuItem>\r\n                <MenuItem value=\"20\">Mythology</MenuItem>\r\n                <MenuItem value=\"21\">Sports</MenuItem>\r\n                <MenuItem value=\"22\">Geography</MenuItem>\r\n                <MenuItem value=\"23\">History</MenuItem>\r\n                <MenuItem value=\"24\">Politics</MenuItem>\r\n                <MenuItem value=\"25\">Art</MenuItem>\r\n                <MenuItem value=\"26\">Celebrities</MenuItem>\r\n                <MenuItem value=\"27\">Animals</MenuItem>\r\n                <MenuItem value=\"28\">Vehicles</MenuItem>\r\n                <MenuItem value=\"29\">Entertainment: Comics</MenuItem>\r\n                <MenuItem value=\"30\">Science: Gadgets</MenuItem>\r\n                <MenuItem value=\"31\">Entertainment: Japanese Anime and Manga</MenuItem>\r\n                <MenuItem value=\"32\">Entertainment: Cartoon and Animations</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"difficulty\">Difficulty</InputLabel>\r\n              <Select\r\n                value={difficulty || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"difficulty\"\r\n                inputProps={{\r\n                  id: 'difficulty',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any difficulty</MenuItem>\r\n                <MenuItem value=\"easy\">Easy</MenuItem>\r\n                <MenuItem value=\"medium\">Medium</MenuItem>\r\n                <MenuItem value=\"hard\">Hard</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel htmlFor=\"aType\">Answer type</InputLabel>\r\n              <Select\r\n                value={aType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"aType\"\r\n                inputProps={{\r\n                  id: 'aType',\r\n                }}\r\n              >\r\n                <MenuItem value=\"0\">Any type</MenuItem>\r\n                <MenuItem value=\"multiple\">Multiple choice</MenuItem>\r\n                <MenuItem value=\"boolean\">True/False</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n\r\n            <Button onClick={this.generateQuestions} variant=\"contained\">Generate</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGenerateQuizForm.propTypes = {\r\n  addQuestions: PropTypes.func.isRequired,\r\n  showSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default GenerateQuizForm;\r\n","import React, { Component } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport PropTypes from 'prop-types';\r\nimport GenerateQuizForm from './GenerateQuizForm';\r\n\r\nclass QuestionForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: '',\r\n      correctAnswer: '',\r\n      wrongAnswerOne: '',\r\n      wrongAnswerTwo: '',\r\n      wrongAnswerThree: '',\r\n      timelimit: '10',\r\n      qType: 'text',\r\n      aType: 'multiple',\r\n      generateQuestions: true,\r\n\r\n    };\r\n    this.sendQuestion = this.sendQuestion.bind(this);\r\n    this.toggleGenerateQuestion = this.toggleGenerateQuestion.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleTrueFalse = (event) => {\r\n    const answer = event.target.value;\r\n    this.setState({\r\n      correctAnswer: answer,\r\n      wrongAnswerOne: answer === 'true' ? 'false' : 'true',\r\n    });\r\n  };\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  sendQuestion() {\r\n    const {\r\n      question, correctAnswer, wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree, timelimit, qType, aType,\r\n    } = this.state;\r\n    const { addQuestion } = this.props;\r\n    const q = {\r\n      question,\r\n      correctAnswers: [correctAnswer],\r\n      wrongAnswers: [wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree],\r\n      timelimit,\r\n      qType,\r\n      aType,\r\n    };\r\n    this.setState({\r\n      question: '',\r\n      correctAnswer: '',\r\n      wrongAnswerOne: '',\r\n      wrongAnswerTwo: '',\r\n      wrongAnswerThree: '',\r\n    });\r\n    addQuestion(q);\r\n  }\r\n\r\n  toggleGenerateQuestion() {\r\n    const { generateQuestions } = this.state;\r\n    this.setState({\r\n      generateQuestions: !generateQuestions,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      question, correctAnswer, wrongAnswerOne, wrongAnswerTwo, wrongAnswerThree, timelimit, qType, aType, generateQuestions,\r\n    } = this.state;\r\n    const { addQuestions, showSnackbar, isTimelimit } = this.props;\r\n    if (generateQuestions) {\r\n      return (\r\n        <div>\r\n          <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Custom questions</Button>\r\n          <Button onClick={this.toggleGenerateQuestion} disabled variant=\"contained\">Auto generate questions</Button>\r\n          <GenerateQuizForm addQuestions={addQuestions} showSnackbar={showSnackbar} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Button onClick={this.toggleGenerateQuestion} disabled variant=\"contained\">Custom questions</Button>\r\n            <Button onClick={this.toggleGenerateQuestion} variant=\"contained\">Auto generate questions</Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <FormControl required fullWidth>\r\n              <InputLabel htmlFor=\"qtype-required\">Question type</InputLabel>\r\n              <Select\r\n                value={qType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"qType\"\r\n                inputProps={{\r\n                  id: 'qtype-required',\r\n                }}\r\n              >\r\n                <MenuItem value=\"text\">Text</MenuItem>\r\n                <MenuItem value=\"image\">Image</MenuItem>\r\n                <MenuItem value=\"video\">Video</MenuItem>\r\n\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <FormControl required fullWidth>\r\n              <InputLabel htmlFor=\"aType-required\">Answer type</InputLabel>\r\n              <Select\r\n                value={aType || ''}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"aType\"\r\n                inputProps={{\r\n                  id: 'aType-required',\r\n                }}\r\n              >\r\n                <MenuItem value=\"boolean\">True/false</MenuItem>\r\n                <MenuItem value=\"player\">Player</MenuItem>\r\n                <MenuItem value=\"multiple\">Mulitichoice</MenuItem>\r\n                <MenuItem value=\"free\">Free text</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                label=\"Question\"\r\n                name=\"question\"\r\n                value={question}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('question')}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          {aType === 'multiple'\r\n                        && (\r\n                        <Grid container>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Correct answer\"\r\n                                name=\"correctAnswer\"\r\n                                margin=\"normal\"\r\n                                value={correctAnswer}\r\n                                onChange={this.handleChange('correctAnswer')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerOne\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerOne}\r\n                                onChange={this.handleChange('wrongAnswerOne')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerTwo\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerTwo}\r\n                                onChange={this.handleChange('wrongAnswerTwo')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} md={6}>\r\n\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Wrong answer\"\r\n                                name=\"wrongAnswerThree\"\r\n                                margin=\"normal\"\r\n                                value={wrongAnswerThree}\r\n                                onChange={this.handleChange('wrongAnswerThree')}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </Grid>\r\n                        )\r\n                    }\r\n          {aType === 'boolean'\r\n                        && (\r\n                        <div>\r\n                          <Grid item xs={12}>\r\n\r\n                            <FormControl component=\"fieldset\">\r\n                              <FormLabel component=\"legend\">Answer</FormLabel>\r\n                              <RadioGroup\r\n                                aria-label=\"answer\"\r\n                                name=\"correctAnswer\"\r\n                                value={correctAnswer}\r\n                                onChange={this.handleTrueFalse}\r\n                              >\r\n                                <FormControlLabel value=\"true\" control={<Radio />} label=\"True\" />\r\n                                <FormControlLabel value=\"false\" control={<Radio />} label=\"False\" />\r\n                              </RadioGroup>\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </div>\r\n                        )\r\n                    }\r\n          {isTimelimit\r\n                        && (\r\n                        <Grid item xs={12}>\r\n\r\n                          <FormControl>\r\n                            <TextField\r\n                              label=\"Time limit\"\r\n                              name=\"timelimit\"\r\n                              type=\"number\"\r\n                              value={timelimit}\r\n                              margin=\"normal\"\r\n                              onChange={this.handleChange('timelimit')}\r\n                            />\r\n                          </FormControl>\r\n                        </Grid>\r\n                        )\r\n                    }\r\n          <Grid item xs={12}>\r\n            <Button onClick={this.sendQuestion} variant=\"contained\">Add question</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nQuestionForm.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  addQuestion: PropTypes.func.isRequired,\r\n  addQuestions: PropTypes.func.isRequired,\r\n  isTimelimit: PropTypes.bool.isRequired,\r\n};\r\nexport default QuestionForm;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Typography } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport PropTypes from 'prop-types';\r\nimport Question from './Question';\r\nimport QuestionForm from './QuestionForm';\r\nimport { calculateDefaultTimeLimit } from '../../common/utils/appUtil';\r\n\r\n\r\nclass CreateQuiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'quiz',\r\n      gamemode: 'normal',\r\n      timelimit: true,\r\n      timescore: false,\r\n      questions: [],\r\n      gamePass: '',\r\n    };\r\n    this.addQuestion = this.addQuestion.bind(this);\r\n    this.addQuestions = this.addQuestions.bind(this);\r\n    this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    this.createQuiz = this.createQuiz.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    addQuestion(q) {\r\n      const { questions, timelimit } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      const question = q;\r\n      if (questions.length === 0) {\r\n        question.id = 1;\r\n      } else {\r\n        // räknar ut ett id som det nuvarande högsta id+1. Kan då använda id både som unik identifierare och som index\r\n        question.id = Math.max(...questions.map(o => o.id)) + 1;\r\n      }\r\n      if (timelimit && !question.timelimit) {\r\n        question.timelimit = calculateDefaultTimeLimit(question);\r\n      }\r\n      questions.push(question);\r\n      this.setState({\r\n        questions,\r\n      });\r\n      const snack = {\r\n        variant: 'success',\r\n        message: 'Added question',\r\n      };\r\n      showSnackbar(snack);\r\n    }\r\n\r\n    addQuestions(qs) {\r\n      const { questions, timelimit } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      for (let i = 0; i < qs.length; i++) {\r\n        const question = qs[i];\r\n        if (questions.length === 0) {\r\n          question.id = 1;\r\n        } else {\r\n          question.id = Math.max(...questions.map(o => o.id)) + 1;\r\n        }\r\n        if (timelimit && !question.timelimit) {\r\n          question.timelimit = calculateDefaultTimeLimit(question);\r\n        }\r\n        questions.push(question);\r\n      }\r\n      this.setState({\r\n        questions,\r\n      });\r\n      const snack = {\r\n        variant: 'success',\r\n        message: 'Added questions',\r\n      };\r\n      showSnackbar(snack);\r\n    }\r\n\r\n    deleteQuestion(question) {\r\n      const { questions } = this.state;\r\n      const index = questions.map(e => e.id).indexOf(question.id);\r\n      questions.splice(index, 1);\r\n      this.setState({\r\n        questions,\r\n      });\r\n    }\r\n\r\n    createQuiz() {\r\n      const { createQuiz } = this.props;\r\n      const {\r\n        timelimit, gamePass, gametype, title, timescore, questions,\r\n      } = this.state;\r\n      const game = {\r\n        password: gamePass,\r\n        gametype,\r\n        tile: title,\r\n        quiz: {\r\n          gamemode: 'normal',\r\n          timelimit,\r\n          timescore,\r\n          questions,\r\n        },\r\n      };\r\n      createQuiz(game);\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        timelimit, gamePass, title, timescore, gamemode, questions,\r\n      } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={8}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h4\">New quiz</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <form autoComplete=\"off\">\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl required fullWidth>\r\n                    <InputLabel htmlFor=\"gametype-required\">Gamemode</InputLabel>\r\n                    <Select\r\n                      value={gamemode || ''}\r\n                      onChange={this.handleChangeSelect}\r\n                      name=\"gamemode\"\r\n                      inputProps={{\r\n                        id: 'gamemode-required',\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"normal\">Normal</MenuItem>\r\n                      <MenuItem value=\"wild\">Wild</MenuItem>\r\n\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Game options</FormLabel>\r\n                    <FormGroup>\r\n                      <FormControlLabel\r\n                        control={(\r\n                          <Switch\r\n                            checked={timelimit}\r\n                            onChange={this.handleChangeBool('timelimit')}\r\n                            value=\"timelimit\"\r\n                          />\r\n)}\r\n                        label=\"Time limited questions\"\r\n                      />\r\n                      <FormControlLabel\r\n                        control={(\r\n                          <Switch\r\n                            checked={timescore}\r\n                            onChange={this.handleChangeBool('timescore')}\r\n                            value=\"timescore\"\r\n                          />\r\n)}\r\n                        label=\"Time based score\"\r\n                      />\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n\r\n                  <FormControl>\r\n                    <TextField\r\n                      label=\"Title\"\r\n                      name=\"title\"\r\n                      value={title}\r\n                      margin=\"normal\"\r\n                      onChange={this.handleChange('title')}\r\n                    />\r\n                  </FormControl>\r\n                  <FormControl>\r\n                    <TextField\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      name=\"gamePass\"\r\n                      margin=\"normal\"\r\n                      value={gamePass}\r\n                      onChange={this.handleChange('gamePass')}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Button onClick={this.createQuiz} variant=\"contained\">Create quiz</Button>\r\n                </Grid>\r\n              </form>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <QuestionForm addQuestions={this.addQuestions} addQuestion={this.addQuestion} isTimelimit={!!timelimit} showSnackbar={showSnackbar} />\r\n            </Grid>\r\n            <Grid container>\r\n              {questions.map((question, index) => (\r\n                <Grid item xs={12} md={6} key={question.id}>\r\n                  <Question question={question} transitionDelay={index} deleteQuestion={this.deleteQuestion} />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateQuiz.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  createQuiz: PropTypes.func.isRequired,\r\n};\r\nexport default CreateQuiz;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nclass CreateTetris extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'tetris',\r\n      gamemode: 'survival',\r\n      password: '',\r\n    };\r\n\r\n    this.validateGame = this.validateGame.bind(this);\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    render() {\r\n      const {\r\n        password, title, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={8}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={4}>\r\n                <FormControl required>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"survival\">Survival</MenuItem>\r\n                    <MenuItem value=\"race\">Race</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateTetris.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateTetris;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass CreateGolf extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'golf',\r\n      holes: 18,\r\n      opponentCollision: false,\r\n      password: '',\r\n      gamemode: 'classic',\r\n      difficulty: '300',\r\n    };\r\n\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode, holes,\r\n        opponentCollision, difficulty,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n        opponentCollision,\r\n        holes,\r\n        difficulty,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    /*\r\n    validateGame(game) {\r\n      // validera lösenord är tillräckligt starkt här\r\n      //eller direkt efter input om det finns någon smart lösning.\r\n      // kolla på gametype hur ha en secifik validering för varje type\r\n      return true;\r\n    }\r\n\r\n    clearForm() {\r\n\r\n    }\r\n*/\r\n    render() {\r\n      const {\r\n        password, title, gamemode,\r\n        opponentCollision, holes, difficulty,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={24}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\">New Golf game</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"classic\">Classic</MenuItem>\r\n                    <MenuItem value=\"wild\">Wild</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                  <Select\r\n                    value={difficulty || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"difficulty\"\r\n                    inputProps={{\r\n                      id: 'difficulty-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"500\">Easy</MenuItem>\r\n                    <MenuItem value=\"300\">Medium</MenuItem>\r\n                    <MenuItem value=\"100\">Hard</MenuItem>\r\n                    <MenuItem value=\"75\">Pro</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                {gamemode === 'classic'\r\n                                && (\r\n                                <FormControl>\r\n                                  <TextField\r\n                                    label=\"Holes to play\"\r\n                                    name=\"holes\"\r\n                                    type=\"number\"\r\n                                    value={holes}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('holes')}\r\n                                  />\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision}\r\n                        onChange={this.handleChangeBool('opponentCollision')}\r\n                        value=\"opponentCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Opponent collisions\"\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateGolf.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateGolf;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass CreateSnake extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      gametype: 'snake',\r\n      gamemode: 'survival',\r\n      racetarget: 20,\r\n      opponentCollision: false,\r\n      eatOpponents: false,\r\n      wallCollision: true,\r\n      password: '',\r\n      difficulty: '300',\r\n    };\r\n\r\n    this.createGame = this.createGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    createGame() {\r\n      const { createGame } = this.props;\r\n      const {\r\n        password, gametype, title, gamemode, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty,\r\n      } = this.state;\r\n      const minigame = {\r\n        gamemode,\r\n        wallCollision,\r\n        eatOpponents,\r\n        opponentCollision,\r\n        racetarget,\r\n        difficulty,\r\n      };\r\n      const game = {\r\n        password,\r\n        gametype,\r\n        title,\r\n        minigame,\r\n      };\r\n      createGame(game);\r\n    }\r\n\r\n    /*\r\n    validateGame(game) {\r\n      // validera lösenord är tillräckligt starkt här\r\n      //eller direkt efter input om det finns någon smart lösning.\r\n      // kolla på gametype hur ha en secifik validering för varje type\r\n      return true;\r\n    }\r\n\r\n    clearForm() {\r\n\r\n    }\r\n*/\r\n    render() {\r\n      const {\r\n        password, title, gamemode, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          <Grid container spacing={24}>\r\n            <form autoComplete=\"off\">\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h4\">New Snake game</Typography>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                  <Select\r\n                    value={gamemode || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"gamemode\"\r\n                    inputProps={{\r\n                      id: 'gamemode-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"survival\">Survival</MenuItem>\r\n                    <MenuItem value=\"race\">Race</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl required fullWidth>\r\n                  <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                  <Select\r\n                    value={difficulty || ''}\r\n                    fullWidth\r\n                    onChange={this.handleChangeSelect}\r\n                    name=\"difficulty\"\r\n                    inputProps={{\r\n                      id: 'difficulty-required',\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"500\">Easy</MenuItem>\r\n                    <MenuItem value=\"300\">Medium</MenuItem>\r\n                    <MenuItem value=\"100\">Hard</MenuItem>\r\n                    <MenuItem value=\"75\">Pro</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n\r\n                {gamemode === 'race'\r\n                                && (\r\n                                <FormControl>\r\n                                  <TextField\r\n                                    label=\"Snake length\"\r\n                                    name=\"racetarget\"\r\n                                    type=\"number\"\r\n                                    value={racetarget}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('racetarget')}\r\n                                  />\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={wallCollision}\r\n                        onChange={this.handleChangeBool('wallCollision')}\r\n                        value=\"wallCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Wall collisions\"\r\n                  />\r\n                </FormControl>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision}\r\n                        onChange={this.handleChangeBool('opponentCollision')}\r\n                        value=\"opponentCollision\"\r\n                      />\r\n                    )}\r\n                    label=\"Opponent collisions\"\r\n                  />\r\n                </FormControl>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormControlLabel\r\n                    control={(\r\n                      <Switch\r\n                        checked={opponentCollision && eatOpponents}\r\n                        disabled={!opponentCollision}\r\n                        onChange={this.handleChangeBool('eatOpponents')}\r\n                        value=\"eatOpponents\"\r\n                      />\r\n                    )}\r\n                    label=\"Eat opponent on collision\"\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    value={title}\r\n                    margin=\"normal\"\r\n                    onChange={this.handleChange('title')}\r\n                  />\r\n                </FormControl>\r\n                <FormControl>\r\n                  <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    margin=\"normal\"\r\n                    value={password}\r\n                    onChange={this.handleChange('password')}\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Button onClick={this.createGame} variant=\"contained\">Create</Button>\r\n              </Grid>\r\n            </form>\r\n\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateSnake.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateSnake;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Typography, Card,\r\n} from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CreateTetris from './CreateTetris';\r\nimport CreateGolf from './CreateGolf';\r\nimport CreateSnake from './CreateSnake';\r\n\r\nclass CreateMinigame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gametype: '',\r\n    };\r\n  }\r\n\r\n    setGameType = name => (event) => {\r\n      this.setState({ gametype: name });\r\n    };\r\n\r\n    render() {\r\n      const { createGame } = this.props;\r\n      const { gametype } = this.state;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          {!gametype && (\r\n\r\n          <Grid container spacing={24}>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('snake')}>\r\n                <CardHeader title=\"Snake\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a classic game of snake or change the modes to fit your audience</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('tetris')}>\r\n                <CardHeader title=\"Tetris\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Game is not available yet</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('golf')}>\r\n                <CardHeader title=\"Golf\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a multiplayer golf simulation game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          )}\r\n          {gametype === 'snake' && <CreateSnake createGame={createGame} />}\r\n          {gametype === 'tetris' && <CreateTetris createGame={createGame} />}\r\n          {gametype === 'golf' && <CreateGolf createGame={createGame} />}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreateMinigame.propTypes = {\r\n  createGame: PropTypes.func.isRequired,\r\n};\r\nexport default CreateMinigame;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography, Card } from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport CreateQuiz from '../quiz/create/CreateQuiz';\r\nimport { fire } from '../../base';\r\nimport CreateMinigame from '../minigame/create/CreateMinigame';\r\nimport { generateGameId } from '../common/utils/appUtil';\r\n\r\nclass Create extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gametype: '',\r\n      gameId: '',\r\n    };\r\n    this.createGame = this.createGame.bind(this);\r\n    // this.validateGame = this.validateGame.bind(this);\r\n  }\r\n\r\n    setGameType = name => () => {\r\n      this.setState({ gametype: name });\r\n    };\r\n\r\n    createGame(g) {\r\n      const game = g;\r\n      game.gameId = generateGameId();\r\n      game.created = Date.now();\r\n      game.status = 'CREATED';\r\n      game.phase = 'setup';\r\n\r\n      const that = this;\r\n      // game push få ett id.\r\n      const gameRef = fire.database().ref('/games').push();\r\n      game.key = gameRef.key;\r\n      gameRef.set(game, (error) => {\r\n        if (error) {\r\n          that.setState({\r\n            errorText: `Error: ${error}`,\r\n          });\r\n          const snack = {\r\n            variant: 'error',\r\n            message: 'Unexpected internal error',\r\n          };\r\n          that.props.showSnackbar(snack);\r\n        } else {\r\n          const snack = {\r\n            variant: 'success',\r\n            message: 'Successfully created!',\r\n          };\r\n          that.props.showSnackbar(snack);\r\n          that.setState({\r\n            gameId: game.gameId,\r\n            gametype: 'done',\r\n          });\r\n          localStorage.setItem('RecentGameId', game.gameId);\r\n\r\n          // show gameid and password\r\n          // show button to start game / navigate to host\r\n        }\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { gametype, gameId } = this.state;\r\n      const { showSnackbar } = this.props;\r\n      return (\r\n        <div className=\"app-page create-page\">\r\n          {!gametype && (\r\n          <Grid container spacing={24}>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('quiz')}>\r\n                <CardHeader title=\"Quiz\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create your own quiz or generate one fast and easy</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('minigame')}>\r\n                <CardHeader title=\"Mini Game\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a game to play just for fun or team building purposes</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('survey')}>\r\n                <CardHeader title=\"Survey\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Survey your audience</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Card className=\"card-button\" onClick={this.setGameType('discussion')}>\r\n                <CardHeader title=\"Discussion\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a discussion on a sppecified topic</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          )}\r\n          {gametype === 'quiz' && <CreateQuiz createQuiz={this.createGame} showSnackbar={showSnackbar} />}\r\n          {gametype === 'minigame' && <CreateMinigame createGame={this.createGame} showSnackbar={showSnackbar} />}\r\n          {gametype === 'done'\r\n                    && (\r\n                    <div>\r\n                      <Typography variant=\"h2\">\r\n                        <span>Created game PIN: </span>\r\n                        {' '}\r\n                        <span className=\"dynamic-text\">{gameId}</span>\r\n                      </Typography>\r\n                      <Link to=\"/host\">Host game</Link>\r\n                    </div>\r\n                    )\r\n                }\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCreate.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default Create;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Switch from '@material-ui/core/Switch';\r\nclass PhaseSetup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            surveyPlayers: false,\r\n            answerStreak: true,\r\n            nameGenerator: false,\r\n            remoteMode: false,\r\n            useTeams: false,\r\n            randomizeQuestionOrder: false,\r\n            autoPlayQuestions: false,\r\n\r\n        };\r\n        this.startGame = this.startGame.bind(this);\r\n        this.createTeamGame = this.createTeamGame.bind(this);\r\n        this.createClassicGame = this.createClassicGame.bind(this);\r\n\r\n\r\n    }\r\n    handleChangeBool = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    createTeamGame() {\r\n        this.startGame(true);\r\n    }\r\n    createClassicGame() {\r\n        this.startGame(false);\r\n    }\r\n    startGame(teamMode) {\r\n        let game = {};\r\n        let quiz = this.props.game.quiz;\r\n        quiz.surveyPlayers = this.state.surveyPlayers;\r\n        quiz.answerStreak = this.state.answerStreak;\r\n        quiz.nameGenerator = this.state.nameGenerator;\r\n        quiz.remoteMode = this.state.remoteMode;\r\n        quiz.useTeams = teamMode;\r\n        quiz.autoPlayQuestions = this.state.autoPlayQuestions;\r\n        quiz.randomizeQuestionOrder = this.state.randomizeQuestionOrder;\r\n        quiz.currentQuestion = 0;\r\n\r\n        game.quiz = quiz;\r\n        game.phase = \"connection\";\r\n        game.status = \"IN_PROGRESS\";\r\n        this.props.gameFunc.update(game);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h4\">Game Settings</Typography>\r\n                <Button onClick={this.createClassicGame} variant=\"contained\">Classic</Button>\r\n                <Button onClick={this.createTeamGame} variant=\"contained\">Team mode</Button>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.nameGenerator}\r\n                                    onChange={this.handleChangeBool('nameGenerator')}\r\n                                    value=\"nameGenerator\"\r\n                                />\r\n                            }\r\n                            label=\"Generate names for players\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.remoteMode}\r\n                                    onChange={this.handleChangeBool('remoteMode')}\r\n                                    value=\"remoteMode\"\r\n                                />\r\n                            }\r\n                            label=\"Remote playmode\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.answerStreak}\r\n                                    onChange={this.handleChangeBool('answerStreak')}\r\n                                    value=\"answerStreak\"\r\n                                />\r\n                            }\r\n                            label=\"Use answer scorestreak\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.surveyPlayers}\r\n                                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                                    value=\"surveyPlayers\"\r\n                                />\r\n                            }\r\n                            label=\"Survey players after game\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.randomizeQuestionOrder}\r\n                                    onChange={this.handleChangeBool('randomizeQuestionOrder')}\r\n                                    value=\"randomizeQuestionOrder\"\r\n                                />\r\n                            }\r\n                            label=\"Randomize question order\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.state.autoPlayQuestions}\r\n                                    onChange={this.handleChangeBool('autoPlayQuestions')}\r\n                                    value=\"autoPlayQuestions\"\r\n                                />\r\n                            }\r\n                            label=\"Auto play questions\"\r\n                        />\r\n\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseSetup;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  nextPhase() {\r\n    this.props.gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  // add function to kick player\r\n  render() {\r\n    let players = this.props.game.players;\r\n    if (!players) {\r\n      players = [];\r\n    } else {\r\n      players = Object.values(players);\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">\r\n            <span>Join game at: </span>\r\n            <span className=\"dynamic-text\">mannfeldt.github.io/stagehoot</span>\r\n\r\n          </Typography>\r\n          <Typography variant=\"h2\">\r\n            <span>Enter game PIN: </span>\r\n            <span className=\"dynamic-text\">{this.props.game.gameId}</span>\r\n\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">{this.props.game.title}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            {players.map((player, index) => (\r\n              <Grid key={index} item xs={3}>\r\n                <Typography paragraph variant=\"body1\" className=\"dynamic-text\">{player.name}</Typography>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default PhaseConnection;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CountdownAnimation.scss';\r\n\r\nclass CountdownAnimation extends PureComponent {\r\n  // jag skulle kunna lägga en counter här som rendrerar null efter några sekunder\r\n  // så att är säkert att den inte hinner loopa\r\n  render() {\r\n    const { speed } = this.props;\r\n    if (speed === 'slow') {\r\n      return (\r\n        <div className=\"demo_slow\">\r\n          <div className=\"demo_slow__colored-blocks\">\r\n            <div className=\"demo_slow__colored-blocks-rotater\">\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n              <div className=\"demo_slow__colored-block\" />\r\n            </div>\r\n            <div className=\"demo_slow__colored-blocks-inner\" />\r\n            <div className=\"demo_slow__text\">Ready</div>\r\n          </div>\r\n          <div className=\"demo_slow__inner\">\r\n            <svg className=\"demo_slow__numbers\" viewBox=\"0 0 100 100\">\r\n              <defs>\r\n                <path className=\"demo_slow__num-path-1\" d=\"M40,28 55,22 55,78\" />\r\n                <path className=\"demo_slow__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\" />\r\n                <path className=\"demo_slow__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\" />\r\n                <path className=\"demo_slow__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\" />\r\n                <path className=\"demo_slow__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\" />\r\n              </defs>\r\n              <path\r\n                className=\"demo_slow__numbers-path\"\r\n                d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19\r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73\r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83\r\n          l0,-61 L40,28\"\r\n              />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"demo\">\r\n        <div className=\"demo__colored-blocks\">\r\n          <div className=\"demo__colored-blocks-rotater\">\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n            <div className=\"demo__colored-block\" />\r\n          </div>\r\n          <div className=\"demo__colored-blocks-inner\" />\r\n          <div className=\"demo__text\">Ready</div>\r\n        </div>\r\n        <div className=\"demo__inner\">\r\n          <svg className=\"demo__numbers\" viewBox=\"0 0 100 100\">\r\n            <defs>\r\n              <path className=\"demo__num-path-1\" d=\"M40,28 55,22 55,78\" />\r\n              <path className=\"demo__num-join-1-2\" d=\"M55,78 55,83 a17,17 0 1,0 34,0 a20,10 0 0,0 -20,-10\" />\r\n              <path className=\"demo__num-path-2\" d=\"M69,73 l-35,0 l30,-30 a16,16 0 0,0 -22.6,-22.6 l-7,7\" />\r\n              <path className=\"demo__num-join-2-3\" d=\"M28,69 Q25,44 34.4,27.4\" />\r\n              <path className=\"demo__num-path-3\" d=\"M30,20 60,20 40,50 a18,15 0 1,1 -12,19\" />\r\n            </defs>\r\n            <path\r\n              className=\"demo__numbers-path\"\r\n              d=\"M-10,20 60,20 40,50 a18,15 0 1,1 -12,19\r\n          Q25,44 34.4,27.4\r\n          l7,-7 a16,16 0 0,1 22.6,22.6 l-30,30 l35,0 L69,73\r\n          a20,10 0 0,1 20,10 a17,17 0 0,1 -34,0 L55,83\r\n          l0,-61 L40,28\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nCountdownAnimation.propTypes = {\r\n  speed: PropTypes.string.isRequired,\r\n};\r\nexport default CountdownAnimation;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"awaiting_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <Typography variant=\"h2\">Starting quiz</Typography>\r\n                <CountdownAnimation speed=\"slow\" />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            counter: this.startCounter(),\r\n        }\r\n        this.nextPhase = this.nextPhase.bind(this);\r\n    }\r\n    startCounter() {\r\n        let that = this;\r\n        let counter = 5;\r\n\r\n        let i = setInterval(function () {\r\n            counter--;\r\n            that.setState({ counter: counter });\r\n            if (counter === 0) {\r\n                that.nextPhase();\r\n                clearInterval(i);\r\n            }\r\n        }, 1000);\r\n        return 5;\r\n    }\r\n\r\n    nextPhase() {\r\n        this.props.gameFunc.update({ phase: \"show_question\" });\r\n    }\r\n    //på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n    //när timern är klar så updateras phase till nästa\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n            <Typography variant=\"h2\">Loading next question</Typography>\r\n                <CountdownAnimation speed=\"slow\"/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: '',\r\n    };\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question });\r\n    const phaseTime = 3000 + (question.question.length * 20);\r\n    setTimeout(this.nextPhase, phaseTime);\r\n  }\r\n\r\n  nextPhase() {\r\n    let answers = [];\r\n    if (this.state.question.aType === 'multiple') {\r\n      answers = this.state.question.wrongAnswers.concat(this.state.question.correctAnswers);\r\n      answers = this.shuffle(answers);\r\n    } else if (this.state.question.aType === 'boolean') {\r\n      answers = ['True', 'False'];\r\n    }\r\n    if (answers.length) {\r\n      const game = {};\r\n      game.phase = 'answer';\r\n      game.quiz = this.props.game.quiz;\r\n      game.quiz.questions[game.quiz.currentQuestion].answers = answers;\r\n      this.props.gameFunc.update(game);\r\n    } else {\r\n      this.props.gameFunc.update({ phase: 'answer' });\r\n    }\r\n  }\r\n\r\n  shuffle(array) {\r\n    let counter = array.length;\r\n    while (counter > 0) {\r\n      const index = Math.floor(Math.random() * counter);\r\n      counter--;\r\n      const temp = array[counter];\r\n      array[counter] = array[index];\r\n      array[index] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <div className=\"phase-container\">\r\n              <div className=\"quiz-top-section\">\r\n                  <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n\r\n                </div>\r\n              <div className=\"quiz-middle-section\" />\r\n              <div className=\"quiz-bottom-section\" />\r\n            </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseShowQuestion;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    paddingTop: theme.spacing.unit * 2,\r\n    paddingBottom: theme.spacing.unit * 2,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    height: '100%',\r\n  },\r\n  playAnswer: {\r\n    width: '50vw',\r\n    height: '100%',\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    float: 'left',\r\n    fontSize: '28',\r\n    color: 'white',\r\n    marginLeft: '10px',\r\n  },\r\n  answer: {\r\n    fontSize: 18,\r\n    fontWeight: 500,\r\n    color: 'white',\r\n  },\r\n});\r\n\r\nconst answerStyles = [{\r\n  icon: <CakeIcon />,\r\n  color: '#73c7d2',\r\n},\r\n{\r\n  icon: <ExtensionIcon />,\r\n  color: '#d78a8a',\r\n},\r\n{\r\n  icon: <FavoriteIcon />,\r\n  color: '#b984c2',\r\n},\r\n{\r\n  icon: <StarIcon />,\r\n  color: '#b1ca94',\r\n}];\r\n\r\nclass AnswerOption extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n    /*\r\n                        på play answer vill jag inte skriva texten utan bara ha rätt färg + symbol. play answer ska vara större. men det kanske jag kan fixa via cssklass i playanswer.\r\n                        på host answer har jag rätt färg symbol + text\r\n\r\n                        symboler icons: hjärta,stjärna,blomma (filter_vintage), berg, pusselbit(extension), cloud\r\n                        trekant, fyrkant, cirkel,\r\n                        1,2,3,4 (finns som icon)\r\n                        a,b,c,d (finns inte om icon)\r\n                        välj 4 coola färger, grön röd blå gul?\r\n                        tänk på att det kan vara två alternativ\r\n        */\r\n  }\r\n\r\n  render() {\r\n    const design = answerStyles[this.props.index];\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className=\"full-height\">\r\n        {this.props.answerQuestion && (\r\n        <Paper onClick={() => { this.props.answerQuestion(this.props.answer); }} className={classes.playAnswer} style={{ backgroundColor: design.color }}>\r\n          <div className=\"button-answer-icon\">{design.icon}</div>\r\n          {this.props.remoteMode && <div className={classes.answer}>{this.props.answer}</div>}\r\n        </Paper>\r\n        )\r\n                }\r\n        {!this.props.answerQuestion && (\r\n        <Paper className={classes.paper} style={{ backgroundColor: design.color }}>\r\n          <div className={classes.icon}>{design.icon}</div>\r\n          <div className={classes.answer}>{this.props.answer}</div>\r\n        </Paper>\r\n        )\r\n                }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerOption);\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Typography } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  text: {\r\n    marginBottom: '-200px',\r\n    fontSize: '86px',\r\n    paddingTop: '160px',\r\n  },\r\n  circle: {\r\n    color: '#6JpDK4',\r\n\r\n  },\r\n});\r\nclass Timer extends PureComponent {\r\n  render() {\r\n    const {\r\n      classes, text, value, startValue,\r\n    } = this.props;\r\n    let currentCount = value === null ? startValue : value;\r\n    const start = startValue < 1 ? 0 : startValue;\r\n\r\n    if (currentCount < 0) {\r\n      currentCount = 0;\r\n    }\r\n    const completed = currentCount / start;\r\n\r\n    return (\r\n      <div className={classes.container}>\r\n        <Typography variant=\"caption\" className={classes.text}>{text}</Typography>\r\n        <CircularProgress\r\n          className={classes.circle}\r\n          classes={{\r\n            colorSecondary: classes.circle,\r\n          }}\r\n          variant=\"static\"\r\n          value={completed * 100}\r\n          thickness={4}\r\n          size={300}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.number,\r\n  startValue: PropTypes.number,\r\n  classes: PropTypes.any,\r\n};\r\nexport default withStyles(styles)(Timer);\r\n","import React, { Component } from 'react';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    bar: {\r\n        color: '#32386D'\r\n    }\r\n});\r\nclass AnswerCounter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h5\">Answers collected</Typography>\r\n                <LinearProgress className={classes.bar} variant=\"determinate\" value={this.props.value} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(AnswerCounter);","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\nimport Timer from '../../common/Timer';\r\nimport AnswerCounter from './AnswerCounter';\r\n\r\nclass PhaseAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: null,\r\n      timelimit: 0,\r\n      started: false,\r\n      isTimelimited: true,\r\n      question: {\r\n        question: '',\r\n        answers: [],\r\n      },\r\n    };\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const that = this;\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question, isTimelimited: this.props.game.quiz.timelimit, timelimit: question.timelimit * 10 });\r\n    if (this.props.game.quiz.timelimit) {\r\n      const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n      let counter = question.timelimit * 10;\r\n      const i = setInterval(() => {\r\n        let answersCollected = 0;\r\n        for (let i = 0; i < playerKeys.length; i++) {\r\n          if (that.props.game.players[playerKeys[i]].answers && that.props.game.players[playerKeys[i]].answers[question.id]) {\r\n            answersCollected++;\r\n          }\r\n        }\r\n        counter--;\r\n        that.setState({ counter, started: true });\r\n        if (counter <= -5 || answersCollected === playerKeys.length) {\r\n          that.nextPhase();\r\n          clearInterval(i);\r\n        }\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  nextPhase() {\r\n    this.props.gameFunc.update({ phase: 'result_question' });\r\n  }\r\n\r\n  render() {\r\n    let answers = [];\r\n    if (this.props.game) {\r\n      answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n    }\r\n    let answersCollected = 0;\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      if (this.props.game.players[playerKeys[i]].answers && this.props.game.players[playerKeys[i]].answers[this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id]) {\r\n        answersCollected++;\r\n      }\r\n    }\r\n    const answerCollectedPercentage = (answersCollected / playerKeys.length) * 100;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">{this.state.question.question}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          {!this.state.isTimelimited && <Button onClick={this.nextPhase}>Next</Button>}\r\n          {this.state.isTimelimited && <Timer startValue={this.state.timelimit} value={this.state.counter} text={Math.ceil(this.state.counter / 10)} />\r\n                    }\r\n          <div className=\"quiz-answercounter-container\">\r\n            <AnswerCounter value={answerCollectedPercentage} />\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n\r\n          <Grid container className=\"align-bottom\">\r\n            {answers.map((answer, index) => (\r\n              <Grid key={index} item xs={6}>\r\n                <AnswerOption answer={answer} index={index} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseAnswer;\r\n","import React, { Component } from 'react';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst colors = ['#80DEEA', '#EF9A9A', '#CE93D8', '#C5E1A5'];\r\nconst MAX_PLAYERS = 20;\r\nconst PLAYER_BAR_HEIGHT_INCREMENT = 30;\r\nconst MAX_HEIGHT_PODIUM = 740;\r\nclass Podium extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getChartData = this.getChartData.bind(this);\r\n    this.getChartOptions = this.getChartOptions.bind(this);\r\n    this.getChartHeight = this.getChartHeight.bind(this);\r\n  }\r\n\r\n  getChartData() {\r\n    const chartData = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        label: 'podium',\r\n        backgroundColor: [],\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    const rawPlayerData = [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const playerScoreData = {};\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      let score = 0;\r\n      if (player.answers) {\r\n        for (let j = 0; j < Object.keys(player.answers).length; j++) {\r\n          const question = this.props.game.quiz.questions[j];\r\n          const answer = player.answers[question.id];\r\n          if (answer) {\r\n            score += answer.score;\r\n          }\r\n        }\r\n        playerScoreData.score = score;\r\n        playerScoreData.name = player.name;\r\n        rawPlayerData.push(playerScoreData);\r\n      }\r\n    }\r\n    rawPlayerData.sort((a, b) => b.score - a.score); // For ascending sort\r\n    const maxIndex = rawPlayerData.length > MAX_PLAYERS ? MAX_PLAYERS : rawPlayerData.length;\r\n    for (let i = 0; i < maxIndex; i++) {\r\n      chartData.labels.push(rawPlayerData[i].name);\r\n      chartData.datasets[0].data.push(rawPlayerData[i].score);\r\n      chartData.datasets[0].backgroundColor.push(colors[i % 4]);\r\n    }\r\n\r\n    return chartData;\r\n  }\r\n\r\n  getChartHeight() {\r\n    const chartData = this.getChartData();\r\n    let height = 70 + (chartData.labels.length * PLAYER_BAR_HEIGHT_INCREMENT);\r\n    if (height > MAX_HEIGHT_PODIUM) {\r\n      height = MAX_HEIGHT_PODIUM;\r\n    }\r\n    return height;\r\n  }\r\n\r\n  getChartOptions() {\r\n    const chartHeight = this.getChartHeight();\r\n    const padding = (MAX_HEIGHT_PODIUM - chartHeight) / 2;\r\n    const options = {\r\n      maintainAspectRatio: false,\r\n      showTooltips: false,\r\n      responsiveAnimationDuration: 1000,\r\n      animation: {\r\n        easing: 'easeInOutCubic',\r\n        duration: '2000',\r\n        onProgress(animation) {\r\n          animation.animationObject.onAnimationProgress = function () {\r\n            const ctx = this.chart.ctx;\r\n            const chart = this.chart;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'bottom';\r\n            ctx.font = '20px Roboto';\r\n\r\n            const stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n            const meta = chart.getDatasetMeta(0);\r\n            if (!meta.hidden) {\r\n              meta.data.forEach((element, index) => {\r\n                // Draw the text in black, with the specified font\r\n\r\n                // Just naively convert to string for now\r\n                const dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio).toString();\r\n                ctx.fillStyle = colors[index % 4];\r\n\r\n                const position = element.tooltipPosition();\r\n                ctx.fillText(dataString, position.x + 2 + (dataString.length * 6), position.y + (element._model.height / 2));\r\n              });\r\n            }\r\n          };\r\n        },\r\n      },\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n          display: true,\r\n          beginAtZero: true,\r\n        }],\r\n        xAxes: [{\r\n          display: true,\r\n          beginAtZero: true,\r\n        }],\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltips: {\r\n        enabled: false,\r\n      },\r\n      events: [],\r\n      layout: {\r\n        padding: {\r\n          left: 0,\r\n          right: 60,\r\n          top: padding,\r\n          bottom: padding,\r\n        },\r\n      },\r\n    };\r\n    return options;\r\n  }\r\n\r\n  getWinnerString() {\r\n    return 'Congratulations [name of player]! ';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ maxHeight: MAX_HEIGHT_PODIUM }}>\r\n        <HorizontalBar\r\n              data={this.getChartData}\r\n              height={MAX_HEIGHT_PODIUM}\r\n              options={this.getChartOptions()}\r\n            />\r\n        <Typography variant=\"subtitle1\">{this.getWinnerString()}</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Podium;\r\n","import React, { Component } from 'react';\r\nimport Podium from '../Podium';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"h2\">Final score</Typography>\r\n\r\n                    <Podium game={this.props.game} />\r\n                </div>\r\n                <div className=\"align-bottom \">\r\n                    <div>\r\n\r\n                        <Button onClick={this.props.gameFunc.restart}>Replay quiz</Button>\r\n                        <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n                        <Button onClick={() => alert('show results')}>Show results</Button>\r\n                        <Button onClick={() => alert('start survey')}>Start survey</Button>\r\n                        <Button>\r\n                            <Link to={'/create'}>Host game</Link>\r\n                        </Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport CakeIcon from '@material-ui/icons/Cake';\r\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport StarIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst PUBLIC_PATH = process.env.PUBLIC_URL;\r\n\r\nconst answerStyles = [{\r\n  icon: <CakeIcon />,\r\n  color: '#80DEEA',\r\n},\r\n{\r\n  icon: <ExtensionIcon />,\r\n  color: '#EF9A9A',\r\n},\r\n{\r\n  icon: <FavoriteIcon />,\r\n  color: '#CE93D8',\r\n},\r\n{\r\n  icon: <StarIcon />,\r\n  color: '#C5E1A5',\r\n}];\r\n\r\nclass AnswerChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getChartData = this.getChartData.bind(this);\r\n    this.getChartOptions = this.getChartOptions.bind(this);\r\n    this.getChartHeight = this.getChartHeight.bind(this);\r\n    this.getAnswerData = this.getAnswerData.bind(this);\r\n  }\r\n\r\n  getAnswerData() {\r\n    const answerData = {\r\n      data: [],\r\n      topPlayer: {\r\n        score: 0,\r\n        playerKey: '',\r\n      },\r\n      correctAnswers: [],\r\n    };\r\n    const playerAnswers = [];\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n    const currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      if (!player.answers) {\r\n        continue;\r\n      }\r\n      const answer = player.answers[currentQuestion.id];\r\n      if (answer) {\r\n        playerAnswers.push(answer.answer);\r\n        if (answer.score > answerData.topPlayer.score) {\r\n          answerData.topPlayer.score = answer.score;\r\n          answerData.topPlayer.playerKey = player.key;\r\n        }\r\n      }\r\n    }\r\n    for (let j = 0; j < currentQuestion.answers.length; j++) {\r\n      let nrOfAnswers = 0;\r\n      for (let i = 0; i < playerAnswers.length; i++) {\r\n        if (currentQuestion.answers.indexOf(playerAnswers[i]) === j) {\r\n          nrOfAnswers++;\r\n        }\r\n      }\r\n      answerData.data.push(nrOfAnswers);\r\n\r\n      if (currentQuestion.correctAnswers.indexOf(currentQuestion.answers[j]) > -1) {\r\n        answerData.correctAnswers.push(j);\r\n      }\r\n    }\r\n\r\n    return answerData;\r\n  }\r\n\r\n  getChartData() {\r\n    const chartData = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        label: 'asdf',\r\n        backgroundColor: [],\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n    const data = this.getAnswerData();\r\n    chartData.datasets[0].borderColor = [];\r\n    chartData.datasets[0].data = data.data;\r\n    for (let i = 0; i < data.data.length; i++) {\r\n      chartData.labels.push('');\r\n      chartData.datasets[0].backgroundColor.push(answerStyles[i].color);\r\n    }\r\n    return chartData;\r\n  }\r\n\r\n  getChartHeight() {\r\n    const answerData = this.getAnswerData();\r\n    const topvalue = Math.max(...answerData.data);\r\n    const incrementHeightPerAnswer = 25;\r\n    const minHeight = 65;\r\n    const maxHeight = 300;\r\n    const height = minHeight + (topvalue * incrementHeightPerAnswer);\r\n    if (height > maxHeight) {\r\n      return maxHeight;\r\n    }\r\n    return height;\r\n  }\r\n\r\n  getChartOptions() {\r\n    const that = this;\r\n    const options = {\r\n      maintainAspectRatio: false,\r\n      showTooltips: false,\r\n      responsiveAnimationDuration: 1000,\r\n      animation: {\r\n        easing: 'easeInOutCubic',\r\n        duration: '2000',\r\n        onProgress (animation) {\r\n                    let answerData = that.getAnswerData();\r\n                    animation.animationObject.onAnimationProgress = function () {\r\n                        let ctx = this.chart.ctx;\r\n                        let chart = this.chart;\r\n                        ctx.textAlign = \"center\";\r\n                        ctx.fillStyle = \"black\";\r\n                        ctx.textBaseline = \"bottom\";\r\n                        ctx.font = \"24px Roboto\";\r\n\r\n                        let stepratio = animation.animationObject.currentStep / animation.animationObject.numSteps;\r\n\r\n                        let meta = chart.getDatasetMeta(0);\r\n                        if (!meta.hidden) {\r\n                            meta.data.forEach(function (element, index) {\r\n\r\n                                let dataString = Math.floor(chart.data.datasets[0].data[index] * stepratio);\r\n\r\n                                let position = element.tooltipPosition();\r\n                                ctx.fillStyle = answerStyles[index].color;\r\n                                ctx.fillText(dataString, position.x, position.y - 2);\r\n                                ctx.beginPath();\r\n                                ctx.rect(position.x - element._view.width / 2, chart.height - 32, element._view.width, 22);\r\n                                ctx.fill();\r\n                                if (answerData.correctAnswers.indexOf(index) > -1) {\r\n\r\n                                    let img = new Image();\r\n                                    img.src = PUBLIC_PATH + \"/baseline-done_outline-24px.svg\";\r\n                                    img.height = 100;\r\n                                    img.width = 100;\r\n                                    let ypos = chart.height - 34;\r\n                                    //ta bort onlead wrapper för att göra det instant\r\n                                    ctx.drawImage(img, position.x - 12, ypos);\r\n                                }\r\n                            });\r\n                        }\r\n                        /*\r\n                                                for (let i = 0; i < answerData.data.length; i++) {\r\n                                                    let value = Math.floor(answerData.data[i] * stepratio);\r\n                                                    //om det inte är någon som svarar så blir meta[0] undefined första gången. går jag in på nytt på gamet som host så fungerar det\r\n                                                    //ha någon specifik hantering för om ingen har svarat alls\r\n                                                    var meta = this.chart.getDatasetMeta(0);\r\n                                                    let metadata = meta.data[i];\r\n                        \r\n                                                    ctx.fillStyle = answerStyles[i].color;\r\n                                                    ctx.fillText(value, metadata._view.x, metadata._view.y - 2);\r\n                                                    ctx.beginPath();\r\n                                                    ctx.rect(metadata._view.x - metadata._view.width / 2, this.chart.height - 32, metadata._view.width, 22);\r\n                                                    ctx.fill();\r\n                                                    if (answerData.correctAnswers.indexOf(i) > -1) {\r\n                        \r\n                                                        let img = new Image();\r\n                                                        img.src = \"/baseline-done_outline-24px.svg\";\r\n                                                        img.height = 100;\r\n                                                        img.width = 100;\r\n                                                        let ypos = this.chart.height - 34;\r\n                                                        //ta bort onlead wrapper för att göra det instant\r\n                                                        ctx.drawImage(img, metadata._view.x - 12, ypos);\r\n                        \r\n                                                    }\r\n                                                }\r\n                        \r\n                                                */\r\n                    }\r\n\r\n\r\n                },\r\n      },\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n          display: false,\r\n          beginAtZero: true,\r\n        }],\r\n        xAxes: [{\r\n          display: false,\r\n        }],\r\n      },\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltips: {\r\n        enabled: false,\r\n      },\r\n      events: [],\r\n      layout: {\r\n        padding: {\r\n          left: 0,\r\n          right: 0,\r\n          top: 25,\r\n          bottom: 40,\r\n        },\r\n      },\r\n    };\r\n    return options;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <Bar\r\ndata={this.getChartData}\r\nheight={this.getChartHeight()}\r\n              options={this.getChartOptions()}\r\n            />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnswerChart;\r\n","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Table from '@material-ui/core/Table';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  table: {\r\n    maxWidth: 700,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n});\r\n\r\nclass Leaderboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      leaderboardData: this.getLeaderboardData(),\r\n      page: 0,\r\n      rowsPerPage: 10,\r\n    };\r\n    this.startScoreCounter = this.startScoreCounter.bind(this);\r\n    this.getScoreCellWidth = this.getScoreCellWidth.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(this.startScoreCounter, 2000);\r\n  }\r\n\r\n  startScoreCounter() {\r\n    const that = this;\r\n    const i = setInterval(() => {\r\n      const newLeaderBoard = that.state.leaderboardData;\r\n      let done = true;\r\n      for (let i = 0; i < newLeaderBoard.players.length; i++) {\r\n        const player = newLeaderBoard.players[i];\r\n        if (player.currentQuestionScore > 0) {\r\n          done = false;\r\n          player.currentQuestionScore--;\r\n          player.totalScore++;\r\n        }\r\n      }\r\n      newLeaderBoard.players.sort((a, b) => ((b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0));\r\n      that.setState({ leaderboard: newLeaderBoard });\r\n      if (done) {\r\n        clearInterval(i);\r\n      }\r\n    }, 10);\r\n  }\r\n\r\n  getLeaderboardData() {\r\n    const leaderboard = {\r\n      players: [],\r\n    };\r\n    const playerKeys = this.props.game.players ? Object.keys(this.props.game.players) : [];\r\n\r\n    const currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    const playerList = [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      const playerScoreData = {};\r\n      const player = this.props.game.players[playerKeys[i]];\r\n      let score = 0;\r\n      if (player.answers) {\r\n        for (let j = 0; j < this.props.game.quiz.questions.length; j++) {\r\n          const question = this.props.game.quiz.questions[j];\r\n          const answer = player.answers[question.id];\r\n          if (answer) {\r\n            if (answer.questionId === currentQuestion.id) {\r\n              playerScoreData.currentQuestionScore = answer.score;\r\n              playerScoreData.lastScore = answer.score;\r\n            } else {\r\n              score += answer.score;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      playerScoreData.totalScore = score;\r\n      playerScoreData.name = player.name;\r\n      playerScoreData.key = player.key;\r\n      playerList.push(playerScoreData);\r\n    }\r\n\r\n    playerList.sort((a, b) => ((b.totalScore < a.totalScore) ? -1 : (b.totalScore > a.totalScore) ? 1 : 0));\r\n    leaderboard.players = playerList;\r\n    return leaderboard;\r\n  }\r\n\r\n  getLeaderboardScore(player) {\r\n    if (player.currentQuestionScore === 0) {\r\n      return `${player.totalScore} (+${player.lastScore})`;\r\n    }\r\n    return `${player.totalScore}           `;\r\n    // return player.totalScore + \" (+\" + player.currentQuestionScore + \")\";\r\n  }\r\n\r\n  getScoreCellWidth() {\r\n    let length = 0;\r\n    const leaderboardData = this.getLeaderboardData();\r\n    for (let i = 0; i < leaderboardData.players.length; i++) {\r\n      const player = leaderboardData.players[i];\r\n      const scoreWidth = `${player.totalScore} (+${player.lastScore})`;\r\n      if (scoreWidth.length > length) {\r\n        length = scoreWidth.length;\r\n      }\r\n    }\r\n\r\n\r\n    return (length * 6) + 65;\r\n  }\r\n\r\n    handleChangePage = (event, page) => {\r\n      this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n      this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n    render() {\r\n      const { classes } = this.props;\r\n      const { leaderboardData, rowsPerPage, page } = this.state;\r\n      return (\r\n        <div className={classes.root}>\r\n          <Table className={classes.table}>\r\n            <TableBody>\r\n              {leaderboardData.players.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((player, index) => (\r\n                <TableRow key={player.key}>\r\n                  <TableCell padding=\"dense\">{index + 1}</TableCell>\r\n                  <TableCell>{player.name}</TableCell>\r\n                  <TableCell style={{ width: this.getScoreCellWidth() }}>{this.getLeaderboardScore(player)}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          {leaderboardData.players.length > 10 && (\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={leaderboardData.players.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            backIconButtonProps={{\r\n              'aria-label': 'Previous Page',\r\n            }}\r\n            nextIconButtonProps={{\r\n              'aria-label': 'Next Page',\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n          />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Leaderboard);\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport AnswerOption from '../AnswerOption';\r\nimport AnswerChart from '../AnswerChart';\r\nimport Leaderboard from '../Leaderboard';\r\n\r\n\r\nclass PhaseResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    this.nextQuestion = this.nextQuestion.bind(this);\r\n    this.finalizeQuiz = this.finalizeQuiz.bind(this);\r\n  }\r\n\r\n  nextQuestion() {\r\n    const game = {};\r\n    game.quiz = this.props.game.quiz;\r\n    game.quiz.currentQuestion = game.quiz.currentQuestion + 1;\r\n    game.phase = 'awaiting_question';\r\n    this.props.gameFunc.update(game);\r\n  }\r\n\r\n  finalizeQuiz() {\r\n    this.props.gameFunc.update({ phase: 'final_result' });\r\n  }\r\n\r\n  render() {\r\n    let answers = [];\r\n    let currentQuestion = '';\r\n    if (this.props.game) {\r\n      currentQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n      answers = currentQuestion.answers;\r\n    }\r\n    const nextQuestion = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion + 1];\r\n    const isLastQuestion = typeof nextQuestion === 'undefined';\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h6\" style={{ float: 'right' }}>{`Game PIN:${this.props.game.gameId} `}</Typography>\r\n          <Typography variant=\"h5\">{currentQuestion.question}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            <Grid item md={6} xs={12}>\r\n              <div className=\"quiz-answer-chart\">\r\n                <AnswerChart game={this.props.game} />\r\n              </div>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <div>\r\n                <Leaderboard game={this.props.game} />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n          <div>\r\n            {isLastQuestion && <Button onClick={this.finalizeQuiz}>Finalize result</Button>}\r\n            {!isLastQuestion && <Button onClick={this.nextQuestion}>Next question</Button>}\r\n            <Button onClick={this.props.gameFunc.restart}>Restart quiz</Button>\r\n            <Button onClick={this.props.gameFunc.quit}>Quit quiz</Button>\r\n            <Button onClick={this.props.gameFunc.end}>End quiz</Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Grid className=\"align-bottom\" container>\r\n            {answers.map((answer, index) => (\r\n              <Grid key={index} item xs={6}>\r\n                <AnswerOption answer={answer} index={index} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseResultQuestion;\r\n","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                HostEnd\r\n                toggleHeader()\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component } from 'react';\r\nimport PhaseSetup from './PhaseSetup';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\n\r\nclass Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"host-container\">\r\n        {this.props.game.phase === 'setup' && <PhaseSetup game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'connection' && <PhaseConnection game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'starting' && <PhaseStarting game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'awaiting_question' && <PhaseAwaitingQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'show_question' && <PhaseShowQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'answer' && <PhaseAnswer game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'result_question' && <PhaseResultQuestion game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'final_result' && <PhaseFinalResult game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n        {this.props.game.phase === 'end' && <PhaseEnd game={this.props.game} gameFunc={this.props.gameFunc} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass PhaseSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      racetarget: props.game.minigame.racetarget,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      eatOpponents: props.game.minigame.eatOpponents,\r\n      wallCollision: props.game.minigame.wallCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        wallCollision,\r\n        opponentCollision,\r\n        eatOpponents,\r\n        racetarget,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"survival\">Survival</MenuItem>\r\n                  <MenuItem value=\"race\">Race</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'race'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Snake length\"\r\n                                name=\"racetarget\"\r\n                                type=\"number\"\r\n                                value={racetarget}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('racetarget')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={wallCollision}\r\n                      onChange={this.handleChangeBool('wallCollision')}\r\n                      value=\"wallCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Wall collisions\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision && eatOpponents}\r\n                      disabled={!opponentCollision}\r\n                      onChange={this.handleChangeBool('eatOpponents')}\r\n                      value=\"eatOpponents\"\r\n                    />\r\n                )}\r\n                  label=\"Eat opponent on collision\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nPhaseSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseSetup;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  nextPhase() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    let { players } = game;\r\n    if (!players) {\r\n      players = [];\r\n    } else {\r\n      players = Object.values(players);\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\">\r\n          <Typography variant=\"h2\">\r\n            <span>Join game with Game PIN: </span>\r\n            <span className=\"dynamic-text\">{game.gameId}</span>\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">{game.title}</Typography>\r\n        </div>\r\n        <div className=\"quiz-middle-section\">\r\n          <Grid container>\r\n            {players.map(player => (\r\n              <Grid key={player.key} item xs={3}>\r\n                <Typography paragraph variant=\"body1\" className=\"dynamic-text\">{player.name}</Typography>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Button onClick={this.nextPhase} variant=\"contained\">Start</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseConnection;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n    this.startCounter();\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    const counter = 5;\r\n    const i = setInterval(() => {\r\n      that.setState(state => ({\r\n        counter: state.counter + 1,\r\n      }));\r\n\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'gameplay' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseStarting;\r\n","const gridSize = 20;\r\nfunction isInvalidMove(keyPress, currentDirection) {\r\n  if (!keyPress) {\r\n    return true;\r\n  }\r\n  const invalidMovment = {\r\n    left: 'right', right: 'left', up: 'down', down: 'up',\r\n  };\r\n  return invalidMovment[keyPress] === currentDirection;\r\n}\r\nfunction getInitialFoods(amount) {\r\n  const initialFoods = [];\r\n  for (let i = 0; i < amount; i++) {\r\n    const food = {\r\n      active: false,\r\n    };\r\n    initialFoods.push(food);\r\n  }\r\n  return initialFoods;\r\n}\r\n// vissa snakes lyckas inte äta foods? är det en bugg med konstiga synkningar mot state när det är så många?\r\n// det verkar inte heller fungera med positioneringen indexof. Ormarna hamnar ibland precis brevid varandra.\r\nfunction getSnakesInStartingPosition(snakes, canvasSettings) {\r\n  for (let i = 0, len = snakes.length; i < len; i++) {\r\n    const snake = snakes[i];\r\n    snake.direction = snake.actions[i % 4];\r\n    snake.moves = [];\r\n    let pos;\r\n    switch (snake.direction) {\r\n      case 'right':\r\n        pos = getRandomStartingPosLeft(snakes, canvasSettings.height);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - gridSize,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - (gridSize * 2),\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x - (gridSize * 3),\r\n          y: pos.y,\r\n        }];\r\n        break;\r\n      case 'left':\r\n        pos = getRandomStartingPosRight(snakes, canvasSettings);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + gridSize,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + (gridSize * 2),\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x + (gridSize * 3),\r\n          y: pos.y,\r\n        }];\r\n        break;\r\n      case 'up':\r\n        pos = getRandomStartingPosBottom(snakes, canvasSettings);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + gridSize,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + (gridSize * 2),\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y + (gridSize * 3),\r\n        }];\r\n        break;\r\n      case 'down':\r\n        pos = getRandomStartingPosTop(snakes, canvasSettings.width);\r\n        snake.body = [{\r\n          x: pos.x,\r\n          y: pos.y,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - gridSize,\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - (gridSize * 2),\r\n        }, {\r\n          x: pos.x,\r\n          y: pos.y - (gridSize * 3),\r\n        }];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return snakes;\r\n}\r\n\r\nfunction getRandomStartingPosTop(snakes, canvasWidth) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'down' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].x))];\r\n\r\n  const margin = gridSize * 8;\r\n  const xMax = canvasWidth - (margin * 2);\r\n  const y = gridSize * 2;\r\n  const x = getRandomStartingPos(xMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosBottom(snakes, canvasSettings) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'up' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].x))];\r\n\r\n  const margin = gridSize * 8;\r\n  const xMax = canvasSettings.width - (margin * 2);\r\n  const y = canvasSettings.height - (gridSize * 3);\r\n  const x = getRandomStartingPos(xMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosRight(snakes, canvasSettings) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'left' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].y))];\r\n\r\n  const margin = gridSize * 8;\r\n  const yMax = canvasSettings.height - (margin * 2);\r\n  const x = canvasSettings.width - (gridSize * 3);\r\n  const y = getRandomStartingPos(yMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPosLeft(snakes, canvasHeight) {\r\n  const snakesDown = snakes.filter(s => s.direction === 'right' && s.body);\r\n  const existingValues = [...new Set(snakesDown.map(s => s.body[0].y))];\r\n\r\n  const margin = gridSize * 8;\r\n  const yMax = canvasHeight - (margin * 2);\r\n  const x = gridSize * 2;\r\n  const y = getRandomStartingPos(yMax, margin, existingValues);\r\n  return { x, y };\r\n}\r\n\r\nfunction getRandomStartingPos(max, margin, existingValues) {\r\n  const value = Math.round((Math.random() * max) / gridSize) * gridSize + margin;\r\n  const posTaken = existingValues.some(v => v === value || v === value - gridSize || v === value + gridSize);\r\n\r\n  if (posTaken) {\r\n    return getRandomStartingPos(max, margin, existingValues, gridSize);\r\n  }\r\n  return value;\r\n}\r\nfunction getRandomCanvasPositionMargin(yMax, xMax) {\r\n  const x = Math.round((Math.random() * (xMax - (gridSize * 14))) / gridSize) * gridSize + (gridSize * 4);\r\n  const y = Math.round((Math.random() * (yMax - (gridSize * 2))) / gridSize) * gridSize + (gridSize * 2);\r\n  return { x, y };\r\n}\r\n// denna function är inte så lätt, kan troligen förenklas\r\nfunction detectOpponentCollision(snakes, eatOpponents) {\r\n  for (let i = 0, len = snakes.length; i < len; i++) {\r\n    if (snakes[i].dead) {\r\n      // om den redan är död så fortsätt. t.ex. en headon så kör jag båda två till dead direkt.\r\n      continue;\r\n    }\r\n    const currentSnake = snakes[i];\r\n    for (let j = 0; j < len; j++) {\r\n      // om opponents är död så ska man inte kunna krocka med den. döda snakes har ju fortfarande coordinater. alt är att ta bort coordinaterna\r\n      if (j === i || snakes[j].dead) {\r\n        continue;\r\n      }\r\n      const opponentSnake = snakes[j];\r\n      // lägga till en function där om man äter body[1] så där opponent?\r\n      for (let k = 0, len2 = opponentSnake.body.length; k < len2; k++) {\r\n        const collision = opponentSnake.body[k].x === currentSnake.body[0].x && opponentSnake.body[k].y === currentSnake.body[0].y;\r\n        if (collision) {\r\n          if (k === 0) {\r\n            currentSnake.dead = true;\r\n            opponentSnake.dead = true;\r\n            // collision head>head\r\n          } else if (eatOpponents) {\r\n            // snakes\r\n            if (k === 1) {\r\n              opponentSnake.dead = true;\r\n            } else {\r\n              opponentSnake.body.length = k;\r\n              len2 = k;\r\n\r\n              // snakes[j].body.length = k;\r\n            }\r\n            // kan jag använda opponentSnakeBody istället för snakes[j].body\r\n            // opponentSnakeBody.length = k;?\r\n          } else {\r\n            currentSnake.dead = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return snakes;\r\n}\r\n\r\nfunction detectSelfCollision(snake) {\r\n  const { body } = snake;\r\n  if (body.length < 5) {\r\n    return false;\r\n  }\r\n  // denna är nog inte lika snabb som for loopen?\r\n  const collision = body.slice(4).some(b => b.x === body[0].x && b.y === body[0].y);\r\n  return collision;\r\n  /*\r\n    for (let i = 4, len = body.length; i < len; i++) {\r\n      const selfCollison = body[i].x === body[0].x && body[i].y === body[0].y;\r\n      if (selfCollison) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n    */\r\n}\r\n\r\nfunction detectWallCollision(snakeHead, maxHeight, maxWidth) {\r\n  const leftCollison = snakeHead.x < 0;\r\n  const topCollison = snakeHead.y < 0;\r\n  const rightCollison = snakeHead.x > maxWidth - gridSize;\r\n  const bottomCollison = snakeHead.y > maxHeight - gridSize;\r\n  return leftCollison || topCollison || rightCollison || bottomCollison;\r\n}\r\n/*\r\n  util functions that i can move to snakeUtil.js\r\n  */\r\nexport {\r\n  detectOpponentCollision,\r\n  getRandomCanvasPositionMargin,\r\n  getSnakesInStartingPosition,\r\n  getInitialFoods,\r\n  detectWallCollision,\r\n  detectSelfCollision,\r\n  getRandomStartingPosLeft,\r\n  getRandomStartingPosRight,\r\n  getRandomStartingPosBottom,\r\n  getRandomStartingPosTop,\r\n  isInvalidMove,\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nclass Tetris extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                tetris.js\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tetris;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseFinalResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.replayGame = this.replayGame.bind(this);\r\n  }\r\n\r\n  replayGame() {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update({ phase: 'starting' });\r\n  }\r\n\r\n  /*\r\nskriv ut vinnaren och hur lång tid gamet tog\r\n(använd minigame.ticks och minigame.difficulty för att räkna ut sekunder)\r\nminigame.winners inner håller vinnare/vinnarna.\r\nkan vara så att winners inte finns om det snakes.length === 1\r\n men då är ju den \"vinnaren\". typ i coop singelplayer\r\npodium\r\n  */\r\n  render() {\r\n    const { gameFunc, game } = this.props;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h2\">Final score</Typography>\r\n          <Typography variant=\"h2\">{game.minigame.winners[0].name}</Typography>\r\n        </div>\r\n        <div className=\"align-bottom \">\r\n          <div>\r\n            <Button onClick={this.replayGame}>Replay game</Button>\r\n            <Button onClick={gameFunc.restart}>Re-host game</Button>\r\n            <Button onClick={gameFunc.quit}>Quit game</Button>\r\n            <Button onClick={() => alert('show results')}>Show results</Button>\r\n            <Button onClick={() => alert('start survey')}>Start survey</Button>\r\n            <Button>\r\n              <Link to=\"/create\">Create new game</Link>\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseFinalResult.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseFinalResult;\r\n","import React, { PureComponent } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseEnd extends PureComponent {\r\n  render() {\r\n    const { game } = this.props;\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography>{`hur seer detta ut konstigt med dollarsign?HostEnd toggleheader()${game.title}`}</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseEnd.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default PhaseEnd;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nfunction chunkify(a, nr) {\r\n  let n = nr;\r\n  if (n < 2) { return [a]; }\r\n  const len = a.length;\r\n  const out = [];\r\n  let i = 0;\r\n  let size;\r\n  if (len % n === 0) {\r\n    size = Math.floor(len / n);\r\n    while (i < len) {\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  } else {\r\n    while (i < len) {\r\n      size = Math.ceil((len - i) / n);\r\n      n -= 1;\r\n      out.push(a.slice(i, i += size));\r\n    }\r\n  }\r\n  return out;\r\n}\r\nfunction createSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const snakes = [];\r\n  // mocka flera spelare genom att loopa på x och sen byt player.key till playerKeys[0]\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      actions: ['up', 'down', 'right', 'left'],\r\n      score: 0,\r\n      color: SNAKE_COLORS[i % SNAKE_COLORS.length],\r\n      name: SNAKE_NAMES[i % SNAKE_NAMES.length],\r\n      // start positioner ska randomas helt, inklusive direction, varanan ska starta nereifrån upp, uppifrån ner, höger till vänster, vänster till göger..\r\n      // fyra olika random metoder och y måste vara unikt för de som kör horizontelt och x måste vara unikt för som kör vertikalt, kanske även ett mellanrum mellan varje snake\r\n      id: i,\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\n\r\nfunction createTeamSnakes(players) {\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 100;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const nrOfSnakes = playerKeys;\r\n  // coop snakes här vil jag kunna hitta ultimata updelningen. man ska kunna vara 2 eller 4 per orm. om det är ojämnt antal får man vara en 3a.\r\n  // chunkify tar in playerkeys och en siffra på hur många snakes det ska vara och delar upp dem men då behöver jag veta hur många snakes jag vill ha?\r\n  // kanske får göra en helt egen chunkify? behöver veta hur mågna snakes jag vill ha och sen kanske det löser sig självt i loopen\r\n\r\n  for (let i = 0; i < playerKeys.length; i++) {\r\n    const player = players[playerKeys[i]];\r\n    const snake = {\r\n      playerKeys: [player.key],\r\n      direction: 'right',\r\n      id: i,\r\n      score: 0,\r\n      body: [{\r\n        x: startingX,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - gridSize,\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 2),\r\n        y: startingY,\r\n      }, {\r\n        x: startingX - (gridSize * 3),\r\n        y: startingY,\r\n      }],\r\n\r\n    };\r\n    snakes.push(snake);\r\n    // här ska jag lägga till såd et finns en food per player?\r\n    // foods.push(food);\r\n  }\r\n  return snakes;\r\n}\r\nfunction createCoopSnakes(players) {\r\n  // alla players kontrollerar samma snake. antingen med en knapp var, eller så har alla alla knappar?\r\n  // kanske en spelare får bara 1 klick? samarbetesövning.\r\n  const playerKeys = Object.keys(players);\r\n  const startingY = 90;\r\n  const startingX = 300;\r\n  const snakes = [];\r\n  const snake = {\r\n    playerKeys,\r\n    direction: 'right',\r\n    actions: ['up', 'down', 'right', 'left'],\r\n    score: 0,\r\n    color: SNAKE_COLORS[Math.floor(Math.random() * SNAKE_COLORS.length)],\r\n    name: SNAKE_NAMES[Math.floor(Math.random() * SNAKE_NAMES.length)],\r\n    id: 0,\r\n    body: [{\r\n      x: startingX,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - gridSize,\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 2),\r\n      y: startingY,\r\n    }, {\r\n      x: startingX - (gridSize * 3),\r\n      y: startingY,\r\n    }],\r\n  };\r\n  snakes.push(snake);\r\n  return snakes;\r\n}\r\nconst SNAKE_COLORS = ['#F44336',\r\n  '#9C27B0',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FFEB3B',\r\n  '#FF9800',\r\n  '#607D8B',\r\n  '#795548',\r\n  '#E91E63',\r\n  '#3F51B5',\r\n  '#673AB7',\r\n  '#00BCD4',\r\n  '#03A9F4',\r\n  '#8BC34A',\r\n  '#CDDC39',\r\n  '#009688',\r\n  '#FFC107',\r\n  '#FF5722',\r\n];\r\nconst SNAKE_NAMES = ['Stan',\r\n  'Jane',\r\n  'Sara',\r\n  'Dan',\r\n  'Lisa',\r\n  'Joe',\r\n  'Rose',\r\n  'Ray',\r\n  'Lyra',\r\n  'Sam',\r\n  'Lucy',\r\n  'Ben',\r\n  'Noa',\r\n  'Mark',\r\n  'Eve',\r\n  'Ned',\r\n  'Ann',\r\n  'Todd'];\r\nconst gridSize = 20;\r\nclass SnakeStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startCounter();\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    let counter = 5;\r\n    const i = setInterval(() => {\r\n      counter -= 1;\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n    let snakes = [];\r\n    const snakeGenerator = {\r\n      classic: createSnakes(game.players),\r\n      team: createTeamSnakes(game.players),\r\n      coop: createCoopSnakes(game.players),\r\n    };\r\n    snakes = snakeGenerator[game.minigame.multiplayerMode];\r\n\r\n    for (let i = 0; i < snakes.length; i++) {\r\n      const actionChunks = chunkify(snakes[i].actions, snakes[i].playerKeys.length);\r\n      for (let j = 0; j < snakes[i].playerKeys.length; j++) {\r\n        const player = game.players[snakes[i].playerKeys[j]];\r\n        player.snakeId = snakes[i].id;\r\n        player.controlActions = actionChunks[j];\r\n      }\r\n    }\r\n\r\n    game.minigame.snakes = snakes;\r\n    game.phase = 'gameplay';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnakeStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeStarting;\r\n","export const WIDTH = 500;\r\nexport const HEIGHT = 250;\r\n\r\nexport const HOLE_HEIGHT = 10;\r\nexport const HOLE_CURVE_DEPTH = 7;\r\nexport const HOLE_WIDTH = 10;\r\nexport const BALL_RADIUS = 3;\r\nexport const BALL_RADIUS_CONTROLLER = 12;\r\n\r\nexport const MIN_POWER = 10;\r\nexport const MAX_POWER = 150;\r\nexport const SWING_STEP = 75;\r\n\r\nexport const TIMER_MS = 45 * 1000;\r\nexport const OVER_TIMER_MS = 7 * 1000;\r\nexport const HURRY_UP_MS = 15 * 1000;\r\nexport const IDLE_KICK_MS = 60 * 1000;\r\nexport const MATCH_LENGTH_MS = 5 * 60 * 1000;\r\nexport const MATCH_OVER_MS = 10 * 1000;\r\n\r\nexport const AIR_COLOR = '#2f2f2f';\r\nexport const GRASS_COLOR = 'green';\r\nexport const ROUGH_COLOR = 'green';\r\nexport const FAIRWAY_COLOR = 'green';\r\nexport const GREEN_COLOR = 'green';\r\nexport const BUNKER_COLOR = 'green';\r\nexport const WATER_COLOR = 'blue';\r\n\r\n\r\nexport const PHYSICS_SPEED_FACTOR = 3;\r\n\r\nexport const CLUBS = [\r\n  {\r\n    name: 'Wood', id: 0, loft: 22, powerFactor: 3.4, max: 800,\r\n  },\r\n  {\r\n    name: 'Hybrid', id: 1, loft: 26, powerFactor: 3.2, max: 800,\r\n  },\r\n  {\r\n    name: '3 Iron', id: 2, loft: 31, powerFactor: 2.8, max: 700,\r\n  },\r\n  {\r\n    name: '4 Iron', id: 3, loft: 34, powerFactor: 2.75, max: 700,\r\n  },\r\n  {\r\n    name: '5 Iron', id: 4, loft: 37, powerFactor: 2.7, max: 700,\r\n  },\r\n  {\r\n    name: '6 Iron', id: 5, loft: 40, powerFactor: 2.65, max: 700,\r\n  },\r\n  {\r\n    name: '7 Iron', id: 6, loft: 43, powerFactor: 2.6, max: 700,\r\n  },\r\n  {\r\n    name: '8 Iron', id: 7, loft: 46, powerFactor: 2.55, max: 700,\r\n  },\r\n  {\r\n    name: '9 Iron', id: 8, loft: 49, powerFactor: 2.5, max: 700,\r\n  },\r\n  {\r\n    name: 'Wedge', id: 9, loft: 62, powerFactor: 2.4, max: 700,\r\n  },\r\n  {\r\n    name: 'Chipper', id: 10, loft: 78, powerFactor: 2.3, max: 700,\r\n  },\r\n  {\r\n    name: 'Putter', id: 11, loft: 1, powerFactor: 1.5, max: 500,\r\n  },\r\n];\r\n\r\nexport const GROUND_COLORS = [\r\n  'orange',\r\n  'brown',\r\n  'gray',\r\n];\r\n\r\n// thx friends\r\nexport const goalWords = [\r\n  'touchdown',\r\n  'nothing but net',\r\n  'gooooooooal',\r\n  'it\\'s good',\r\n  'you dunked',\r\n  'nice dunk',\r\n  'mmmmmonster dunk',\r\n  'home run',\r\n  'you defeated',\r\n  'point get', // gnu order\r\n  'perfect score', // gnu order\r\n  'goat bonus', // robiben\r\n  'you\\'re great', // gnu order\r\n  'your winner', // robiben\r\n  'ball bonus', // robiben\r\n  'perfect putt', // gnu order\r\n  'big gulp', // robiben\r\n  'nice one, senpai', // cat doter\r\n  'a winner is you', // AlucardRD\r\n  'come putt, milord', // cat doter\r\n  '30 - love', // oatgan\r\n  'nice on', // cronox2\r\n  'chase the snowman', // big jeffrey\r\n  'what a season',\r\n  'from downtown',\r\n  'you\\'re on fire',\r\n  'dunk it good', // theme song to space jam 2\r\n];\r\n","import { sample } from 'lodash';\r\nimport tinycolor from 'tinycolor2';\r\nimport * as p2 from 'p2';\r\nimport {\r\n  HOLE_HEIGHT,\r\n  HOLE_CURVE_DEPTH,\r\n  HOLE_WIDTH,\r\n  GROUND_COLORS,\r\n  BALL_RADIUS,\r\n} from './GolfConstants';\r\n\r\n/* get an int between min and max inclusive */\r\nfunction randInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction shuffle(a) {\r\n  for (let i = a.length; i; i -= 1) {\r\n    const j = Math.floor(Math.random() * i);\r\n    const x = a[i - 1];\r\n    a[i - 1] = a[j];\r\n    a[j] = x;\r\n  }\r\n}\r\n\r\nconst ballMaterial = new p2.Material();\r\n\r\nconst groundMaterial = new p2.Material();\r\n\r\nconst holeMaterial = new p2.Material();\r\n\r\nconst ballGroundContact = new p2.ContactMaterial(ballMaterial, groundMaterial, {\r\n  friction: 1,\r\n  restitution: 0.5,\r\n});\r\n\r\nconst ballHoleContact = new p2.ContactMaterial(ballMaterial, holeMaterial, {\r\n  friction: 1,\r\n  restitution: 0.3,\r\n});\r\n\r\nconst BALL_GROUP = Math.pow(2, 1);\r\nconst GROUND_GROUP = Math.pow(2, 2);\r\n\r\nexport function createWorld() {\r\n  const world = new p2.World({\r\n    gravity: [0, 50],\r\n  });\r\n\r\n  world.sleepMode = p2.World.BODY_SLEEPING;\r\n\r\n  world.addContactMaterial(ballGroundContact);\r\n  world.addContactMaterial(ballHoleContact);\r\n\r\n  return world;\r\n}\r\n\r\nexport function isInvalidSwing(swingData) {\r\n  // validerar att swingen måste ha minst x antal datapunkter, vilket säkerställer att det inte var en kort snärt bara.\r\n  if (swingData.length < 10) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n/*\r\n * Resets the ball position to level spawn if ball fell off world.\r\n */\r\n\r\nfunction newBall(position) {\r\n  const ballShape = new p2.Circle({\r\n    radius: BALL_RADIUS,\r\n    collisionGroup: BALL_GROUP,\r\n    collisionMask: GROUND_GROUP,\r\n  });\r\n  ballShape.material = ballMaterial;\r\n\r\n  const ballBody = new p2.Body({\r\n    mass: 1,\r\n    position,\r\n  });\r\n  ballBody.addShape(ballShape);\r\n\r\n  ballBody.angularDamping = 0.8;\r\n  ballBody.damping = 0.18;\r\n  ballBody.sleepTimeLimit = 1;\r\n  ballBody.sleepSpeedLimit = 2;\r\n\r\n  return ballBody;\r\n}\r\n// spawn: I.List<number>\r\nexport function createBall(spawn) {\r\n  return newBall([\r\n    spawn[0],\r\n    spawn[1] - BALL_RADIUS,\r\n  ]);\r\n}\r\nexport function getDistanceYards(a, b) {\r\n  if (a > b) {\r\n    return Math.floor((a - b) / 4);\r\n  }\r\n  return Math.floor((b - a) / 4);\r\n}\r\n\r\nexport function createBallFromInitial(position, velocity) {\r\n  const ball = newBall(position);\r\n  ball.velocity = velocity.slice(); // clone\r\n  return ball;\r\n}\r\nexport function getSwingData(club, acceleration) {\r\n  const xFactor = (90 - club.loft) / 90;\r\n  const YFactor = club.loft / 90;\r\n  // en lös putt kommer fortfarande registreras som 0.14 etc. kanske ska lägga på en mini så att highestAcceleration alltid är minst 5?\r\n  // lägger alltså på gratis 5 på highest acc. eller så får jag räkna om värdet på den så att de första upp till 10 räknas som mer värda ellerså?\r\n  const power = acceleration;\r\n  // kör testleveln. kolla på angulardampening? kanske är det som är problemet. får ju ingen lyft på bollarna. öka faktorerna. öka y?\r\n  const swing = {\r\n    x: Math.min(Math.ceil(power * xFactor) * club.powerFactor, club.max),\r\n    y: Math.min(Math.ceil(power * YFactor) * club.powerFactor, club.max),\r\n  };\r\n  return swing;\r\n}\r\nexport function addHolePoints(level) {\r\n  const { width } = level;\r\n\r\n  // points has to start with x=0 and end with x=WIDTH\r\n  if (level.points[0][0] !== 0) {\r\n    throw new Error('invalid points: first x !== 0');\r\n  }\r\n  if (level.points[level.points.length - 1][0] !== width) {\r\n    throw new Error(`invalid points: last x !== WIDTH (${width})`);\r\n  }\r\n\r\n  // insert hole\r\n  // get the first point after the hole...\r\n  const idxAfterHole = level.points.findIndex(point => point[0] > level.hole[0]);\r\n  // const idxAfterHole = level.points.findIndex(point => point.get(0) > level.hole.get(0));\r\n\r\n  const x1 = level.hole[0] - HOLE_WIDTH / 2;\r\n  const x2 = level.hole[0] + HOLE_WIDTH / 2;\r\n\r\n  if (x1 <= level.points[idxAfterHole - 1][0]) {\r\n    throw new Error('invalid points: hole x1 cannot be <= the previous x');\r\n  }\r\n\r\n  if (x2 >= level.points[idxAfterHole][0]) {\r\n    throw new Error('invalid points: hole x2 cannot be >= the previous x');\r\n  }\r\n\r\n  // ...then insert hole between points\r\n  const holePoints = [\r\n    [level.hole[0] - HOLE_WIDTH / 2, level.hole[1]],\r\n    [level.hole[0] - HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0], level.hole[1] + HOLE_HEIGHT],\r\n    [level.hole[0] + HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0] + HOLE_WIDTH / 2, level.hole[1]],\r\n  ];\r\n\r\n  const pointsWithHole = level.points\r\n    .slice(0, idxAfterHole)\r\n    .concat(holePoints)\r\n    .concat(level.points.slice(idxAfterHole));\r\n  const levelWithHolePoints = { ...level, points: pointsWithHole };\r\n  return levelWithHolePoints;\r\n}\r\n\r\nexport function createGround(level) {\r\n  const { height, width } = level;\r\n  // This used to create a single ground shape.\r\n  // Now it creates 3 because this mysteriously fixes a bug where the ground after the hole wasn't\r\n  // working correctly? man I don't even know\r\n  const beforeHole = level.points.filter(point => point[0] < level.hole[0]);\r\n  const afterHole = level.points.filter(point => point[0] > level.hole[0]);\r\n\r\n  const vertsBeforeHole = beforeHole.concat([\r\n    [beforeHole[beforeHole.length - 1][0], height],\r\n    [0, height],\r\n  ]);\r\n\r\n  // Creates this shape:\r\n  // |\\/|\r\n  // |  |\r\n  // |  |\r\n  // |__|\r\n  const vertsHole = [\r\n    [level.hole[0] - HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0], level.hole[1] + HOLE_HEIGHT],\r\n    [level.hole[0] + HOLE_WIDTH / 2, level.hole[1] + HOLE_CURVE_DEPTH],\r\n    [level.hole[0] + HOLE_WIDTH / 2, height],\r\n    [level.hole[0] - HOLE_WIDTH / 2, height],\r\n  ];\r\n\r\n  const vertsAfterHole = afterHole.concat([\r\n    [width, height],\r\n    [afterHole[0][0], height],\r\n  ]);\r\n\r\n  const grounds = [vertsBeforeHole, vertsHole, vertsAfterHole].map((verts) => {\r\n    const body = new p2.Body({\r\n      mass: 0,\r\n    });\r\n\r\n    body.fromPolygon(verts);\r\n\r\n    for (const shape of body.shapes) {\r\n      if (verts === vertsHole) {\r\n        shape.material = holeMaterial;\r\n      } else {\r\n        shape.material = groundMaterial;\r\n      }\r\n\r\n      shape.collisionGroup = GROUND_GROUP;\r\n      shape.collisionMask = BALL_GROUP;\r\n    }\r\n\r\n    return body;\r\n  });\r\n\r\n  return grounds;\r\n}\r\n// pos: I.List<number>\r\nexport function createHoleSensor(pos) {\r\n  const sensorShape = new p2.Box({\r\n    width: HOLE_WIDTH,\r\n    height: HOLE_HEIGHT,\r\n  });\r\n\r\n  sensorShape.sensor = true;\r\n  sensorShape.collisionGroup = GROUND_GROUP;\r\n  sensorShape.collisionMask = BALL_GROUP;\r\n\r\n  // Sensor is purposely built halfway into the ground so top edge collisions are avoided\r\n  const sensorBody = new p2.Body({\r\n    position: [\r\n      pos[0],\r\n      pos[1] + (Math.ceil(HOLE_HEIGHT * 1.4)),\r\n    ],\r\n  });\r\n  sensorBody.damping = 0;\r\n  sensorBody.addShape(sensorShape);\r\n\r\n  return sensorBody;\r\n}\r\n\r\nexport function getSegmentWidths(totalWidth, minWidth) {\r\n  const widths = [];\r\n  let remainingWidth = totalWidth;\r\n\r\n  while (remainingWidth > 0) {\r\n    let maxWidth = 50;\r\n\r\n    if (remainingWidth < maxWidth) {\r\n      maxWidth = remainingWidth;\r\n    }\r\n\r\n    let width = randInt(minWidth, maxWidth);\r\n\r\n    // if this segment would leave us with < minWidth remaining width, just make this segment the\r\n    // entire remaining width\r\n    if (remainingWidth - width < minWidth) {\r\n      width = remainingWidth;\r\n    }\r\n\r\n    widths.push(width);\r\n    remainingWidth -= width;\r\n  }\r\n\r\n  // shuffle widths so it's not biased towards having smaller segments at the end\r\n  shuffle(widths);\r\n\r\n  return widths;\r\n}\r\nexport function calculateScore(strokes, time) {\r\n  return Math.round(100 / (strokes + (time / 20)));\r\n}\r\nexport function getPlayerColors(len) {\r\n  const goldenRatio = 0.618033988749895;\r\n  const colors = [];\r\n  const s = 0.5;\r\n  const v = 0.95;\r\n  let h = Math.random();\r\n  for (let i = 0; i < len; i++) {\r\n    h += goldenRatio;\r\n    h %= 1;\r\n    const tiny = tinycolor.fromRatio({ h, s, v });\r\n    colors.push(tiny.toHexString());\r\n  }\r\n\r\n  return colors;\r\n}\r\n// lägg till olika material de två segementerna närmast hålet ska vara green, där färgen är anoorlunda och friktionen mindre\r\n// vattenhinder? blått och räknas likt outOfBounds? fast sätt tillbaka till senaste pos, spara alltid senaste pos använd även för outofbounds?\r\n// bunker: hög friktion, ingen studs = damping?\r\n// bunker och vatten kan bara finnas på plant eller i en viaduct, ta nåra av de spetsiga hålen/viaducterna och gör till vatten eller bunker\r\n// bunker och vatten kan påverka par? kan öka paret ett snäpp om det är mycket bunker/vatten\r\n// rough och fairway är samma? tillsvidare\r\nexport function levelGen(width, height, test) {\r\n  if (test) {\r\n    const testLevel = {\r\n      points: [\r\n        [0, 400],\r\n        [width, 400],\r\n      ],\r\n      hole: [width / 1.5, 400],\r\n      spawn: [100, 400],\r\n      color: 'brown',\r\n      par: 4,\r\n      height,\r\n      time: 2000,\r\n      width,\r\n    };\r\n    return testLevel;\r\n  }\r\n\r\n  const segmentWidths = getSegmentWidths(width, 12);\r\n  const numSegments = segmentWidths.length;\r\n\r\n  const spawnSegment = randInt(2, Math.floor(numSegments / 5));\r\n  let par;\r\n  if (width > 1000) {\r\n    const rnd = randInt(1, 18);\r\n    if (rnd > 8) {\r\n      par = 4;\r\n    } else if (rnd > 4) {\r\n      par = 5;\r\n    } else {\r\n      par = 3;\r\n    }\r\n  } else {\r\n    par = 5;\r\n  }\r\n  const asdf = {\r\n    5: [2, Math.floor(numSegments / 4)],\r\n    4: [Math.floor(numSegments / 4), Math.floor(numSegments / 2.5)],\r\n    3: [Math.floor(numSegments / 2.5), Math.floor(numSegments / 2)],\r\n  };\r\n  const holeSegments = {\r\n    5: numSegments - randInt(2, Math.floor(numSegments / 4)),\r\n    4: numSegments - randInt(Math.floor(numSegments / 4), Math.floor(numSegments / 2.5)),\r\n    3: numSegments - randInt(Math.floor(numSegments / 2.5), Math.floor(numSegments / 2)),\r\n  };\r\n\r\n  const holeSegment = holeSegments[par];\r\n\r\n  const timePars = {\r\n    5: 90 * 1000,\r\n    4: 60 * 1000,\r\n    3: 45 * 1000,\r\n  };\r\n\r\n  const time = timePars[par];\r\n\r\n  const points = [];\r\n  let spawnX;\r\n  let spawnY;\r\n  let holeX;\r\n  let holeY;\r\n\r\n  const minY = height * 0.5;\r\n  const maxY = minY + Math.min(200, height * 0.3);\r\n\r\n  for (let idx = 0; idx <= numSegments; idx++) {\r\n    const segmentWidth = segmentWidths[idx - 1];\r\n\r\n    let x; let\r\n      y;\r\n\r\n    if (idx === 0) {\r\n      x = 0;\r\n    } else {\r\n      x = points[idx - 1][0] + segmentWidth;\r\n    }\r\n\r\n    if (x > width) {\r\n      x = width;\r\n    }\r\n\r\n    if (idx === 0) {\r\n      y = randInt(height - 150, height - 20);\r\n    } else {\r\n      const prevY = points[idx - 1][1];\r\n\r\n      // special-case flat section\r\n      if (randInt(1, 3) === 1) {\r\n        y = prevY;\r\n      } else {\r\n        let boundLow = prevY - 40;\r\n        let boundHigh = prevY + 40;\r\n\r\n        // clamp high/low bounds so that if they go out of screen bounds, the bounds shift to\r\n        // contain the same range but clamped\r\n        if (boundLow < minY) {\r\n          boundHigh -= (boundLow - minY);\r\n          boundLow = minY;\r\n        }\r\n\r\n        if (boundHigh > maxY) {\r\n          boundLow -= (boundHigh - maxY);\r\n          boundHigh = maxY;\r\n        }\r\n\r\n        y = randInt(boundLow, boundHigh);\r\n      }\r\n    }\r\n\r\n    if (idx === spawnSegment) {\r\n      spawnX = x - Math.round(segmentWidth / 2);\r\n      y = points[idx - 1][1];\r\n      spawnY = y;\r\n    }\r\n\r\n    if (idx === holeSegment) {\r\n      holeX = x - Math.round(segmentWidth / 2);\r\n      y = points[idx - 1][1];\r\n      holeY = y;\r\n    }\r\n\r\n    points.push([x, y]);\r\n  }\r\n\r\n  const color = sample(GROUND_COLORS);\r\n\r\n  const hole = [holeX, holeY];\r\n  const spawn = [spawnX, spawnY];\r\n\r\n  const level = {\r\n    points,\r\n    hole,\r\n    spawn,\r\n    color,\r\n    par,\r\n    time,\r\n    height,\r\n    width,\r\n  };\r\n\r\n  return level;\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as p2 from 'p2';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { fire } from '../../../base';\r\n\r\n// http://jsfiddle.net/AceJJ/1748/ fireworks\r\nimport * as util from './GolfUtil';\r\nimport {\r\n  WIDTH, HEIGHT, HOLE_HEIGHT,\r\n  HOLE_CURVE_DEPTH,\r\n  HOLE_WIDTH,\r\n  HURRY_UP_MS,\r\n  AIR_COLOR,\r\n  GRASS_COLOR,\r\n  MATCH_OVER_MS,\r\n  BALL_RADIUS,\r\n  TIMER_MS,\r\n  PLAYER_COLORS,\r\n  CLUBS,\r\n} from './GolfConstants';\r\n\r\nlet ctx;\r\nlet canvas;\r\nconst fixedTimeStep = 1 / 60; // seconds\r\nconst maxSubSteps = 10; // Max sub steps to catch up with the wall clock\r\nlet lastTime;\r\n// jag behöver lyssna på nya slag från firebase: [power, angle, ballstatus: moving]\r\n// jag behöver updatera firebase varje gång en boll är redo för att slås(distans kvar, ballstatus: [awaitingSwing, moving, inhole, outOfPlay )\r\n\r\n// kolla på exempelspelen på p2. https://github.com/schteppe/p2.js/blob/master/examples/canvas/character.html\r\n// använda samma koncept av en init funktion och en animation. precis som med snake, inte massa olika komponenter osv.\r\n// ha en drawBall/drawballs drawGround/drawlevel som gör ctx.rectfill osv likt p2 exempel.\r\n// använd p2s eventhandlers? för att se om en boll är i hålet.\r\n// och sen då synkningarna mot firebase med bara den väsentliga infomrationen som både host och play behöver. SwingData, bollstatus, distans, osv.\r\n// Försök att inte använda utilMetoderna utan börja med att utveckla egna metoder med inspiration från manygolf bara.\r\n\r\n// 1. init() skapar ett game, world, balls, osv. kopplar bollar till playerkeys. updaterar players med ballsId (precis som snakes).\r\n// initierar lyssnare för varje boll kopplat till player/swing etc i firebase, likt snake\r\n// skapa eventhandlers i p2. Som kollar om någon boll är i hålet, om någon boll är out of bounds?\r\n// 2. skapa en animation-loop och metoder för att rita ut alla komponenter: boll, ground, hole, level, world ....\r\n// skapa winConditions. alltså när alla bollar har status: inhole så är det klart.\r\n// 3. lägg till golfController där man lyssnar på balls[playerkey] likt snake. och när bollen har status WAITING_SWING så kan man svinga med mobilen och data synkas till firebase\r\n// och läses in i host som sätter en veolocify på ball.body\r\nfunction drawBall(x, y, fill, stroke, playerState) {\r\n  // ball border width\r\n  ctx.lineWidth = 1;\r\n\r\n  // if (playerState && playerState === PlayerState.leftRound) {\r\n  //   // make fill translucent\r\n  //   ctx.fillStyle = tinycolor(fill).setAlpha(0.5).toRgbString();\r\n  //   ctx.strokeStyle = tinycolor(stroke).setAlpha(0.5).toRgbString();\r\n  // } else {\r\n  //   ctx.fillStyle = fill;\r\n  //   ctx.strokeStyle = stroke;\r\n  // }\r\n  ctx.fillStyle = fill;\r\n  ctx.strokeStyle = stroke;\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n  ctx.closePath();\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS - ctx.lineWidth / 2, 0, 2 * Math.PI);\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n}\r\n\r\nclass Golf extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // för att göra det mer smooth. så behöver jag typ dela upp ätandet så att det sker i flera tick? för just nu är ett tick storleken på food och allt annat\r\n    // lite delay när jag ökar speeden. är det olika delay för olika snakes? optimera senare.\r\n    const canvasHeight = Math.floor(window.innerHeight - 160);\r\n    const canvasWidth = Math.floor(window.innerWidth);\r\n    this.state = {\r\n      levelData: null,\r\n      world: null,\r\n      level: null,\r\n      players: props.players, // I.map()\r\n      startTime: null,\r\n      expTime: null,\r\n      holeSensor: null,\r\n      time: 0,\r\n      canvasHeight,\r\n      canvasWidth,\r\n      leaderId: null,\r\n      matchEndTime: null,\r\n      testacceleration: 183,\r\n      testClubIndex: 2,\r\n      testBallIndex: 0,\r\n      balls: null,\r\n      nextLevelTimer: null,\r\n      scorers: [],\r\n      totalScores: [],\r\n      currentlevelScores: [],\r\n      leaderboard: [],\r\n    };\r\n    // golf\r\n    this.init = this.init.bind(this);\r\n    this.ensurePlayersInBounds = this.ensurePlayersInBounds.bind(this);\r\n    this.swing = this.swing.bind(this);\r\n    this.drawGround = this.drawGround.bind(this);\r\n    this.drawLevelCompleteHud = this.drawLevelCompleteHud.bind(this);\r\n    this.drawPlayHud = this.drawPlayHud.bind(this);\r\n    this.renderFrame = this.renderFrame.bind(this);\r\n    this.animate = this.animate.bind(this);\r\n    this.testSwing = this.testSwing.bind(this);\r\n    this.syncPlayersObjectToFirebase = this.syncPlayersObjectToFirebase.bind(this);\r\n    this.initControllerListener = this.initControllerListener.bind(this);\r\n    this.isLevelCompleted = this.isLevelCompleted.bind(this);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n    this.distributeScore = this.distributeScore.bind(this);\r\n    this.isLoadNextLevel = this.isLoadNextLevel.bind(this);\r\n    this.loadNextLevel = this.loadNextLevel.bind(this);\r\n    this.saveGame = this.saveGame.bind(this);\r\n    this.setEventHandlers = this.setEventHandlers.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.init();\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    // kan jag ha det här?\r\n\r\n    return true;\r\n  }\r\n\r\n  setEventHandlers(world) {\r\n    world.on('beginContact', (evt) => {\r\n      // createHoleSensor body\r\n      const {\r\n        balls, holeSensor, startTime, expTime, scorers,\r\n      } = this.state;\r\n      const { game: _game } = this.props;\r\n      const players = Object.values(_game.players);\r\n      if (evt.bodyA !== holeSensor && evt.bodyB !== holeSensor) return;\r\n      const ballBody = evt.bodyA === holeSensor ? evt.bodyB : evt.bodyA;\r\n      if (ballBody.scored) return;\r\n      const { playerKey } = ballBody;\r\n\r\n      // alert(`${this.props.game.players[playerKey].name} scored!`);\r\n      // update players state with whatever. and uppdate firebase\r\n      ballBody.scored = true;\r\n      const newExpTime = expTime > Date.now() + (HURRY_UP_MS * 1000) ? Date.now() + (HURRY_UP_MS * 1000) : expTime;\r\n\r\n      const scoreTime = Math.floor((Date.now() - startTime) / 1000);\r\n      const scorer = {\r\n        playerKey,\r\n        time: scoreTime,\r\n        strokes: _game.players[playerKey].swing.strokes,\r\n        hole: _game.minigame.round,\r\n      };\r\n      scorers.push(scorer);\r\n      this.setState(() => ({\r\n        balls,\r\n        expTime: newExpTime,\r\n        scorers,\r\n      }));\r\n\r\n      const newPlayerState = players.map(p => (p.key === playerKey ? { ...p, state: 'SCORED', scoreTime } : p));\r\n      this.syncPlayersToFirebase(newPlayerState);\r\n    });\r\n\r\n    world.on('postStep', (evt) => {\r\n      // createHoleSensor body\r\n      const { balls, level } = this.state;\r\n      const { game: _game } = this.props;\r\n      const players = Object.values(_game.players);\r\n      const stillBalls = balls.filter(x => x.velocity[0] === 0 && x.velocity[1] === 0);\r\n      if (stillBalls.length === 0) {\r\n        return;\r\n      }\r\n      const playersToUpdateState = players.filter(x => x.state === 'MOVING' && stillBalls.some(b => x.key === b.playerKey));\r\n      if (playersToUpdateState.length === 0) {\r\n        return;\r\n      }\r\n      const newPlayerState = players.map((player, index) => {\r\n        if (playersToUpdateState.some(x => x.key === player.key)) {\r\n          return { ...player, state: 'STILL', distance: util.getDistanceYards(level.hole[0], balls[player.ballIndex].interpolatedPosition[0]) };\r\n        }\r\n        return player;\r\n      });\r\n      this.syncPlayersToFirebase(newPlayerState);\r\n\r\n      //      this.setState(state => newPlayerState);\r\n      // update players state with whatever. and uppdate firebase\r\n    });\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  ensurePlayersInBounds() {\r\n    const { balls, canvasWidth, level } = this.state;\r\n    const ensuredBalls = balls.map((ball) => {\r\n      const result = ball;\r\n      if (ball.interpolatedPosition[0] < 0 || ball.interpolatedPosition[0] > canvasWidth) {\r\n        result.position = [level.spawn[0], level.spawn[1] - BALL_RADIUS];\r\n        result.velocity = [0, 0];\r\n      }\r\n      return result;\r\n    });\r\n\r\n    this.setState(() => ({\r\n      balls: ensuredBalls,\r\n    }));\r\n    // börja med att bygga en fungerande version nu och testa ordentligt med Mobil sen prioritera nedan\r\n\r\n    // 1. använd den senaste positionen istället. så vid varje slag eller när bollen stannar så ska balls updateras med lastknownpos[0,0]\r\n\r\n    // lägg till options om att kunna studs i väggar och tak?\r\n\r\n    // 3. krocka bort andras bollar? behöver jag lägga till ballGroundContact grej? inte när de är i hålet\r\n\r\n    // 2. skapa två modes: först i hålet, och minst antal slag. påverkar endast hur poängen räknas. helt på tid eller helt på slag?\r\n\r\n    // 4. lägg till speedmätare på swingen istäellet för en siffra.\r\n\r\n    // 8. lägg till roligare svenska ord i generatename\r\n\r\n    // rita ut swingen bättre och bättre validering\r\n\r\n    // någon snygg clubpicker.\r\n\r\n    // 5. lägg till musik/ljudefekter? https://www.audioblocks.com/ https://freesound.org/ soundbible.com\r\n    // olika typer av golfslag. de spelas på hosten golf.js i swingmoment. kan lätt räkna ut om det var en driver, putter eller järn.\r\n    // ha några olika beroende på styrkan av slaget också\r\n    // ett ljud för när bollen går i koppen.\r\n    // någon sorts pausmusik och gameplaymusik\r\n    // funktion för att stänga av alla ljudefekter och musik\r\n    // några ljudeffekter för tiden som tickar sista 10 sekunderna?\r\n    // något ljud för hole in one\r\n\r\n    // 6. backspinn?\r\n\r\n    // 7. rita ut en hålflaga?\r\n\r\n    // instruktioner för hur golfcontrollerfungerar. både på controllen och i golf.se ska det vara någon gif vore snygt\r\n\r\n    // prioritera bland features\r\n  }\r\n\r\n  drawBalls() {\r\n    const { balls } = this.state;\r\n    const { game } = this.props;\r\n    const players = Object.values(game.players);\r\n\r\n    const len = players.length;\r\n    for (let i = 0; i < len; i++) {\r\n      const player = players[i];\r\n      const pos = balls[player.ballIndex].interpolatedPosition;\r\n      drawBall(pos[0], pos[1], player.color, 'gray', player.state);\r\n    }\r\n\r\n\r\n    // players.forEach((player) => {\r\n    //   // Don't render ghost for the current player\r\n    //   // if (player.id === state.id && !debugRender) {\r\n    //   //   return;\r\n    //   // }\r\n\r\n    //   const pos = player.ball.interpolatedPosition;\r\n    //   drawBall(pos[0], pos[1], player.color, 'black', player.state);\r\n\r\n    //   // if (state.match.leaderId === player.id) {\r\n    //   //   drawCrown(ctx, pos[0], pos[1]);\r\n    //   // }\r\n    // });\r\n  }\r\n\r\n  // långting är off med drawground. antingen i den eller i levelgen eller någon annan util metod.\r\n  // blev så när jag bytte constans.height och width till state här som är baserat på window\r\n  drawGround() {\r\n    const { level, canvasHeight, canvasWidth } = this.state;\r\n    const { points } = level;\r\n\r\n\r\n    ctx.fillStyle = level.color;\r\n    const groundLineWidth = 3;\r\n    ctx.lineWidth = groundLineWidth;\r\n\r\n    ctx.beginPath();\r\n    const firstPoint = points[0];\r\n    ctx.moveTo(firstPoint[0], firstPoint[1]);\r\n\r\n    points.slice(1).forEach((point) => {\r\n      ctx.lineTo(point[0], point[1]);\r\n    });\r\n\r\n    // draw a complete shape so fill works\r\n    // add padding so the outline stroke doesn't show up\r\n\r\n    ctx.lineTo(canvasWidth + groundLineWidth, points[points.length - 1][1]);\r\n    ctx.lineTo(canvasWidth + groundLineWidth, canvasHeight + groundLineWidth);\r\n    ctx.lineTo(-groundLineWidth, canvasHeight + groundLineWidth);\r\n    ctx.lineTo(-groundLineWidth, points[0][1]);\r\n\r\n    ctx.strokeStyle = GRASS_COLOR;\r\n    ctx.stroke();\r\n    ctx.fill();\r\n    ctx.closePath();\r\n  }\r\n\r\n  drawLevelCompleteHud() {\r\n    const {\r\n      nextLevelTimer, level, canvasHeight, canvasWidth, leaderboard,\r\n    } = this.state;\r\n    const { game } = this.props;\r\n    ctx.font = '24px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillText('Level completed!', 15, 24);\r\n    const timeRemaining = Math.floor((nextLevelTimer - Date.now()) / 1000);\r\n    ctx.fillText(timeRemaining, canvasWidth / 2, 24);\r\n    for (let i = 0; i < leaderboard.length; i++) {\r\n      const data = leaderboard[i];\r\n      ctx.fillText(`${game.players[data.playerKey].name}: ${data.totalStrokes} slag`, canvasWidth / 2, 60 + (30 * i));\r\n    }\r\n  }\r\n\r\n  drawPlayHud() {\r\n    const {\r\n      expTime, level, canvasHeight, canvasWidth,\r\n    } = this.state;\r\n    const { game } = this.props;\r\n    ctx.font = '24px roboto';\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillText(`Hole ${game.minigame.round} Par ${level.par}`, 15, 24);\r\n    const timeRemaining = Math.floor((expTime - Date.now()) / 1000);\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(timeRemaining, canvasWidth / 2, 24);\r\n    ctx.textAlign = 'left';\r\n\r\n    const scoredTextHeight = 40;\r\n    Object.values(game.players).filter(x => x.state === 'SCORED')\r\n      .sort((a, b) => a.scoreTime > b.scoreTime)\r\n      .slice(0, 3)\r\n      .forEach((p, index) => ctx.fillText(`${p.name} gick i hål med ${p.swing.strokes} slag på ${p.scoreTime} sekunder`, canvasWidth / 2, scoredTextHeight * (1 + index)));\r\n    // funkar typ men försvinner snabbt... ska stanna kvar tills ny kommer och petar ner den. upp till 3 samtida som visas. en per rad.\r\n\r\n    // lägg till info om vilken hål det här är. hål x? kolla på game.round? vilket par är det?\r\n    // tid kvar?\r\n  }\r\n\r\n  testSwing() {\r\n    const { testacceleration, testClubIndex, testBallIndex } = this.state;\r\n    const club = CLUBS[testClubIndex];\r\n    const swing = util.getSwingData(club, testacceleration);\r\n    this.swing(swing, testBallIndex, true);\r\n  }\r\n\r\n  swing(velocity, ballIndex, test) {\r\n    const { balls, holeSensor } = this.state;\r\n    const { game: { players } } = this.props;\r\n    const ballToHit = balls.find(b => b.ballIndex === ballIndex);\r\n    players[ballToHit.playerKey].state = 'MOVING';\r\n\r\n    const holeX = holeSensor.interpolatedPosition[0];\r\n    // kanske bara kan göra ballToHit.interpolatedpostion.... istället för att hämta från balls array igen? samma med setstate behöver inte göras då?\r\n    // utan kan bara göra return balls direkt efter att jag gjort ändringen på balltohit\r\n    const ballX = balls[ballToHit.ballIndex].interpolatedPosition[0];\r\n    const velocityWithDirection = { ...velocity, y: -velocity.y };\r\n    // bollen är förbi hålet\r\n    if (ballX > holeX) {\r\n      velocityWithDirection.x = -velocityWithDirection.x;\r\n    }\r\n    this.syncPlayersObjectToFirebase(players);\r\n\r\n    this.setState(() => {\r\n      balls[ballToHit.ballIndex].velocity[0] = velocityWithDirection.x;\r\n      balls[ballToHit.ballIndex].velocity[1] = velocityWithDirection.y;\r\n      return { balls, players };\r\n    });\r\n  }\r\n\r\n  createLevel() {\r\n    const { canvasHeight, canvasWidth } = this.state;\r\n    const { game } = this.props;\r\n  }\r\n\r\n  init() {\r\n    const { game } = this.props;\r\n    const { canvasHeight, canvasWidth } = this.state;\r\n    canvas = document.getElementById('golfcanvas');\r\n    ctx = canvas.getContext('2d');\r\n    ctx.lineWidth = 5;\r\n\r\n    const level = util.addHolePoints(util.levelGen(canvasWidth, canvasHeight, true));\r\n    const world = util.createWorld();\r\n\r\n    //\r\n    const groundBodies = util.createGround(level);\r\n    const holeSensor = util.createHoleSensor(level.hole);\r\n\r\n    for (const body of groundBodies) {\r\n      world.addBody(body);\r\n    }\r\n\r\n    world.addBody(holeSensor);\r\n\r\n    const playerKeys = Object.keys(game.players);\r\n    const len = playerKeys.length;\r\n    const createdPlayers = [];\r\n    const balls = [];\r\n    const playerColors = util.getPlayerColors(len);\r\n    for (let i = 0; i < len; i++) {\r\n      const ball = util.createBall(level.spawn);\r\n      // hur håller jag koll på vilken boll som är vilken spelare?\r\n      ball.playerKey = playerKeys[i];\r\n      ball.ballIndex = i;\r\n      ball.scored = false;\r\n      world.addBody(ball);\r\n      const player = Object.assign({\r\n        ballIndex: i,\r\n        key: playerKeys[i],\r\n        color: playerColors[i],\r\n        state: 'STILL',\r\n        distance: util.getDistanceYards(level.hole[0], level.spawn[0]),\r\n        score: 0,\r\n        swing: {\r\n          strokes: 0,\r\n        },\r\n      }, game.players[playerKeys[i]]);\r\n      balls.push(ball);\r\n      createdPlayers.push(player);\r\n    }\r\n    //\r\n\r\n    this.setState(() => ({\r\n      world,\r\n      level,\r\n      balls,\r\n      holeSensor,\r\n      startTime: Date.now(),\r\n      expTime: Date.now() + level.time,\r\n    }));\r\n\r\n    createdPlayers.forEach(player => this.initControllerListener(player));\r\n    // event ball in hole\r\n    this.setEventHandlers(world);\r\n\r\n    this.syncToFirebase(createdPlayers, level);\r\n    requestAnimationFrame(this.animate);\r\n  }\r\n\r\n\r\n  syncPlayersToFirebase(players) {\r\n    const { game, gameFunc } = this.props;\r\n    game.players = players.reduce((_result, player) => {\r\n      const result = _result;\r\n      result[player.key] = player;\r\n      return result;\r\n    }, game.players);\r\n    this.saveGame(game);\r\n  }\r\n\r\n  syncPlayersObjectToFirebase(playersObj) {\r\n    const { game, gameFunc } = this.props;\r\n    game.players = playersObj;\r\n\r\n    this.saveGame(game);\r\n  }\r\n\r\n  syncToFirebase(players, level) {\r\n    const { game, gameFunc } = this.props;\r\n\r\n    game.players = players.reduce((_result, player) => {\r\n      const result = _result;\r\n      result[player.key] = player;\r\n      return result;\r\n    }, game.players);\r\n    game.status = 'IN_PROGRESS';\r\n    game.minigame.levelColor = level.color;\r\n    game.minigame.round = 1;\r\n    this.saveGame(game);\r\n  }\r\n\r\n  saveGame(game) {\r\n    const { gameFunc } = this.props;\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n    if (game.minigame.round === game.minigame.holes) {\r\n      // uppdaetra players.score... använd det som finnsi leaderboard eller scorers?\r\n      game.phase = 'final_result';\r\n    } else {\r\n      game.minigame.round += 1;\r\n      game.phase = 'level_completed';\r\n      this.setState(() => ({\r\n        nextLevelTimer: Date.now() + MATCH_OVER_MS,\r\n      }));\r\n    }\r\n    this.saveGame(game);\r\n  }\r\n\r\n  animate(time) {\r\n    const { world } = this.state;\r\n    const { game: { phase } } = this.props;\r\n    requestAnimationFrame(this.animate);\r\n\r\n    const deltaTime = lastTime ? (time - lastTime) / 400 : 0;\r\n\r\n    // Move bodies forward in time\r\n    world.step(fixedTimeStep, deltaTime, maxSubSteps);\r\n    lastTime = time;\r\n\r\n    if (phase === 'gameplay') {\r\n      this.ensurePlayersInBounds();\r\n      this.renderFrame();\r\n      this.drawPlayHud();\r\n      if (this.isLevelCompleted()) {\r\n        this.distributeScore();\r\n        this.nextPhase();\r\n      }\r\n    } else if (phase === 'level_completed') {\r\n      this.renderFrame();\r\n      this.drawLevelCompleteHud();\r\n      if (this.isLoadNextLevel()) {\r\n        this.loadNextLevel();\r\n      }\r\n    }\r\n\r\n    // ska poäng bara ges för placering inbördes? eller poäng för slagen? båda? tröstpoäng om man inte klarar banan\r\n\r\n    // struktuerar om. ha phase switchcondition runt mera saker. för är vi i pausscreen kanske det är onödigt att köra esnureplayersisinbounds etc\r\n    // sätt phase till leaderboard,\r\n    // giveoutpoints\r\n    // showleaderboard (automaticly goes to next level after 10 sec, setState(nextLevelTimer = date.now() + 10sekunder))\r\n    //\r\n    // gör en else eller annan if efter här som kollar om phase==='leaderboard' && nextLevelTimer har gått ut.\r\n    // om det är sant så ska nästa level laddas. använd npgon variant av init. loadNextLevel();\r\n  }\r\n\r\n  loadNextLevel() {\r\n    const { game, gameFunc } = this.props;\r\n    const {\r\n      balls, canvasHeight, canvasWidth,\r\n    } = this.state;\r\n    // börja med att testa att bara updatera states bodies med nya värden. annars kanske jag måste köra remove body på world. eller world.clear();\r\n    // frågan är om events.on är kvar?\r\n\r\n    const level = util.addHolePoints(util.levelGen(canvasWidth, canvasHeight, false));\r\n    const world = util.createWorld();\r\n    //\r\n    const groundBodies = util.createGround(level);\r\n    const createdHoleSensor = util.createHoleSensor(level.hole);\r\n\r\n    for (const body of groundBodies) {\r\n      world.addBody(body);\r\n    }\r\n\r\n    world.addBody(createdHoleSensor);\r\n\r\n    balls.forEach((ball) => {\r\n      ball.position = [\r\n        level.spawn[0],\r\n        level.spawn[1] - BALL_RADIUS,\r\n      ];\r\n      ball.velocity = [0, 0];\r\n      ball.scored = false;\r\n      world.addBody(ball);\r\n    });\r\n    this.setEventHandlers(world);\r\n\r\n    // skapa ny level, och world?\r\n\r\n    // sätt alla players state till STILL, nollställ swing och distance\r\n\r\n    // sätt alla bollars pos till level.spawn.\r\n    const playerUpdates = Object.values(game.players).map(p => ({\r\n      ...p,\r\n      state: 'STILL',\r\n      distance: util.getDistanceYards(level.hole[0], level.spawn[0]),\r\n      swing: {\r\n        strokes: 0,\r\n      },\r\n    }))\r\n      .reduce((_result, player) => {\r\n        const result = _result;\r\n        result[player.key] = player;\r\n        return result;\r\n      }, game.players);\r\n    // säkertställ att ingen swing råkas göras när jag återställer play.swing obj.\r\n    // updatera state\r\n    this.setState(() => ({\r\n      world,\r\n      level,\r\n      balls,\r\n      holeSensor: createdHoleSensor,\r\n      startTime: Date.now(),\r\n      expTime: Date.now() + level.time,\r\n    }));\r\n\r\n    game.phase = 'gameplay';\r\n    game.players = playerUpdates;\r\n    this.saveGame(game);\r\n  }\r\n\r\n  distributeScore() {\r\n    // finns alltid risk att firebase tar tid på sig att skriva och läsa och då hinner jag inte få upp score?\r\n    // kanske behöver ha viss information i state här ändå.\r\n    const { game } = this.props;\r\n    const { scorers, leaderboard } = this.state;\r\n    const board = Object.values(game.players).map((player) => {\r\n      const totalScore = scorers.filter(x => x.playerKey === player.key);\r\n      if (totalScore.length === 0) {\r\n        return {\r\n          currentRoundScore: 0,\r\n          totalScore: 0,\r\n          currentStrokes: 0,\r\n          totalStrokes: 10,\r\n          playerKey: player.key,\r\n        };\r\n      }\r\n      const currentScore = totalScore.find(x => x.hole === game.minigame.round);\r\n      const playerScore = {\r\n        currentRoundScore: currentScore ? util.calculateScore(currentScore.strokes, currentScore.time) : 0,\r\n        totalScore: totalScore.reduce((r, s) => r + util.calculateScore(s.strokes, s.time), 0),\r\n        currentStrokes: currentScore ? currentScore.strokes : 10,\r\n        totalStrokes: totalScore.reduce((r, s) => r + s.strokes, 0),\r\n        playerKey: player.key,\r\n      };\r\n      return playerScore;\r\n    })\r\n      .sort((a, b) => a.totalStrokes > b.totalStrokes);\r\n    this.setState(() => ({\r\n      leaderboard: board,\r\n    }));\r\n  }\r\n\r\n\r\n  initControllerListener(player) {\r\n    const { game } = this.props;\r\n    const { balls } = this.state;\r\n    const swingRef = fire.database().ref(`/games/${game.key}/players/${player.key}/swing`);\r\n    const that = this;\r\n    swingRef.on('value', (snapshot) => {\r\n      const swingData = snapshot.val();\r\n      if (swingData && swingData.strokes > player.swing.strokes) {\r\n        that.swing(swingData, player.ballIndex);\r\n      } else {\r\n        console.log('move error');\r\n      }\r\n    });\r\n  }\r\n\r\n  isLoadNextLevel() {\r\n    const { nextLevelTimer } = this.state;\r\n    const now = Date.now();\r\n    if (now > nextLevelTimer) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isLevelCompleted() {\r\n    const { expTime, balls } = this.state;\r\n    const now = Date.now();\r\n    if (now > expTime) {\r\n      return true;\r\n    }\r\n    // måste testa om denna fungerar. kansek inte känner av när någon balls blir scored? måste kolla på players? varför fungerar inte hurry up grejen?\r\n    if (!balls.some(x => !x.scored)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  renderFrame() {\r\n    const { canvasHeight, canvasWidth } = this.state;\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n    // Transform the canvas\r\n    // Note that we need to flip the y axis since Canvas pixel coordinates\r\n    // goes from top to bottom, while physics does the opposite.\r\n    ctx.save();\r\n\r\n    this.drawGround();\r\n    this.drawBalls();\r\n  }\r\n\r\n  // informationen mellan varje bana är i en annan phase? en annan komponent?\r\n  render() {\r\n    const {\r\n      canvasHeight, canvasWidth, testClubIndex, testacceleration, testBallIndex, balls,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"phase-container\" id=\"golfboard\">\r\n        <canvas id=\"golfcanvas\" height={canvasHeight} width={canvasWidth} />\r\n        <button type=\"button\" onClick={this.testSwing}>swing</button>\r\n        <FormControl>\r\n          <InputLabel htmlFor=\"clubc-required\">Club</InputLabel>\r\n          <Select\r\n            value={testClubIndex || 0}\r\n            onChange={this.handleChangeSelect}\r\n            name=\"testClubIndex\"\r\n            inputProps={{\r\n              id: 'club-required',\r\n            }}\r\n          >\r\n            {CLUBS.map((c, index) => (\r\n              <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>\r\n            ))}\r\n\r\n          </Select>\r\n        </FormControl>\r\n        <TextField\r\n          label=\"Acceleration\"\r\n          name=\"testacceleration\"\r\n          type=\"number\"\r\n          value={testacceleration}\r\n          margin=\"normal\"\r\n          onChange={this.handleChange('testacceleration')}\r\n        />\r\n        { balls && (\r\n        <FormControl>\r\n          <InputLabel htmlFor=\"ball-required\">Ball</InputLabel>\r\n          <Select\r\n            value={testBallIndex || 0}\r\n            onChange={this.handleChangeSelect}\r\n            name=\"testBallIndex\"\r\n            inputProps={{\r\n              id: 'ball-required',\r\n            }}\r\n          >\r\n            {balls.map((b, index) => (\r\n              <MenuItem key={b.ballIndex} value={b.ballIndex}>{b.ballIndex}</MenuItem>\r\n            ))}\r\n\r\n          </Select>\r\n        </FormControl>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolf.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default Golf;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass GolfStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startCounter();\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n  startCounter() {\r\n    const that = this;\r\n    let counter = 5;\r\n    const i = setInterval(() => {\r\n      counter -= 1;\r\n      if (counter === 0) {\r\n        that.nextPhase();\r\n        clearInterval(i);\r\n      }\r\n    }, 1000);\r\n    return 5;\r\n  }\r\n\r\n  nextPhase() {\r\n    const { game, gameFunc } = this.props;\r\n\r\n    game.phase = 'gameplay';\r\n    gameFunc.update(game);\r\n  }\r\n\r\n  // skapa bara en klassic mode med en \"boll\" per spelare\r\n\r\n  // i golf.js så sno kod för att kunna skapa en golfbana med fysik osv.\r\n  // skapa firebase lyssnare till varje boll? likt snake kanske. men granska den lösningen dåden inte var så jättebra\r\n  // skapa en enkel golfcontroller som kan göra en swing, få ett powervärde och skicka värdet till firebaase och in i snake.js som slår till bollen utifrån värdet\r\n  // börja med en standard klubba/vinkel, i golfController ska man sen kunna ändra klubba innan varje slag.\r\n  // putter, wedge, iron 8, iron 6, driver är standard?\r\n  // övriga klubbtyper kan man köpa för ingame currency som man vinner efter varje hål?\r\n  // eller som kan kan köpa till sin \"profil\" kräver att jag börjar med inloggning till stagehoot. krävs också för att få till handikapp.\r\n  // kanske bara för golf man behöver logga in? eller har valet att kunna logga in med fördelen att spara progress etc?\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Starting game</Typography>\r\n        <CountdownAnimation speed=\"slow\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolfStarting.propTypes = {\r\n  gameFunc: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default GolfStarting;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass SnakeSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: false,\r\n      gamemode: props.game.minigame.gamemode,\r\n      racetarget: props.game.minigame.racetarget,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      eatOpponents: props.game.minigame.eatOpponents,\r\n      wallCollision: props.game.minigame.wallCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        wallCollision,\r\n        opponentCollision,\r\n        eatOpponents,\r\n        racetarget,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator, wallCollision,\r\n        opponentCollision, eatOpponents, racetarget, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"survival\">Survival</MenuItem>\r\n                  <MenuItem value=\"race\">Race</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'race'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"Snake length\"\r\n                                name=\"racetarget\"\r\n                                type=\"number\"\r\n                                value={racetarget}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('racetarget')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={wallCollision}\r\n                      onChange={this.handleChangeBool('wallCollision')}\r\n                      value=\"wallCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Wall collisions\"\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision && eatOpponents}\r\n                      disabled={!opponentCollision}\r\n                      onChange={this.handleChangeBool('eatOpponents')}\r\n                      value=\"eatOpponents\"\r\n                    />\r\n                )}\r\n                  label=\"Eat opponent on collision\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nSnakeSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeSetup;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass GolfSetup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      surveyPlayers: false,\r\n      nameGenerator: true,\r\n      gamemode: props.game.minigame.gamemode,\r\n      holes: props.game.minigame.holes,\r\n      opponentCollision: props.game.minigame.opponentCollision,\r\n      difficulty: props.game.minigame.difficulty,\r\n    };\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    handleChangeBool = name => (event) => {\r\n      this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    startGame = (multiplayerMode) => {\r\n      const { game, gameFunc } = this.props;\r\n      const {\r\n        surveyPlayers, nameGenerator,\r\n        opponentCollision, holes, difficulty, gamemode,\r\n      } = this.state;\r\n      const minigame = {\r\n        surveyPlayers,\r\n        nameGenerator,\r\n        multiplayerMode,\r\n        opponentCollision,\r\n        holes,\r\n        difficulty,\r\n        gamemode,\r\n      };\r\n      game.minigame = minigame;\r\n      game.phase = 'connection';\r\n      game.status = 'IN_PROGRESS';\r\n      gameFunc.update(game);\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        surveyPlayers, nameGenerator,\r\n        opponentCollision, holes, difficulty, gamemode,\r\n      } = this.state;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <Typography variant=\"h4\">Game Settings</Typography>\r\n          <Button onClick={() => this.startGame('classic')} variant=\"contained\">Classic</Button>\r\n          <Button onClick={() => this.startGame('coop')} variant=\"contained\">Co-op multiplayer</Button>\r\n          <Button onClick={() => this.startGame('team')} variant=\"contained\">Team multiplayer</Button>\r\n          <FormControl component=\"fieldset\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={nameGenerator}\r\n                    onChange={this.handleChangeBool('nameGenerator')}\r\n                    value=\"nameGenerator\"\r\n                  />\r\n                )}\r\n                label=\"Generate names for players\"\r\n              />\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">Game mode</InputLabel>\r\n                <Select\r\n                  value={gamemode || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"gamemode\"\r\n                  inputProps={{\r\n                    id: 'gamemode-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"classic\">Classic</MenuItem>\r\n                  <MenuItem value=\"wild\">Wild</MenuItem>\r\n\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {gamemode === 'classic'\r\n                            && (\r\n                            <FormControl>\r\n                              <TextField\r\n                                label=\"holes to play\"\r\n                                name=\"holes\"\r\n                                type=\"number\"\r\n                                value={holes}\r\n                                margin=\"normal\"\r\n                                onChange={this.handleChange('holes')}\r\n                              />\r\n                            </FormControl>\r\n                            )\r\n                        }\r\n              <FormControl required>\r\n                <InputLabel htmlFor=\"gametype-required\">difficulty</InputLabel>\r\n                <Select\r\n                  value={difficulty || ''}\r\n                  onChange={this.handleChangeSelect}\r\n                  name=\"difficulty\"\r\n                  inputProps={{\r\n                    id: 'difficulty-required',\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"500\">Easy</MenuItem>\r\n                  <MenuItem value=\"300\">Medium</MenuItem>\r\n                  <MenuItem value=\"100\">Hard</MenuItem>\r\n                  <MenuItem value=\"75\">Pro</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <FormControlLabel\r\n                  control={(\r\n                    <Switch\r\n                      checked={opponentCollision}\r\n                      onChange={this.handleChangeBool('opponentCollision')}\r\n                      value=\"opponentCollision\"\r\n                    />\r\n                )}\r\n                  label=\"Opponent collisions\"\r\n                />\r\n              </FormControl>\r\n              <FormControlLabel\r\n                control={(\r\n                  <Switch\r\n                    checked={surveyPlayers}\r\n                    onChange={this.handleChangeBool('surveyPlayers')}\r\n                    value=\"surveyPlayers\"\r\n                  />\r\n                )}\r\n                label=\"Survey players after game\"\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nGolfSetup.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default GolfSetup;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PhaseSetup from './PhaseSetup';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport Snake from '../snake/Snake';\r\nimport Tetris from '../tetris/Tetris';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseEnd from './PhaseEnd';\r\nimport SnakeStarting from '../snake/SnakeStarting';\r\nimport Golf from '../golf/Golf';\r\nimport GolfStarting from '../golf/GolfStarting';\r\nimport SnakeSetup from '../snake/SnakeSetup';\r\nimport GolfSetup from '../golf/GolfSetup';\r\nimport GolfLevelCompleted from '../golf/GolfLevelCompleted';\r\n\r\nclass Minigame extends PureComponent {\r\n  render() {\r\n    const { game, gameFunc } = this.props;\r\n    switch (game.gametype) {\r\n      case 'snake':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <SnakeSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <SnakeStarting game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'gameplay' && <Snake game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      case 'tetris':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <PhaseSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'gameplay' && <Tetris game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      case 'golf':\r\n        return (\r\n          <div className=\"host-container\">\r\n            {game.phase === 'setup' && <GolfSetup game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'connection' && <PhaseConnection game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'starting' && <GolfStarting game={game} gameFunc={gameFunc} />}\r\n            {(game.phase === 'gameplay' || game.phase === 'level_completed') && <Golf game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'final_result' && <PhaseFinalResult game={game} gameFunc={gameFunc} />}\r\n            {game.phase === 'end' && <PhaseEnd game={game} gameFunc={gameFunc} />}\r\n          </div>\r\n        );\r\n      default:\r\n        return (null);\r\n    }\r\n  }\r\n}\r\nMinigame.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  gameFunc: PropTypes.object.isRequired,\r\n};\r\nexport default Minigame;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass GolfLevelCompleted extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.nextPhase = this.nextPhase.bind(this);\r\n  }\r\n\r\n\r\n  nextPhase() {\r\n    this.props.gameFunc.update({ phase: 'gameplay' });\r\n  }\r\n  // på componentDidMount så starta en timer eller liknande. koppla timern till något visuellt. typ en materialUI progressbar. 0-100 som visas.\r\n  // när timern är klar så updateras phase till nästa\r\n\r\n  render() {\r\n    // vill jag ha en egen komponent som återg¨¨r till efter varje runda. eller ska jag göra som manygolf och lägga det i HUD?\r\n    // så jag aldrig lämnar spelet fören alla banor är klara.\r\n    // mindre att spara till firebase i guess. kan hålla round helt i state. får generera om level. efter varje bana är klar.\r\n    // kan ha manan i bakgrunden precis som i manygolf\r\n    // använd drawHud till att rita leaderboard om level är done.\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <Typography variant=\"h2\">Golf leaderboard</Typography>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GolfLevelCompleted;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../base';\r\nimport Quiz from '../quiz/host/Quiz';\r\nimport Minigame from '../minigame/host/Minigame';\r\n\r\nclass Host extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n      gameId: localStorage.getItem('RecentGameId') || '',\r\n      password: '',\r\n\r\n    };\r\n    this.updateGame = this.updateGame.bind(this);\r\n    this.fetchGame = this.fetchGame.bind(this);\r\n    this.initGameListiner = this.initGameListiner.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.quitGame = this.quitGame.bind(this);\r\n    this.endGame = this.endGame.bind(this);\r\n  }\r\n\r\n    handleChange = name => (event) => {\r\n      this.setState({\r\n        [name]: event.target.value,\r\n      });\r\n    };\r\n\r\n    updateGame(gameupdate) {\r\n      const { showSnackbar } = this.props;\r\n      const { game } = this.state;\r\n      // se till att inte updatera game.players...\r\n      // game som kommer in här ska bara innehålla det som ska uppdateras.\r\n      // updateras med gamesettings, phasechanges, currenquestionId etc\r\n      fire.database().ref(`games/${game.key}`).update(gameupdate, (error) => {\r\n        if (error) {\r\n          const snack = {\r\n            variant: 'error',\r\n            message: 'Unexpected internal error',\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n    }\r\n\r\n    restartGame() {\r\n      const game = {};\r\n      game.players = [];\r\n      game.phase = 'setup';\r\n      this.updateGame(game);\r\n    }\r\n\r\n    quitGame() {\r\n      const { toggleHeader } = this.props;\r\n      this.updateGame({ phase: null });\r\n      toggleHeader(true);\r\n    }\r\n\r\n    endGame() {\r\n      this.updateGame({ phase: 'final_result' });\r\n    }\r\n\r\n\r\n    fetchGame() {\r\n      const { gameId, password } = this.state;\r\n      const { showSnackbar, toggleHeader } = this.props;\r\n      const that = this;\r\n      fire.database().ref('games').orderByChild('gameId').equalTo(gameId)\r\n        .once('value', (snapshot) => {\r\n          if (snapshot.val()) {\r\n            let game;\r\n            snapshot.forEach((child) => {\r\n              game = child.val();\r\n            });\r\n            if (game.password === password) {\r\n              that.initGameListiner(game.key);\r\n              toggleHeader();\r\n            } else {\r\n              const snack = {\r\n                variant: 'error',\r\n                message: 'Could not find matching game',\r\n              };\r\n              showSnackbar(snack);\r\n            }\r\n          } else {\r\n            const snack = {\r\n              variant: 'info',\r\n              message: 'No game found',\r\n            };\r\n            showSnackbar(snack);\r\n          }\r\n        });\r\n    }\r\n\r\n    initGameListiner(gameKey) {\r\n      const gameRef = fire.database().ref(`games/${gameKey}`);\r\n      const that = this;\r\n      gameRef.on('value', (snapshot) => {\r\n        const game = snapshot.val();\r\n        if (!game.phase) {\r\n          game.phase = 'setup';\r\n        }\r\n        if (game) {\r\n          // kan blir problem med asynch setstate?\r\n          that.setState({\r\n            game,\r\n          });\r\n        } else {\r\n          that.setState({\r\n            game: '',\r\n          });\r\n        }\r\n      });\r\n      // koppla game till gameKey\r\n      // lägg till en likadan listener i Play.\r\n      // hosts gamelistiner ska lyssna på alla ändringar. Play ska inte lyssna på andra players ändringar om det går. något att optimera i framtiden.\r\n      // ett alt är att lyfta ut Players till en egen root? kan lägga phase och currentq i en game.state och sen är det allt som Player lyssnar på?\r\n      // men play behöver också behöva synca sin egna player.\r\n    }\r\n\r\n    render() {\r\n      // behöver bara updatera phase till firebase när det är phases som play bryr sig om. t.ex. inte setup då play bara kan connecta till games som är i phase==connection\r\n      // lägg till två rutor här för att söka fram ett game med hjälp av gameid och pass.\r\n\r\n      // strukturera filerna för host och play. kommentera i varje fil vad syftet med den är. vad den ska updatera i game etc.\r\n      // HostSetup updates settings and sets phase to connection on action\r\n      // connection shows players and sets phase to starting on action\r\n      // starting shows a countdown sets phase to awating_question and currentQuestion to 0(or some id) after countdown\r\n      // awaiting_question shows countdown and sets phase to show question after countdown\r\n      // show_question shows question and sets phase to answer after countdown\r\n      // answer shows q&a, countdown, nrPlayersAnswered, sets phase to result_question after countdown\r\n      // result_question shows stats about the answers, correct answer, hightscorelist etc, sets phase to awaiting_question and currentQuestion++ on action.\r\n      // result_question sets phase to final_result if questions are all done.\r\n      // final_result shows result of all players. top 3 and/or all. sets phase to end on action\r\n      // end shows options for replay, export result, etc.\r\n      const { gameId, password, game } = this.state;\r\n      const { showSnackbar, toggleHeader } = this.props;\r\n      const gameFunctions = {\r\n        update: this.updateGame,\r\n        restart: this.restartGame,\r\n        end: this.endGame,\r\n        quit: this.quitGame,\r\n      };\r\n      if (!game.phase) {\r\n        return (\r\n          <div className=\"page-container host-page\">\r\n            <FormControl>\r\n              <TextField\r\n                label=\"Game PIN\"\r\n                name=\"Game ID\"\r\n                value={gameId}\r\n                margin=\"normal\"\r\n                onChange={this.handleChange('gameId')}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <TextField\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                margin=\"normal\"\r\n                value={password}\r\n                onChange={this.handleChange('password')}\r\n              />\r\n            </FormControl>\r\n            <Button onClick={this.fetchGame} variant=\"contained\">Fetch</Button>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className=\"page-container host-page\">\r\n          {game.gametype === 'quiz' && <Quiz game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'snake' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'tetris' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n          {game.gametype === 'golf' && <Minigame game={game} gameFunc={gameFunctions} />}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nHost.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  toggleHeader: PropTypes.func.isRequired,\r\n};\r\nexport default Host;\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseConnection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            authId: '',\r\n            playerCreated: false,\r\n        };\r\n        this.createPlayer = this.createPlayer.bind(this);\r\n        this.generateName = this.generateName.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        //problem vid restart så skapas en ny användare. test spara playerkey till localhost och testa använda den keyn om den passar\r\n        if (!this.props.playerKey && this.props.game.quiz.nameGenerator) {\r\n            this.props.addPlayer(this.generatePlayer());\r\n        }\r\n    }\r\n    createPlayer() {\r\n        //validera så att namnet inte är taget.\r\n        let player = {\r\n            name: this.state.name,\r\n            score: 0,\r\n\r\n        }\r\n        this.props.addPlayer(player);\r\n        this.setState({ playerCreated: true });\r\n    }\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    generatePlayer() {\r\n        //skriv upp en lista med namn. kanske använda två arrayer en med adjekktiv och en med substantiv \"crazy tomato\" etc. \r\n        //använd generateName(this.game.players) den randomar ett namn, kollar om namnet redan finns och randomar igen isåfall.\r\n        //randomar xx antal gånger sen lägger den till ett extra adjektiv\r\n        let name = this.generateName();\r\n        let player = {\r\n            name: name,\r\n            score: 0,\r\n        }\r\n        return player;\r\n    }\r\n    generateName() {\r\n        let adjectives = [\"adamant\", \"adroit\", \"amatory\", \"animistic\", \"antic\", \"arcadian\", \"baleful\", \"bellicose\", \"bilious\", \"boorish\", \"calamitous\", \"caustic\", \"cerulean\", \"comely\", \"concomitant\", \"contumacious\", \"corpulent\", \"crapulous\", \"defamatory\", \"didactic\", \"dilatory\", \"dowdy\", \"efficacious\", \"effulgent\", \"egregious\", \"endemic\", \"equanimous\", \"execrable\", \"fastidious\", \"feckless\", \"fecund\", \"friable\", \"fulsome\", \"garrulous\", \"guileless\", \"gustatory\", \"heuristic\", \"histrionic\", \"hubristic\", \"incendiary\", \"insidious\", \"insolent\", \"intransigent\", \"inveterate\", \"invidious\", \"irksome\", \"jejune\", \"jocular\", \"judicious\", \"lachrymose\", \"limpid\", \"loquacious\", \"luminous\", \"mannered\", \"mendacious\", \"meretricious\", \"minatory\", \"mordant\", \"munificent\", \"nefarious\", \"noxious\", \"obtuse\", \"parsimonious\", \"pendulous\", \"pernicious\", \"pervasive\", \"petulant\", \"platitudinous\", \"precipitate\", \"propitious\", \"puckish\", \"querulous\", \"quiescent\", \"rebarbative\", \"recalcitant\", \"redolent\", \"rhadamanthine\", \"risible\", \"ruminative\", \"sagacious\", \"salubrious\", \"sartorial\", \"sclerotic\", \"serpentine\", \"spasmodic\", \"strident\", \"taciturn\", \"tenacious\", \"tremulous\", \"trenchant\", \"turbulent\", \"turgid\", \"ubiquitous\", \"uxorious\", \"verdant\", \"voluble\", \"voracious\", \"wheedling\", \"withering\", \"zealous\"];\r\n        let nouns = [\"ninja\", \"chair\", \"pancake\", \"statue\", \"unicorn\", \"rainbows\", \"laser\", \"senor\", \"bunny\", \"captain\", \"nibblets\", \"cupcake\", \"carrot\", \"gnomes\", \"glitter\", \"potato\", \"salad\", \"toejam\", \"curtains\", \"beets\", \"toilet\", \"exorcism\", \"stick figures\", \"mermaid eggs\", \"sea barnacles\", \"dragons\", \"jellybeans\", \"snakes\", \"dolls\", \"bushes\", \"cookies\", \"apples\", \"ice cream\", \"ukulele\", \"kazoo\", \"banjo\", \"opera singer\", \"circus\", \"trampoline\", \"carousel\", \"carnival\", \"locomotive\", \"hot air balloon\", \"praying mantis\", \"animator\", \"artisan\", \"artist\", \"colorist\", \"inker\", \"coppersmith\", \"director\", \"designer\", \"flatter\", \"stylist\", \"leadman\", \"limner\", \"make-up artist\", \"model\", \"musician\", \"penciller\", \"producer\", \"scenographer\", \"set decorator\", \"silversmith\", \"teacher\", \"auto mechanic\", \"beader\", \"bobbin boy\", \"clerk of the chapel\", \"filling station attendant\", \"foreman\", \"maintenance engineering\", \"mechanic\", \"miller\", \"moldmaker\", \"panel beater\", \"patternmaker\", \"plant operator\", \"plumber\", \"sawfiler\", \"shop foreman\", \"soaper\", \"stationary engineer\", \"wheelwright\", \"woodworkers\"];\r\n        let finalName = \"\";\r\n        let currentNames = [];\r\n        if (this.props.game.players) {\r\n            currentNames = Object.values(this.props.game.players).map(a => a.name);\r\n        }\r\n        for (let i = 0; i < 20; i++) {\r\n            let name = \"\";\r\n            if (i > 10) {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            } else {\r\n                name = adjectives[Math.floor(Math.random() * adjectives.length)] + \" \" + nouns[Math.floor(Math.random() * nouns.length)];\r\n            }\r\n            if (currentNames.indexOf(name) > -1) {\r\n                continue;\r\n            } else {\r\n                finalName = name;\r\n                break;\r\n            }\r\n        }\r\n        return finalName;\r\n\r\n    }\r\n\r\n    render() {\r\n        let players = this.props.game.players;\r\n        let playerName = '';\r\n        if (players && this.props.playerKey) {\r\n            playerName = players[this.props.playerKey].name;\r\n        }\r\n        let playersInLobby = [];\r\n        if (players) {\r\n            playersInLobby = Object.values(players);\r\n        }\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    {playerName &&\r\n                        <div >\r\n                            <div className=\"quiz-top-section\">\r\n                                <Typography variant=\"h5\">Welcome <span className=\"dynamic-text\">{playerName}</span>! </Typography>\r\n\r\n                            </div>\r\n                            <div className='quiz-middle-section'>\r\n                                <Typography paragraph variant=\"subtitle1\">Players in lobby</Typography>\r\n                                <Grid container>\r\n                                    {playersInLobby.map((player, index) =>\r\n                                        <Grid key={player.key} item md={3} xs={6}>\r\n                                            <Typography paragraph variant=\"body1\">{player.name}</Typography>\r\n                                        </Grid>)}\r\n                                </Grid>\r\n\r\n                            </div>\r\n                            <div className=\"quiz-bottom-section\">\r\n                                <Typography paragraph variant=\"subtitle1\">Waiting for the host to start the game</Typography>\r\n\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {!playerName &&\r\n                        <div>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('name')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    {playerName &&\r\n                        <div >\r\n                            <div className=\"quiz-top-section\">\r\n                            </div>\r\n                            <div className='quiz-middle-section'>\r\n                                <Typography variant=\"h5\">Welcome <span className=\"dynamic-text\">{playerName}</span>!</Typography>\r\n                                <Typography variant=\"subtitle1\"> Watch the screen, your name should show.</Typography>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"quiz-bottom-section\">\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {!playerName &&\r\n                        <div>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    label=\"Name\"\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    margin=\"normal\"\r\n                                    onChange={this.handleChange('name')}\r\n                                />\r\n                            </FormControl>\r\n                            <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseConnection;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseStarting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        <Typography variant=\"h5\">Starting quiz</Typography>\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <CountdownAnimation speed=\"slow\" />\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Starting quiz...</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseStarting;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport CountdownAnimation from '../../common/CountdownAnimation';\r\n\r\nclass PhaseAwaitingQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                        <Typography variant=\"h5\">Loading question</Typography>\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <CountdownAnimation speed=\"slow\" />\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the screen.</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseAwaitingQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass PhaseShowQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.props.game.quiz.remoteMode) {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">{this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the question on the screen!</Typography>\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseShowQuestion;","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnswerOption from '../AnswerOption';\r\n\r\nclass PhaseAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: 0,\r\n      question: {},\r\n      hasAnswered: false,\r\n      selectedAnswer: '',\r\n    };\r\n    this.answerQuestion = this.answerQuestion.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const question = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion];\r\n    this.setState({ question, startTime: Date.now() });\r\n  }\r\n\r\n    answerQuestion = (answer) => {\r\n      this.setState({ selectedAnswer: answer, hasAnswered: true });\r\n      const answerTime = Date.now() - this.state.startTime;\r\n      const correct = this.state.question.correctAnswers.indexOf(answer) > -1;\r\n      let score = 0;\r\n      // använd object speed={easy: 100, medium: 200, hard:300} score += speed[question.difficulty]\r\n      if (correct) {\r\n        switch (this.state.question.difficulty) {\r\n          case 'easy':\r\n            score += 100;\r\n            break;\r\n          case 'medium':\r\n            score += 200;\r\n            break;\r\n          case 'hard':\r\n            score += 300;\r\n            break;\r\n          case undefined:\r\n            score += 200;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        if (this.props.game.quiz.timelimit && this.state.question.timelimit) {\r\n          // let timeRemaining = this.state.question.timelimit - answerTime;\r\n          const timeFactorUsed = answerTime / (this.state.question.timelimit * 1000);\r\n          const timeBonus = Math.floor((score / Math.max(0.2, timeFactorUsed)) / 10);\r\n          score += timeBonus;\r\n        }\r\n      }\r\n      const playerAnswer = {\r\n        answer,\r\n        score,\r\n        answerTime,\r\n        questionId: this.state.question.id,\r\n      };\r\n      this.props.saveAnswer(playerAnswer);\r\n    };\r\n\r\n    render() {\r\n        let answers = [];\r\n        if (this.props.game) {\r\n            answers = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].answers;\r\n        }\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            if (this.state.hasAnswered) {\r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                            <Typography paragraph variant=\"h5\">\r\n                                {this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className='quiz-middle-section'>\r\n                            <Typography variant=\"body1\">\r\n                                You answered: <span className=\"dynamic-text\">{this.state.selectedAnswer}</span> \r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-bottom-section\">\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } \r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                            <Typography variant=\"h5\">\r\n                                {this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].question}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-middle-and-bottom-section\">\r\n                            <Grid container spacing={8} className=\"full-height\">\r\n                                {answers.map((answer, index) =>\r\n                                    <Grid key={index} item xs={6}>\r\n                                        <AnswerOption answer={answer} index={index} answerQuestion={this.answerQuestion} remoteMode={true} />\r\n                                    </Grid>)}\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            \r\n        } \r\n            if (this.state.hasAnswered) {\r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-top-section\">\r\n                        </div>\r\n                        <div className='quiz-middle-section'>\r\n                            <Typography variant=\"body1\">\r\n                                You answered: <span className=\"dynamic-text\">{this.state.selectedAnswer}</span>\r\n                            </Typography>\r\n                        </div>\r\n                        <div className=\"quiz-bottom-section\">\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } \r\n                return (\r\n                    <div className=\"phase-container\">\r\n                        <div className=\"quiz-complete-section\">\r\n                            <Grid container spacing={8} className=\"full-height\">\r\n                                {answers.map((answer, index) =>\r\n                                    <Grid key={index} item xs={6}>\r\n                                        <AnswerOption answer={answer} index={index} answerQuestion={this.answerQuestion} />\r\n                                    </Grid>)}\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            \r\n        \r\n    }\r\n}\r\nexport default PhaseAnswer;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Podium from '../Podium';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nclass PhaseFinalResult extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: null\r\n        };\r\n        this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n    }\r\n    handleChange = panel => (event, expanded) => {\r\n        this.setState({\r\n            expanded: expanded ? panel : false,\r\n        });\r\n    };\r\n    getPlayerAnswerData() {\r\n        let answerDataList = [];\r\n\r\n        let currentPlayer = this.props.game.players[this.props.playerKey];\r\n\r\n        for (let i = 0; i < this.props.game.quiz.questions.length; i++) {\r\n            let answerData = {\r\n                question: {},\r\n                score: 0,\r\n                time: 0,\r\n                answer: '',\r\n            };\r\n            let question = this.props.game.quiz.questions[i];\r\n\r\n            if (currentPlayer.answers[question.id]) {\r\n                answerData.score = currentPlayer.answers[question.id].score;\r\n                answerData.answer = currentPlayer.answers[question.id].answer;\r\n                answerData.time = currentPlayer.answers[question.id].answerTime;\r\n            } else {\r\n                answerData.score = 0;\r\n                answerData.answer = \"no answer\";\r\n                answerData.time = 0;\r\n            }\r\n            answerData.question = question;\r\n\r\n            answerDataList.push(answerData);\r\n        }\r\n        return answerDataList;\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.game.quiz.remoteMode) {\r\n            let playerData = this.getPlayerAnswerData();\r\n            return (<div className=\"phase-container\">\r\n                <div className=\"quiz-top-section\">\r\n                    <Typography variant=\"h5\">Quiz finished</Typography>\r\n                </div>\r\n                <div className='quiz-middle-section'>\r\n                    <Typography variant=\"subtitle1\">You finished\r\n                        <span className=\"dynamic-text\">2nd</span> with a score of  <span className=\"dynamic-text\">560</span>\r\n                    </Typography>\r\n                    <ExpansionPanel>\r\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography >Final scoretable</Typography>\r\n                        </ExpansionPanelSummary>\r\n                        <ExpansionPanelDetails>\r\n                            <div>\r\n                                <Podium game={this.props.game} />\r\n                            </div>\r\n                        </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n                    <ExpansionPanel>\r\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                            <Typography>Your own data</Typography>\r\n                        </ExpansionPanelSummary>\r\n                        <ExpansionPanelDetails style={{display:'block'}}>\r\n                            {playerData.map((data, index) =>\r\n                                <ExpansionPanel key={data.question.id} expanded={this.state.expanded === data.question.id} onChange={this.handleChange(data.question.id)}>\r\n                                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                                        <Typography variant=\"subtitle1\">{data.question.question}</Typography>\r\n                                        <Typography variant=\"subtitle2\">{data.score}pt</Typography>\r\n                                    </ExpansionPanelSummary>\r\n                                    <ExpansionPanelDetails>\r\n                                        <Typography>Your answer: {data.answer}</Typography>\r\n                                        <Typography>Your time: {data.time/1000}sec</Typography>\r\n\r\n                                        <Typography variant=\"subtitle1\" align=\"left\">Correct answers</Typography>\r\n                                        <List>\r\n                                            {data.question.correctAnswers.map((answer, index) =>\r\n                                                <ListItem key={answer}>\r\n                                                    <ListItemText\r\n                                                        primary={answer}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            )}\r\n                                        </List>\r\n                                        <Typography variant=\"subtitle1\" align=\"left\">Wrong answers</Typography>\r\n                                        <List>\r\n                                            {data.question.wrongAnswers.map((answer, index) =>\r\n                                                <ListItem key={answer}>\r\n                                                    <ListItemText\r\n                                                        primary={answer}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            )}\r\n                                        </List>\r\n                                    </ExpansionPanelDetails>\r\n                                </ExpansionPanel>\r\n                            )}\r\n                        </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n\r\n                </div>\r\n                <div className=\"quiz-bottom-section\">\r\n                </div>\r\n            </div>);\r\n        } else {\r\n            return (\r\n                <div className=\"phase-container\">\r\n                    <div className=\"quiz-top-section\">\r\n                    </div>\r\n                    <div className='quiz-middle-section'>\r\n                        <Typography variant=\"h5\">Look at the screen.</Typography>\r\n\r\n                    </div>\r\n                    <div className=\"quiz-bottom-section\">\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default PhaseFinalResult;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport AnswerOption from '../AnswerOption';\r\nimport AnswerChart from '../AnswerChart';\r\nimport Leaderboard from '../Leaderboard';\r\n\r\nPlayerQuestionResult.propTypes = {\r\n  playerData: PropTypes.object.isRequired,\r\n};\r\nfunction PlayerQuestionResult(props) {\r\n  const { playerData } = props;\r\n  const wrongAnswer = playerData.hasAnswered && playerData.currentQuestionScore === 0;\r\n  const correctAnswer = playerData.currentQuestionScore > 0;\r\n  return (\r\n    <div>\r\n      {correctAnswer > 0 && <Typography variant=\"h5\">Correct answer!</Typography>}\r\n      {wrongAnswer && <Typography variant=\"h5\">Wrong answer!</Typography>}\r\n      {!playerData.hasAnswered && <Typography variant=\"h5\">You did not answer the question</Typography>}\r\n      {playerData.hasAnswered && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <div>\r\n            <span>Score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.currentQuestionScore}</span>\r\n          </div>\r\n          <div>\r\n            <span>Time: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.answerTime}</span>\r\n          </div>\r\n          <div>\r\n            <span>Total score: </span>\r\n            {' '}\r\n            <span className=\"dynamic-text\">{playerData.totalScore}</span>\r\n          </div>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition !== playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Old position:</span>\r\n          <span>\r\n            {' '}\r\n            {playerData.oldLeaderboardPosition}\r\n          </span>\r\n          <span>New position: </span>\r\n          <span>{playerData.newLeaderboardPosition}</span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n      {playerData.oldLeaderboardPosition === playerData.newLeaderboardPosition && (\r\n      <div>\r\n        <Typography variant=\"body1\">\r\n          <span>Position: </span>\r\n          <span>\r\n            {' '}\r\n            {playerData.newLeaderboardPosition}\r\n          </span>\r\n        </Typography>\r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nclass PhaseResultQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getPlayerAnswerData = this.getPlayerAnswerData.bind(this);\r\n  }\r\n\r\n  getPlayerAnswerData() {\r\n    const { game, playerKey } = this.props;\r\n    const answerData = {\r\n      totalScore: 0,\r\n      currentQuestionScore: 0,\r\n      newLeaderboardPosition: 1,\r\n      oldLeaderboardPosition: 1,\r\n      answerTime: 0,\r\n      hasAnswered: false,\r\n    };\r\n    const currentQuestion = game.quiz.questions[game.quiz.currentQuestion];\r\n    const currentPlayer = game.players[playerKey];\r\n    // answers kan vara undefined. refactorera hela klassen\r\n    // den här läsningen håller inte. kan bli fel värden som man missar att svara på en fråga.\r\n    // gör om till reduce och se om det ska vara iteration på answers eller på quiz.questions kanske?\r\n\r\n    for (let j = 0; j < game.quiz.questions.length; j++) {\r\n      const question = game.quiz.questions[j];\r\n      const answer = currentPlayer.answers ? currentPlayer.answers[question.id] : false;\r\n      if (answer) {\r\n        if (answer.questionId === currentQuestion.id) {\r\n          answerData.hasAnswered = true;\r\n          answerData.currentQuestionScore = answer.score;\r\n          answerData.answerTime = answer.answerTime;\r\n        }\r\n        answerData.totalScore += answer.score;\r\n      }\r\n    }\r\n\r\n    const playerKeys = game.players ? Object.keys(game.players) : [];\r\n    for (let i = 0; i < playerKeys.length; i++) {\r\n      if (playerKeys[i] === currentPlayer.key) {\r\n        continue;\r\n      }\r\n      const opponent = game.players[playerKeys[i]];\r\n      let totalScore = 0;\r\n      let currentQuestionScore = 0;\r\n      for (let j = 0; j < game.quiz.questions.length; j++) {\r\n        const question = game.quiz.questions[j];\r\n        const answer = opponent.answers ? opponent.answers[question.id] : false;\r\n        if (answer) {\r\n          if (answer.questionId === currentQuestion.id) {\r\n            currentQuestionScore = answer.score;\r\n          }\r\n          totalScore += answer.score;\r\n        }\r\n      }\r\n      if (totalScore > answerData.totalScore) {\r\n        answerData.newLeaderboardPosition += 1;\r\n      }\r\n      if (totalScore - currentQuestionScore > answerData.totalScore - answerData.currentQuestionScore) {\r\n        answerData.oldLeaderboardPosition += 1;\r\n      }\r\n    }\r\n\r\n    return answerData;\r\n  }\r\n\r\n  render() {\r\n    const { game } = this.props;\r\n    const playerData = this.getPlayerAnswerData();\r\n\r\n    if (game.quiz.remoteMode) {\r\n      let currentQuestion;\r\n      if (game) {\r\n        currentQuestion = game.quiz.questions[game.quiz.currentQuestion];\r\n      }\r\n      const { answers } = currentQuestion;\r\n      return (\r\n        <div className=\"phase-container\">\r\n          <div className=\"quiz-top-section\">\r\n            <PlayerQuestionResult playerData={playerData} />\r\n          </div>\r\n          <div className=\"quiz-middle-section\">\r\n            <Grid container>\r\n              <Grid item md={6} xs={12}>\r\n                <div className=\"quiz-answer-chart\">\r\n\r\n                  <AnswerChart game={game} />\r\n                </div>\r\n              </Grid>\r\n              <Grid item md={6} xs={12}>\r\n                <div>\r\n                  <Leaderboard game={game} />\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n          <div className=\"quiz-bottom-section\">\r\n            <Grid container>\r\n              {answers.map((answer, index) => (\r\n                <Grid key={answer} item xs={6}>\r\n                  <AnswerOption answer={answer} index={index} />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <PlayerQuestionResult playerData={playerData} />\r\n        </div>\r\n        <div className=\"quiz-bottom-section\">\r\n          <Typography variant=\"subtitle1\">Look at the screen to se overall player results</Typography>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseResultQuestion.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string.isRequired,\r\n};\r\nexport default PhaseResultQuestion;\r\n","import React, { Component } from 'react';\r\nimport { fire } from '../../../base';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseAwaitingQuestion from './PhaseAwaitingQuestion';\r\nimport PhaseShowQuestion from './PhaseShowQuestion';\r\nimport PhaseAnswer from './PhaseAnswer';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport PhaseResultQuestion from './PhaseResultQuestion';\r\nimport PhaseEnd from './PhaseEnd';\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n        this.saveAnswer = this.saveAnswer.bind(this);\r\n    }\r\n\r\n    saveAnswer(answer) {\r\n        let that = this;\r\n        let currentQuestionId = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id;\r\n        fire.database().ref('/games/' + that.props.game.key + '/players/' + this.props.playerKey + '/answers/' + currentQuestionId).set(answer, function (error) {\r\n            if (error) {\r\n                let snack = {\r\n                    variant: \"error\",\r\n                    message: \"Unexpected internal error\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n            else {\r\n                let snack = {\r\n                    variant: \"success\",\r\n                    message: \"Successfully updated player!\"\r\n                }\r\n                that.props.showSnackbar(snack);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let lastPhase = this.props.game.phase === \"final_result\" || this.props.game.phase === \"end\";\r\n        return (\r\n            <div className=\"play-container\">\r\n                {this.props.game.phase === \"connection\" && <PhaseConnection game={this.props.game} addPlayer={this.props.createPlayer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"starting\" && <PhaseStarting game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"awaiting_question\" && <PhaseAwaitingQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"show_question\" && <PhaseShowQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} />}\r\n                {this.props.game.phase === \"answer\" && <PhaseAnswer game={this.props.game} saveAnswer={this.saveAnswer} playerKey={this.props.playerKey} />}\r\n                {this.props.game.phase === \"result_question\" && <PhaseResultQuestion game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n                {lastPhase  && <PhaseFinalResult game={this.props.game} updatePlayer={this.props.updatePlayer} playerKey={this.props.playerKey} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React, { Component } from 'react';\r\n\r\nclass PhaseEnd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                PlayEnd\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhaseEnd;","import React, { Component, Fragment } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport * as util from './GolfUtil';\r\nimport { fire } from '../../../base';\r\nimport './golf.css';\r\nimport {\r\n  MAX_POWER,\r\n  MIN_POWER,\r\n  CLUBS,\r\n  BALL_RADIUS,\r\n  AIR_COLOR,\r\n  GRASS_COLOR,\r\n  BALL_RADIUS_CONTROLLER,\r\n  PLAYER_COLORS,\r\n} from './GolfConstants';\r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    height: '100vh',\r\n    width: '100vw',\r\n  },\r\n  canvas: {\r\n  },\r\n  header: {\r\n    height: 80,\r\n  },\r\n  footer: {\r\n    height: 80,\r\n    marginTop: '-4px',\r\n  },\r\n});\r\n\r\nlet canvas;\r\nlet ctx;\r\n\r\nfunction drawBall(x, y, fill, stroke, playerState) {\r\n  ctx.lineWidth = 1;\r\n  ctx.fillStyle = fill;\r\n  ctx.strokeStyle = stroke;\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS_CONTROLLER, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n  ctx.closePath();\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, BALL_RADIUS_CONTROLLER - ctx.lineWidth / 2, 0, 2 * Math.PI);\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n}\r\n\r\nfunction drawSwing(swingData) {\r\n  const len = swingData.length;\r\n  // test om den här. det ska vara hela swingen efter att den är klar som ritas.\r\n  // kolla på drawGround etc. där behöver jag inte loopa beginpath och stroke etc. utan jag har istöället en start pos\r\n  const prevSwing = { y: canvas.height - (BALL_RADIUS_CONTROLLER * 2), x: canvas.width / 2 };\r\n  for (let i = 0; i < len; i++) {\r\n    const newY = prevSwing.y + (Math.round(swingData[i].z));\r\n    const newX = prevSwing.x + (Math.round(swingData[i].y));\r\n    ctx.beginPath();\r\n    ctx.moveTo(prevSwing.x, prevSwing.y);\r\n    ctx.lineTo(newX, newY);\r\n    ctx.stroke();\r\n    prevSwing.y = newY;\r\n    prevSwing.x = newX;\r\n  }\r\n}\r\nfunction drawEnvironment(x, y, groundColor, stroke) {\r\n  ctx.fillStyle = GRASS_COLOR;\r\n  ctx.fillRect(0, y - BALL_RADIUS_CONTROLLER, x, BALL_RADIUS_CONTROLLER);\r\n  // groundcolor längst ner\r\n  // GRASS_COLOR är stroke\r\n  // WITH på\r\n  // AIR_COLOR är överdelen\r\n}\r\nfunction drawStrokes(x, y, strokes) {\r\n  ctx.font = '28px roboto';\r\n  ctx.fillStyle = '#000000';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillText(`Slag: ${strokes}`, x, y);\r\n}\r\n\r\nfunction drawDistance(x, y, distance) {\r\n  ctx.font = '24px roboto';\r\n  ctx.fillStyle = '#000000';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillText(`Distance: ${distance} yards`, x, 24);\r\n}\r\nfunction drawScoreText(x, y, player) {\r\n  ctx.font = '22px roboto';\r\n  ctx.fillStyle = '#000000';\r\n  ctx.textAlign = 'center';\r\n  ctx.fillText(`You scored with ${player.swing.strokes} strokes in ${player.scoreTime} seconds`, x, y);\r\n}\r\nfunction clearCanvas() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\nclass GolfController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // sätt det här till rätt höjd. det ska vara windowheight - header - footer\r\n    const canvasHeight = Math.floor(window.innerHeight - 160);\r\n    const canvasWidth = Math.floor(window.innerWidth);\r\n    this.state = {\r\n      highestAcceleration: 0,\r\n      isSwinging: false,\r\n      swingData: [],\r\n      clubIndex: 0,\r\n      canvasHeight,\r\n      canvasWidth,\r\n    };\r\n    this.renderFrame = this.renderFrame.bind(this);\r\n    this.saveSwing = this.saveSwing.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    canvas = document.getElementById('swingcanvas');\r\n    ctx = canvas.getContext('2d');\r\n    ctx.translate(0.5, 0.5);\r\n    const that = this;\r\n    canvas.addEventListener('touchstart', (e) => {\r\n      const event = e || window.event;\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      that.setState(() => {\r\n        const highestAcceleration = 0;\r\n        const swingData = [];\r\n        const isSwinging = true;\r\n        return { highestAcceleration, swingData, isSwinging };\r\n      });\r\n      clearCanvas();\r\n      this.renderFrame();\r\n\r\n      // e.preventDefault();\r\n    }, false);\r\n\r\n    canvas.addEventListener('touchend', (e) => {\r\n      const event = e || window.event;\r\n      event.preventDefault();\r\n      event.stopPropagation(); const { swingData } = that.state;\r\n      that.setState(() => {\r\n        const isSwinging = false;\r\n        return { isSwinging };\r\n      });\r\n      this.renderFrame();\r\n      this.saveSwing();\r\n      // e.preventDefault();\r\n    }, false);\r\n\r\n\r\n    window.addEventListener('devicemotion', (e) => {\r\n      const event = e || window.event;\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      const { isSwinging, swingData, highestAcceleration } = that.state;\r\n      if (isSwinging) {\r\n        const { x, y, z } = event.acceleration;\r\n        swingData.push({ x: Math.round(x * 2), y: Math.round(y * 2), z: Math.round(z * 2) });\r\n        // this.drawSwing([{ x: Math.round(x * 2), y: Math.round(y * 2), z: Math.round(z * 2) }]);\r\n        const power = x + z;\r\n        if (power > highestAcceleration) {\r\n          that.setState(() => ({ highestAcceleration: power, swingData }));\r\n        } else {\r\n          that.setState(() => swingData);\r\n        }\r\n      }\r\n    }, true);\r\n    this.renderFrame();\r\n  }\r\n\r\n  handleChangeSelect = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n\r\n  saveSwing() {\r\n    const { playerKey, game } = this.props;\r\n    const {\r\n      isSwinging, swingData, highestAcceleration, clubIndex,\r\n    } = this.state;\r\n    const currentPlayer = game.players[playerKey];\r\n    if (currentPlayer.state !== 'STILL') {\r\n      alert('ball is not still');\r\n      return;\r\n    }\r\n    if (game.phase !== 'gameplay') {\r\n      alert('game is not playing');\r\n      return;\r\n    }\r\n\r\n    if (util.isInvalidSwing(swingData)) {\r\n      alert('invalid swing');\r\n      return;\r\n    }\r\n    // ska bara kunna används wood på första slaget? ge det lite extra power\r\n    const club = CLUBS[clubIndex];\r\n    const swing = util.getSwingData(club, highestAcceleration);\r\n    swing.strokes = currentPlayer.swing.strokes + 1;\r\n\r\n    // test\r\n    // test\r\n\r\n\r\n    fire.database().ref(`/games/${game.key}/players/${playerKey}/swing`).set(swing, (error) => {\r\n      if (error) {\r\n        console.log('error updated swing move');\r\n      } else {\r\n        console.log('saved swing success');\r\n      }\r\n    });\r\n  }\r\n\r\n  renderFrame() {\r\n    const { game, playerKey, classes } = this.props;\r\n    const { swingData } = this.state;\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n    const currentPlayer = game.players[playerKey];\r\n\r\n    ctx.lineWidth = 4;\r\n    const background = new Image();\r\n    background.src = 'https://i.imgur.com/DE8oR5A.png';\r\n\r\n    background.onload = function () {\r\n      ctx.drawImage(background, 0, 0, canvas.width, canvas.height);\r\n      if (currentPlayer.state === 'STILL') {\r\n        drawStrokes(canvas.width / 2, canvas.height / 2, currentPlayer.swing.strokes);\r\n        drawBall(canvas.width / 2, canvas.height - (BALL_RADIUS_CONTROLLER * 2), currentPlayer.color, 'gray');\r\n        drawDistance(canvas.width / 2, canvas.height / 2, currentPlayer.distance);\r\n      } else if (currentPlayer.state === 'SCORED') {\r\n        drawScoreText(canvas.width / 2, canvas.height / 2, currentPlayer);\r\n      }\r\n      drawSwing(swingData);\r\n      drawEnvironment(canvas.width, canvas.height, game.minigame.levelColor, 'gray');\r\n    };\r\n  }\r\n\r\n  // man ska kunna swinga hela tiden men det är bara när player.state är 'STILL' som en boll rendreras och swingen kan sparas.\r\n  // lägg till en selectbox där man väljer klubba som står loftAngle.\r\n  // lägg till en snyggare powermätare. använd någon riktigt visuel mätare\r\n  render() {\r\n    const { game, playerKey, classes } = this.props;\r\n    const {\r\n      highestAcceleration, isSwinging, canvasHeight, canvasWidth, clubIndex,\r\n    } = this.state;\r\n    this.renderFrame();\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className={classes.container}>\r\n          <div className={classes.header}>\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"clubc-required\">Club</InputLabel>\r\n              <Select\r\n                value={clubIndex || 0}\r\n                onChange={this.handleChangeSelect}\r\n                name=\"clubIndex\"\r\n                inputProps={{\r\n                  id: 'club-required',\r\n                }}\r\n              >\r\n                {CLUBS.map((c, index) => (\r\n                  <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>\r\n                ))}\r\n\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <canvas id=\"swingcanvas\" className={classes.canvas} height={canvasHeight} width={canvasWidth} />\r\n          <div className={classes.footer} style={{ backgroundColor: game.minigame.levelColor }}>\r\n            <Typography variant=\"h2\">{highestAcceleration}</Typography>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGolfController.propTypes = {\r\n  playerKey: PropTypes.string.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n  classes: PropTypes.any,\r\n};\r\nexport default withStyles(styles)(GolfController);\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction generateName(currentNames) {\r\n  const adjectives = ['adamant', 'adroit', 'amatory', 'animistic', 'antic', 'arcadian', 'baleful', 'bellicose', 'bilious', 'boorish', 'calamitous', 'caustic', 'cerulean', 'comely', 'concomitant', 'contumacious', 'corpulent', 'crapulous', 'defamatory', 'didactic', 'dilatory', 'dowdy', 'efficacious', 'effulgent', 'egregious', 'endemic', 'equanimous', 'execrable', 'fastidious', 'feckless', 'fecund', 'friable', 'fulsome', 'garrulous', 'guileless', 'gustatory', 'heuristic', 'histrionic', 'hubristic', 'incendiary', 'insidious', 'insolent', 'intransigent', 'inveterate', 'invidious', 'irksome', 'jejune', 'jocular', 'judicious', 'lachrymose', 'limpid', 'loquacious', 'luminous', 'mannered', 'mendacious', 'meretricious', 'minatory', 'mordant', 'munificent', 'nefarious', 'noxious', 'obtuse', 'parsimonious', 'pendulous', 'pernicious', 'pervasive', 'petulant', 'platitudinous', 'precipitate', 'propitious', 'puckish', 'querulous', 'quiescent', 'rebarbative', 'recalcitant', 'redolent', 'rhadamanthine', 'risible', 'ruminative', 'sagacious', 'salubrious', 'sartorial', 'sclerotic', 'serpentine', 'spasmodic', 'strident', 'taciturn', 'tenacious', 'tremulous', 'trenchant', 'turbulent', 'turgid', 'ubiquitous', 'uxorious', 'verdant', 'voluble', 'voracious', 'wheedling', 'withering', 'zealous'];\r\n  const nouns = ['ninja', 'chair', 'pancake', 'statue', 'unicorn', 'rainbows', 'laser', 'senor', 'bunny', 'captain', 'nibblets', 'cupcake', 'carrot', 'gnomes', 'glitter', 'potato', 'salad', 'toejam', 'curtains', 'beets', 'toilet', 'exorcism', 'stick figures', 'mermaid eggs', 'sea barnacles', 'dragons', 'jellybeans', 'snakes', 'dolls', 'bushes', 'cookies', 'apples', 'ice cream', 'ukulele', 'kazoo', 'banjo', 'opera singer', 'circus', 'trampoline', 'carousel', 'carnival', 'locomotive', 'hot air balloon', 'praying mantis', 'animator', 'artisan', 'artist', 'colorist', 'inker', 'coppersmith', 'director', 'designer', 'flatter', 'stylist', 'leadman', 'limner', 'make-up artist', 'model', 'musician', 'penciller', 'producer', 'scenographer', 'set decorator', 'silversmith', 'teacher', 'auto mechanic', 'beader', 'bobbin boy', 'clerk of the chapel', 'filling station attendant', 'foreman', 'maintenance engineering', 'mechanic', 'miller', 'moldmaker', 'panel beater', 'patternmaker', 'plant operator', 'plumber', 'sawfiler', 'shop foreman', 'soaper', 'stationary engineer', 'wheelwright', 'woodworkers'];\r\n  let finalName = '';\r\n  for (let i = 0; i < 20; i++) {\r\n    let name = '';\r\n    if (i > 10) {\r\n      name = `${adjectives[Math.floor(Math.random() * adjectives.length)]} ${adjectives[Math.floor(Math.random() * adjectives.length)]} ${nouns[Math.floor(Math.random() * nouns.length)]}`;\r\n    } else {\r\n      name = `${adjectives[Math.floor(Math.random() * adjectives.length)]} ${nouns[Math.floor(Math.random() * nouns.length)]}`;\r\n    }\r\n    if (currentNames.indexOf(name) > -1) {\r\n      continue;\r\n    } else {\r\n      finalName = name;\r\n      break;\r\n    }\r\n  }\r\n  return finalName;\r\n}\r\nclass PhaseConnection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n    };\r\n    this.createPlayer = this.createPlayer.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { playerKey, game, addPlayer } = this.props;\r\n    if (!playerKey && game.minigame.nameGenerator) {\r\n      addPlayer(this.generatePlayer());\r\n    }\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  createPlayer() {\r\n    const { name } = this.state;\r\n    const { addPlayer } = this.props;\r\n    // validera så att namnet inte är taget.\r\n    const player = {\r\n      name,\r\n      score: 0,\r\n    };\r\n    addPlayer(player);\r\n  }\r\n\r\n  generatePlayer() {\r\n    const { game } = this.props;\r\n    let currentNames = [];\r\n    if (game.players) {\r\n      currentNames = Object.values(game.players).map(a => a.name);\r\n    }\r\n    const name = generateName(currentNames);\r\n    const player = {\r\n      name,\r\n      score: 0,\r\n    };\r\n    return player;\r\n  }\r\n\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const { name } = this.state;\r\n    let playerName = '';\r\n    if (game.players && playerKey && game.players[playerKey]) {\r\n      playerName = game.players[playerKey].name;\r\n    }\r\n    return (\r\n      <div className=\"phase-container\">\r\n        {playerName\r\n          ? (\r\n            <div>\r\n              <div className=\"quiz-top-section\" />\r\n              <div className=\"quiz-middle-section\">\r\n                <Typography variant=\"h5\">\r\n                  <span>Welcome </span>\r\n                  <span className=\"dynamic-text\">{playerName}</span>\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\"> Watch the screen, your name should show.</Typography>\r\n              </div>\r\n              <div className=\"quiz-bottom-section\" />\r\n            </div>\r\n          )\r\n          : (\r\n            <div>\r\n              <FormControl>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  margin=\"normal\"\r\n                  onChange={this.handleChange('name')}\r\n                />\r\n              </FormControl>\r\n              <Button onClick={this.createPlayer} variant=\"contained\">done</Button>\r\n            </div>\r\n          )\r\n            }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPhaseConnection.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  playerKey: PropTypes.string,\r\n  addPlayer: PropTypes.func.isRequired,\r\n};\r\nexport default PhaseConnection;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseStarting extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h5\">Starting game...</Typography>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseStarting;\r\n","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PhaseFinalResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"quiz-top-section\" />\r\n        <div className=\"quiz-middle-section\">\r\n          <Typography variant=\"h5\">Look at the screen. playerKey</Typography>\r\n        </div>\r\n        <div className=\"quiz-bottom-section\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhaseFinalResult;\r\n","import React, { Component, Fragment } from 'react';\r\nimport LeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport RightIcon from '@material-ui/icons/ChevronRight';\r\nimport UpIcon from '@material-ui/icons/ExpandLess';\r\nimport DownIcon from '@material-ui/icons/ExpandMore';\r\nimport { Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../../base';\r\n\r\nclass SnakeController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleAction = this.handleAction.bind(this);\r\n  }\r\n\r\n  handleAction(name) {\r\n    const { playerKey, game } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n\r\n    fire.database().ref(`/games/${game.key}/minigame/snakes/${currentPlayer.snakeId}/move`).set(name, (error) => {\r\n      if (error) {\r\n        console.log('error updated snake move');\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { game, playerKey } = this.props;\r\n    const currentPlayer = game.players[playerKey];\r\n    const playerSnake = game.minigame.snakes[currentPlayer.snakeId];\r\n\r\n    const allControlActions = playerSnake.actions;\r\n    const displayName = playerSnake.playerKeys.length === 1 ? currentPlayer.name : playerSnake.name;\r\n\r\n    return (\r\n      <div className=\"phase-container\">\r\n        <div className=\"player-controlls-container\">\r\n          {allControlActions.map(action => (\r\n            <Fragment key={action}>\r\n              {currentPlayer.controlActions.includes(action)\r\n                ? (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} onClick={() => { this.handleAction(action); }} style={{ backgroundColor: playerSnake.color }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                : (\r\n                  <Button key={action} className={`player-controlls-action player-controlls-${action}`} style={{ backgroundColor: playerSnake.color, opacity: 0.3 }}>\r\n                    {action === 'up' && <UpIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'down' && <DownIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'right' && <RightIcon className=\"player-controlls-icon\" />}\r\n                    {action === 'left' && <LeftIcon className=\"player-controlls-icon\" />}\r\n                  </Button>\r\n                )\r\n                            }\r\n            </Fragment>\r\n          ))}\r\n          <div className=\"player-controlls-action player-controlls-middle\">\r\n            <Typography variant=\"body1\">{displayName}</Typography>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSnakeController.propTypes = {\r\n  playerKey: PropTypes.string.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nexport default SnakeController;\r\n","import React, { Component } from 'react';\r\n\r\nclass TetrisController extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"phase-container\">\r\n                TetrisController.js\r\n\r\n                här  ska jag visa knappar för moves. och en metod här som tar knapptrycket och updaterar en specifik property i firebase baserat på gameid, playerkey etc.\r\n                måste ha med snakeId in i dnena kommmponent?\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TetrisController;","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PhaseConnection from './PhaseConnection';\r\nimport PhaseStarting from './PhaseStarting';\r\nimport PhaseFinalResult from './PhaseFinalResult';\r\nimport SnakeController from '../snake/SnakeController';\r\nimport TetrisController from '../tetris/TetrisController';\r\nimport GolfController from '../golf/GolfController';\r\n\r\nclass Minigame extends PureComponent {\r\n  render() {\r\n    const {\r\n      game, playerKey, createPlayer,\r\n    } = this.props;\r\n    const lastPhase = game.phase === 'final_result' || game.phase === 'end';\r\n    switch (game.gametype) {\r\n      case 'snake':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <SnakeController game={game} playerKey={playerKey} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      case 'tetris':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {game.phase === 'gameplay' && <TetrisController game={game} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      case 'golf':\r\n        return (\r\n          <div className=\"play-container\">\r\n            {game.phase === 'connection' && <PhaseConnection game={game} addPlayer={createPlayer} playerKey={playerKey} />}\r\n            {game.phase === 'starting' && <PhaseStarting game={game} />}\r\n            {(game.phase === 'gameplay' || game.phase === 'level_completed') && <GolfController game={game} playerKey={playerKey} />}\r\n            {lastPhase && <PhaseFinalResult game={game} playerKey={playerKey} />}\r\n          </div>\r\n        );\r\n      default:\r\n        return (null);\r\n    }\r\n  }\r\n}\r\nMinigame.propTypes = {\r\n  game: PropTypes.object.isRequired,\r\n  createPlayer: PropTypes.func.isRequired,\r\n  playerKey: PropTypes.string.isRequired,\r\n};\r\nexport default Minigame;\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport PropTypes from 'prop-types';\r\nimport { fire } from '../../base';\r\nimport Quiz from '../quiz/play/Quiz';\r\nimport Minigame from '../minigame/play/Minigame';\r\n\r\nclass Play extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      game: {},\r\n      gameId: '',\r\n      playerKey: '',\r\n    };\r\n    this.createPlayer = this.createPlayer.bind(this);\r\n    this.fetchGame = this.fetchGame.bind(this);\r\n  }\r\n\r\n  handleChange = name => (event) => {\r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  fetchGame() {\r\n    const { gameId } = this.state;\r\n    const { showSnackbar, toggleHeader } = this.props;\r\n    const that = this;\r\n    fire.database().ref('games').orderByChild('gameId').equalTo(gameId)\r\n      .once('value', (snapshot) => {\r\n        if (snapshot.val()) {\r\n          let game;\r\n          snapshot.forEach((child) => {\r\n            game = child.val();\r\n          });\r\n          // får skapa en ny attribut, canPlayerJoin true/false om det begövs\r\n          if (game.phase === 'connection') {\r\n            const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n            if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n              that.setState({ playerKey: storedPlayerKey });\r\n            }\r\n\r\n            that.initGameListiner(game.key);\r\n            const snack = {\r\n              variant: 'success',\r\n              message: 'Connected to game',\r\n            };\r\n            showSnackbar(snack);\r\n            toggleHeader(false);\r\n          } else if (game.phase === 'setup') {\r\n            const snack = {\r\n              variant: 'error',\r\n              message: 'Game is not yet started',\r\n            };\r\n            showSnackbar(snack);\r\n          } else {\r\n            const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\r\n            if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\r\n              that.setState({ playerKey: storedPlayerKey });\r\n              that.initGameListiner(game.key);\r\n              const snack = {\r\n                variant: 'success',\r\n                message: 'Connected to game',\r\n              };\r\n              showSnackbar(snack);\r\n              toggleHeader(false);\r\n            } else {\r\n              const snack = {\r\n                variant: 'error',\r\n                message: 'Game is in progress',\r\n              };\r\n              showSnackbar(snack);\r\n            }\r\n          }\r\n        } else {\r\n          const snack = {\r\n            variant: 'info',\r\n            message: 'No game found',\r\n          };\r\n          showSnackbar(snack);\r\n        }\r\n      });\r\n  }\r\n\r\n  initGameListiner(gameKey) {\r\n    const gameRef = fire.database().ref(`games/${gameKey}`);\r\n    const that = this;\r\n    gameRef.on('value', (snapshot) => {\r\n      const game = snapshot.val();\r\n      if (game) {\r\n        // kan blir problem med asynch setstate?\r\n        that.setState({\r\n          game,\r\n        });\r\n      } else {\r\n        that.setState({\r\n          game: '',\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  createPlayer(player) {\r\n    const { game } = this.state;\r\n    const { showSnackbar } = this.props;\r\n    const playerRef = fire.database().ref(`/games/${game.key}/players`).push();\r\n    const newPlayer = Object.assign({ key: playerRef.key }, player);\r\n    const that = this;\r\n    playerRef.set(newPlayer, (error) => {\r\n      if (error) {\r\n        const snack = {\r\n          variant: 'error',\r\n          message: 'Unexpected internal error',\r\n        };\r\n        showSnackbar(snack);\r\n      } else {\r\n        that.setState({\r\n          playerKey: newPlayer.key,\r\n        });\r\n        localStorage.setItem('RecentPlayerKey', newPlayer.key);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { game, playerKey, gameId } = this.state;\r\n    const { showSnackbar } = this.props;\r\n    if (!game.phase) {\r\n      return (\r\n        <div className=\"page-container play-page\">\r\n          <FormControl>\r\n            <TextField\r\n              label=\"Game PIN\"\r\n              name=\"Game ID\"\r\n              value={gameId}\r\n              margin=\"normal\"\r\n              onChange={this.handleChange('gameId')}\r\n            />\r\n          </FormControl>\r\n          <Button onClick={this.fetchGame} variant=\"contained\">Join</Button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"page-container play-page\">\r\n        {game.gametype === 'quiz' && <Quiz game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'snake' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'tetris' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n        {game.gametype === 'golf' && <Minigame game={game} createPlayer={this.createPlayer} playerKey={playerKey} showSnackbar={showSnackbar} />}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPlay.propTypes = {\r\n  showSnackbar: PropTypes.func.isRequired,\r\n  toggleHeader: PropTypes.func.isRequired,\r\n};\r\nexport default Play;\r\n","import React, { Component } from 'react';\r\nimport { Typography, Card } from '@material-ui/core';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-page home-page\">\r\n        <Grid container spacing={24}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h3\">Welcome to stagehoot</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Link to=\"/play\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Play\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Connect to a game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Link to=\"/host\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Host\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Host a created game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link to=\"/create\">\r\n              <Card className=\"card-button\">\r\n                <CardHeader title=\"Create\" />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" align=\"center\">Create a game</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport green from '@material-ui/core/colors/green';\r\nimport amber from '@material-ui/core/colors/amber';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  warning: WarningIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n  success: {\r\n    backgroundColor: green[600],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700],\r\n  },\r\n  icon: {\r\n    fontSize: 20,\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  message: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nfunction MySnackbarContent(props) {\r\n  const {\r\n    classes, message, onClose, variant, ...other\r\n  } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={classes[variant]}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={(\r\n        <span id=\"client-snackbar\" className={classes.message}>\r\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n            )}\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"Close\"\r\n          color=\"inherit\"\r\n          className={classes.close}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>,\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nMySnackbarContent.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\r\n\r\nclass CustomizedSnackbars extends React.Component {\r\n    handleClose = (reason) => {\r\n      const { hideSnackbar } = this.props;\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n      hideSnackbar();\r\n    };\r\n\r\n    render() {\r\n      const { snack } = this.props;\r\n      return (\r\n        <div>\r\n          <Snackbar\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'left',\r\n            }}\r\n            open={snack.open}\r\n            autoHideDuration={6000}\r\n            onClose={this.handleClose}\r\n          >\r\n            <MySnackbarContentWrapper\r\n              onClose={this.handleClose}\r\n              variant={snack.variant}\r\n              message={snack.message}\r\n            />\r\n          </Snackbar>\r\n        </div>\r\n      );\r\n    }\r\n}\r\nCustomizedSnackbars.propTypes = {\r\n  snack: PropTypes.object,\r\n  hideSnackbar: PropTypes.func.isRequired,\r\n};\r\nexport default CustomizedSnackbars;\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { fire } from './base';\nimport Header from './components/common/Header';\nimport Create from './components/pages/Create';\nimport Host from './components/pages/Host';\nimport Play from './components/pages/Play';\nimport Home from './components/pages/Home';\nimport CustomizedSnackbars from './components/common/CustomizedSnackbars';\n\nimport {\n  HashRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snack: '',\n      showHeader: true,\n    };\n    this.showSnackbar = this.showSnackbar.bind(this);\n    this.hideSnackbar = this.hideSnackbar.bind(this);\n    this.toggleHeader = this.toggleHeader.bind(this);\n\n  }\n  hideSnackbar() {\n    let snack = this.state.snack;\n    snack.open = false;\n    this.setState({\n      snack: snack,\n    });\n  }\n  showSnackbar(snack) {\n    snack.open = true;\n    this.setState({\n      snack: snack,\n    });\n  }\n  toggleHeader(value) {\n    this.setState({ showHeader: value });\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {this.state.showHeader && <Header />}\n          <div id=\"content\">\n            <Route exact path=\"/play\" render={() => <Play showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/host\" render={() => <Host showSnackbar={this.showSnackbar} toggleHeader={this.toggleHeader} />} />\n            <Route exact path=\"/create\" render={() => <Create showSnackbar={this.showSnackbar} />} />\n            <Route exact path=\"/\" render={() => <Home />} />\n          </div>\n          {this.state.snack && <CustomizedSnackbars snack={this.state.snack} hideSnackbar={this.hideSnackbar} />}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}